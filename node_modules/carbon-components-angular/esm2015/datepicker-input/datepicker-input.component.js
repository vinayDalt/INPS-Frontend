/**
 *
 * carbon-angular v0.0.0 | datepicker-input.component.js
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { Component, Input, Output, EventEmitter, ElementRef, TemplateRef, ViewChild } from "@angular/core";
import { NG_VALUE_ACCESSOR } from "@angular/forms";
export class DatePickerInput {
    constructor(elementRef) {
        this.elementRef = elementRef;
        /**
         * Select a calendar type for the `model`.
         * Internal purposes only.
         */
        this.type = "simple";
        this.id = `datepicker-${DatePickerInput.datePickerCount++}`;
        this.hasIcon = false;
        this.placeholder = "mm/dd/yyyy";
        this.pattern = "^\\d{1,2}/\\d{1,2}/\\d{4}$";
        this.valueChange = new EventEmitter();
        this.theme = "dark";
        this.disabled = false;
        /**
         * Set to `true` for invalid state.
         */
        this.invalid = false;
        /**
          * Set to `true` to show a warning (contents set by warnText)
          */
        this.warn = false;
        this.skeleton = false;
        this.value = "";
        this.size = "md";
        this.onTouched = () => { };
        this.propagateChange = (_) => { };
    }
    onChange(event) {
        this.value = event.target.value;
        this.valueChange.emit(this.value);
        this.propagateChange(this.value);
        this.onTouched();
    }
    writeValue(value) {
        this.value = value;
    }
    registerOnChange(fn) {
        this.propagateChange = fn;
    }
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    isTemplate(value) {
        return value instanceof TemplateRef;
    }
}
DatePickerInput.datePickerCount = 0;
DatePickerInput.decorators = [
    { type: Component, args: [{
                selector: "ibm-date-picker-input",
                template: `
	<div class="bx--form-item">
		<div class="bx--date-picker"
			[ngClass]="{
				'bx--date-picker--simple' : type === 'simple',
				'bx--date-picker--single' : type === 'single',
				'bx--date-picker--range' : type === 'range',
				'bx--date-picker--light' : theme === 'light',
				'bx--skeleton' : skeleton
			}">
			<div class="bx--date-picker-container">
				<label *ngIf="label" [for]="id" class="bx--label">
					<ng-container *ngIf="!isTemplate(label)">{{label}}</ng-container>
					<ng-template *ngIf="isTemplate(label)" [ngTemplateOutlet]="label"></ng-template>
				</label>
				<div class="bx--date-picker-input__wrapper"
					[ngClass]="{
						'bx--date-picker-input__wrapper--invalid': invalid,
						'bx--date-picker-input__wrapper--warn': warn
					}">
					<input
						#input
						*ngIf="!skeleton"
						autocomplete="off"
						type="text"
						class="bx--date-picker__input"
						[ngClass]="{
							'bx--date-picker__input--sm': size === 'sm',
							'bx--date-picker__input--xl': size === 'xl'
						}"
						[attr.data-invalid]="invalid ? true : undefined"
						[value]="value"
						[pattern]="pattern"
						[placeholder]="placeholder"
						[id]= "id"
						[disabled]="disabled"
						(change)="onChange($event)"/>
						<svg
							*ngIf="type !== 'simple' && !warn && !invalid"
							ibmIcon="calendar"
							size="16"
							class="bx--date-picker__icon">
						</svg>
						<svg
							*ngIf="!warn && invalid"
							class="bx--date-picker__icon bx--date-picker__icon--invalid"
							ibmIcon="warning--filled"
							size="16">
						</svg>
						<svg
							*ngIf="!invalid && warn"
							ibmIcon="warning--alt--filled"
							size="16"
							class="bx--date-picker__icon bx--date-picker__icon--warn">
						</svg>
				</div>
				<div *ngIf="!warn && invalid" class="bx--form-requirement">
					<ng-container *ngIf="!isTemplate(invalidText)">{{ invalidText }}</ng-container>
					<ng-template *ngIf="isTemplate(invalidText)" [ngTemplateOutlet]="invalidText"></ng-template>
				</div>
				<div *ngIf="!invalid && warn" class="bx--form-requirement">
					<ng-container *ngIf="!isTemplate(warnText)">{{warnText}}</ng-container>
					<ng-template *ngIf="isTemplate(warnText)" [ngTemplateOutlet]="warnText"></ng-template>
				</div>
			</div>
		</div>
</div>
	`,
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: DatePickerInput,
                        multi: true
                    }
                ]
            }] }
];
/** @nocollapse */
DatePickerInput.ctorParameters = () => [
    { type: ElementRef }
];
DatePickerInput.propDecorators = {
    type: [{ type: Input }],
    id: [{ type: Input }],
    hasIcon: [{ type: Input }],
    label: [{ type: Input }],
    placeholder: [{ type: Input }],
    pattern: [{ type: Input }],
    valueChange: [{ type: Output }],
    theme: [{ type: Input }],
    disabled: [{ type: Input }],
    invalid: [{ type: Input }],
    invalidText: [{ type: Input }],
    warn: [{ type: Input }],
    warnText: [{ type: Input }],
    skeleton: [{ type: Input }],
    value: [{ type: Input }],
    size: [{ type: Input }],
    input: [{ type: ViewChild, args: ["input", { static: false },] }]
};
//# sourceMappingURL=data:application/json;base64,