{"version":3,"sources":["ng://carbon-components-angular/checkbox/checkbox.component.ts","ng://carbon-components-angular/checkbox/checkbox.module.ts"],"sourcesContent":["import {\n\tAfterViewInit,\n\tChangeDetectionStrategy,\n\tChangeDetectorRef,\n\tComponent,\n\tElementRef,\n\tEventEmitter,\n\tInput,\n\tOutput,\n\tViewChild,\n\tHostBinding,\n\tHostListener\n} from \"@angular/core\";\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from \"@angular/forms\";\nimport { CheckboxValue } from \"./checkbox.types\";\n\n/**\n * Defines the set of states for a checkbox component.\n */\nexport enum CheckboxState {\n\tInit,\n\tIndeterminate,\n\tChecked,\n\tUnchecked\n}\n\n/**\n * Used to emit changes performed on checkbox components.\n *\n * @deprecated since v4\n */\nexport class CheckboxChange {\n\t/**\n\t * Contains the `Checkbox` that has been changed.\n\t */\n\tsource: Checkbox;\n\t/**\n\t * The state of the `Checkbox` encompassed in the `CheckboxChange` class.\n\t */\n\tchecked: boolean;\n}\n\n/**\n * [See demo](../../?path=/story/checkbox--basic)\n *\n * <example-url>../../iframe.html?id=checkbox--basic</example-url>\n */\n@Component({\n\tselector: \"ibm-checkbox\",\n\ttemplate: `\n\t\t<div class=\"bx--form-item bx--checkbox-wrapper\">\n\t\t\t<input\n\t\t\t\t#inputCheckbox\n\t\t\t\tclass=\"bx--checkbox\"\n\t\t\t\ttype=\"checkbox\"\n\t\t\t\t[id]=\"id + '_input'\"\n\t\t\t\t[value]=\"value\"\n\t\t\t\t[name]=\"name\"\n\t\t\t\t[required]=\"required\"\n\t\t\t\t[checked]=\"checked\"\n\t\t\t\t[disabled]=\"disabled\"\n\t\t\t\t[attr.aria-labelledby]=\"ariaLabelledby\"\n\t\t\t\t[attr.aria-checked]=\"(indeterminate ? 'mixed' : checked)\"\n\t\t\t\t(change)=\"onChange($event)\"\n\t\t\t\t(click)=\"onClick($event)\">\n\t\t\t<label\n\t\t\t\t[for]=\"id + '_input'\"\n\t\t\t\t[attr.aria-label]=\"ariaLabel\"\n\t\t\t\tclass=\"bx--checkbox-label\"\n\t\t\t\t[ngClass]=\"{\n\t\t\t\t\t'bx--skeleton' : skeleton\n\t\t\t\t}\">\n\t\t\t\t<span [ngClass]=\"{'bx--visually-hidden' : hideLabel}\" class=\"bx--checkbox-label-text\">\n\t\t\t\t\t<ng-content></ng-content>\n\t\t\t\t</span>\n\t\t\t</label>\n\t\t</div>\n\t`,\n\tproviders: [\n\t\t{\n\t\t\tprovide: NG_VALUE_ACCESSOR,\n\t\t\tuseExisting: Checkbox,\n\t\t\tmulti: true\n\t\t}\n\t],\n\tchangeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class Checkbox implements ControlValueAccessor, AfterViewInit {\n\t/**\n\t * Variable used for creating unique ids for checkbox components.\n\t */\n\tstatic checkboxCount = 0;\n\n\t/**\n\t * Size of the checkbox.\n\t *\n\t * @deprecated since v4\n\t */\n\t@Input() size: \"sm\" | \"md\" = \"md\";\n\t/**\n\t * Set to `true` for checkbox to be rendered with nested styles.\n\t *\n\t * @deprecated since v4\n\t */\n\t@Input() nested: boolean;\n\t/**\n\t * Set to `true` for checkbox to be rendered without any classes on the host element.\n\t */\n\t@Input() inline = false;\n\t/**\n\t * Set to `true` for a disabled checkbox.\n\t */\n\t@Input() disabled = false;\n\t/**\n\t * Set to `true` for a loading checkbox.\n\t */\n\t@Input() skeleton = false;\n\t/**\n\t * Set to `true` to hide the checkbox labels.\n\t */\n\t@Input() hideLabel = false;\n\t/**\n\t * Sets the name attribute on the `input` element.\n\t */\n\t@Input() name: string;\n\t/**\n\t * The unique id for the checkbox component.\n\t */\n\t@Input() id = `checkbox-${Checkbox.checkboxCount}`;\n\t/**\n\t * Reflects the required attribute of the `input` element.\n\t */\n\t@Input() required: boolean;\n\t/**\n\t * Sets the value attribute on the `input` element.\n\t */\n\t@Input() value: CheckboxValue;\n\t/**\n\t * Used to set the `aria-label` attribute on the input element.\n\t *\n\t * @deprecated since v4 use the `ariaLabel` input instead\n\t */\n\t// tslint:disable-next-line:no-input-rename\n\t@Input(\"aria-label\") set ariaLabel(value: string) {\n\t\tthis._ariaLabel = value;\n\t}\n\n\tget ariaLabel() {\n\t\treturn this._ariaLabel;\n\t}\n\n\t// TODO: drop the `_`\n\t// tslint:disable-next-line:no-input-rename\n\t@Input(\"ariaLabel\") _ariaLabel = \"\";\n\n\t/**\n\t * Used to set the `aria-labelledby` attribute on the input element.\n\t *\n\t * @deprecated since v4 use the `ariaLabelledby` input instead\n\t */\n\t// tslint:disable-next-line:no-input-rename\n\t@Input(\"aria-labelledby\") set ariaLabelledby(value: string) {\n\t\tthis._ariaLabelledby = value;\n\t}\n\n\tget ariaLabelledby() {\n\t\treturn this._ariaLabelledby;\n\t}\n\n\t// TODO: drop the `_`\n\t// tslint:disable-next-line:no-input-rename\n\t@Input(\"ariaLabelledby\") _ariaLabelledby: string;\n\n\t/**\n\t * Set the checkbox's indeterminate state to match the parameter and transition the view to reflect the change.\n\t *\n\t * Allows double binding with the `indeterminateChange` Output.\n\t */\n\t@Input() set indeterminate(indeterminate: boolean) {\n\t\tif (indeterminate === this._indeterminate) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._indeterminate = indeterminate;\n\n\t\tif (this._indeterminate) {\n\t\t\tthis.transitionCheckboxState(CheckboxState.Indeterminate);\n\t\t} else {\n\t\t\tthis.transitionCheckboxState(this.checked ? CheckboxState.Checked : CheckboxState.Unchecked);\n\t\t}\n\n\t\tthis.inputCheckbox.nativeElement.indeterminate = indeterminate;\n\t\tthis.changeDetectorRef.markForCheck();\n\t\tthis.indeterminateChange.emit(this._indeterminate);\n\t}\n\n\t/**\n\t * Reflects whether the checkbox state is indeterminate.\n\t */\n\tget indeterminate() {\n\t\treturn this._indeterminate;\n\t}\n\n\t/**\n\t * Sets the `checked` state. `true` for checked, `false` for unchecked\n\t *\n\t * Allows double binding with the `checkedChange` Output.\n\t */\n\t@Input() set checked (checked: boolean) {\n\t\tthis.setChecked(checked, false);\n\t}\n\n\t/**\n\t * Returns value `true` if state is selected for the checkbox.\n\t */\n\tget checked() {\n\t\treturn this._checked;\n\t}\n\n\t/**\n\t * Emits click event.\n\t */\n\t@Output() click = new EventEmitter<void>();\n\t/**\n\t * Emits event notifying other classes when a change in state occurs on a checkbox after a\n\t * click.\n\t *\n\t * @deprecated since v4 use `checked` and `checkedChange` instead\n\t */\n\t@Output() change = new EventEmitter<any>();\n\n\t/**\n\t * Emits an event when the value of the checkbox changes.\n\t *\n\t * Allows double biding with the `checked` Input.\n\t */\n\t@Output() checkedChange = new EventEmitter<boolean>();\n\n\t/**\n\t * Emits event notifying other classes when a change in state occurs specifically\n\t * on an indeterminate checkbox.\n\t */\n\t@Output() indeterminateChange = new EventEmitter<boolean>();\n\n\t/**\n\t * Set to `true` if the input checkbox is selected (or checked).\n\t */\n\t_checked = false;\n\t/**\n\t * Set to `true` if the input checkbox is in state indeterminate.\n\t */\n\t_indeterminate = false;\n\n\t/**\n\t * Keeps a reference to the checkboxes current state, as defined in `CheckboxState`.\n\t */\n\tcurrentCheckboxState = CheckboxState.Init;\n\n\t/**\n\t * Maintains a reference to the view DOM element of the `Checkbox`.\n\t */\n\t// @ts-ignore\n\t@ViewChild(\"inputCheckbox\", { static: false }) inputCheckbox: ElementRef;\n\n\t/**\n\t * Creates an instance of `Checkbox`.\n\t */\n\tconstructor(protected changeDetectorRef: ChangeDetectorRef) {\n\t\tCheckbox.checkboxCount++;\n\t}\n\n\t/**\n\t * Toggle the selected state of the checkbox.\n\t */\n\tpublic toggle() {\n\t\t// Flip checked and reset indeterminate\n\t\tthis.setChecked(!this.checked, true);\n\t}\n\n\t/**\n\t * Writes a value from `ngModel` to the component.\n\t *\n\t * In this case the value is the `checked` property.\n\t *\n\t * @param value boolean, corresponds to the `checked` property.\n\t */\n\tpublic writeValue(value: any) {\n\t\t// Set checked and reset indeterminate\n\t\tthis.setChecked(!!value, true);\n\t}\n\n\t/**\n\t * Sets a method in order to propagate changes back to the form.\n\t */\n\tpublic registerOnChange(fn: any) {\n\t\tthis.propagateChange = fn;\n\t}\n\n\t/**\n\t * Registers a callback to be triggered when the control has been touched.\n\t * @param fn Callback to be triggered when the checkbox is touched.\n\t */\n\tpublic registerOnTouched(fn: any) {\n\t\tthis.onTouched = fn;\n\t}\n\n\t/**\n\t * `ControlValueAccessor` method to programmatically disable the checkbox.\n\t *\n\t * ex: `this.formGroup.get(\"myCheckbox\").disable();`\n\t *\n\t * @param isDisabled `true` to disable the checkbox\n\t */\n\tsetDisabledState(isDisabled: boolean) {\n\t\tthis.disabled = isDisabled;\n\t\tthis.inputCheckbox.nativeElement.disabled = this.disabled;\n\t}\n\n\t@HostListener(\"focusout\")\n\tfocusOut() {\n\t\tthis.onTouched();\n\t}\n\n\t/**\n\t * Executes on the event of a change within `Checkbox` to block propagation.\n\t */\n\tonChange(event: Event) {\n\t\tevent.stopPropagation();\n\t}\n\n\t/**\n\t * Handles click events on the `Checkbox` and emits changes to other classes.\n\t */\n\tonClick(event: Event) {\n\t\tif (this.click.observers.length) {\n\t\t\t// Disable default checkbox activation behavior which flips checked and resets indeterminate.\n\t\t\t// This allows the parent component to control the checked/indeterminate properties.\n\t\t\tevent.preventDefault();\n\t\t\tthis.click.emit();\n\t\t\treturn;\n\t\t}\n\t\tif (!this.disabled) {\n\t\t\tthis.toggle();\n\t\t\tthis.transitionCheckboxState(this._checked ? CheckboxState.Checked : CheckboxState.Unchecked);\n\t\t\tthis.emitChangeEvent();\n\t\t}\n\t}\n\n\n\t/**\n\t * Called when checkbox is blurred. Needed to properly implement `ControlValueAccessor`.\n\t */\n\tonTouched: () => any = () => {};\n\n\t/**\n\t * Handles changes between checkbox states.\n\t */\n\ttransitionCheckboxState(newState: CheckboxState) {\n\t\tthis.currentCheckboxState = newState;\n\t}\n\n\t/**\n\t * Creates instance of `CheckboxChange` used to propagate the change event.\n\t */\n\temitChangeEvent() {\n\t\t/* begin deprecation */\n\t\tlet event = new CheckboxChange();\n\t\tevent.source = this;\n\t\tevent.checked = this.checked;\n\t\tthis.change.emit(event);\n\t\t/* end deprecation */\n\n\t\tthis.checkedChange.emit(this.checked);\n\t\tthis.propagateChange(this.checked);\n\t}\n\n\t/**\n\t * Updates the checkbox if it is in the indeterminate state.\n\t */\n\tngAfterViewInit() {\n\t\tif (this.indeterminate) {\n\t\t\tthis.inputCheckbox.nativeElement.indeterminate = true;\n\t\t}\n\t}\n\n\t/**\n\t * Method set in `registerOnChange` to propagate changes back to the form.\n\t */\n\tpropagateChange = (_: any) => {};\n\n\t/**\n\t * Sets checked state and optionally resets indeterminate state.\n\t */\n\tprivate setChecked(checked: boolean, resetIndeterminate: boolean) {\n\t\tif (checked === this._checked) {\n\t\t\treturn;\n\t\t}\n\t\tthis._checked = checked;\n\t\t// Reset indeterminate if requested\n\t\tif (resetIndeterminate && this._indeterminate) {\n\t\t\tthis._indeterminate = false;\n\t\t\tPromise.resolve().then(() => {\n\t\t\t\tthis.indeterminateChange.emit(this._indeterminate);\n\t\t\t});\n\t\t}\n\t\tthis.changeDetectorRef.markForCheck();\n\t}\n}\n","// modules\nimport { NgModule } from \"@angular/core\";\nimport { FormsModule } from \"@angular/forms\";\nimport { CommonModule } from \"@angular/common\";\n\n// imports\nimport { Checkbox } from \"./checkbox.component\";\n\n@NgModule({\n\tdeclarations: [\n\t\tCheckbox\n\t],\n\texports: [\n\t\tCheckbox\n\t],\n\timports: [\n\t\tCommonModule,\n\t\tFormsModule\n\t]\n})\nexport class CheckboxModule { }\n"],"names":["CheckboxState","CheckboxChange","Checkbox","Object","defineProperty","prototype","this","_ariaLabel","value","_ariaLabelledby","_indeterminate","indeterminate","transitionCheckboxState","Indeterminate","checked","Checked","Unchecked","inputCheckbox","nativeElement","changeDetectorRef","markForCheck","indeterminateChange","emit","_checked","setChecked","toggle","writeValue","registerOnChange","fn","propagateChange","registerOnTouched","onTouched","setDisabledState","isDisabled","disabled","focusOut","onChange","event","stopPropagation","onClick","click","observers","length","preventDefault","emitChangeEvent","newState","currentCheckboxState","source","change","checkedChange","ngAfterViewInit","resetIndeterminate","_this","Promise","resolve","then","checkboxCount","Component","args","selector","template","providers","provide","NG_VALUE_ACCESSOR","useExisting","multi","changeDetection","ChangeDetectionStrategy","OnPush","ChangeDetectorRef","Input","Output","ViewChild","static","HostListener","size","inline","skeleton","hideLabel","id","EventEmitter","Init","_","CheckboxModule","NgModule","declarations","exports","imports","CommonModule","FormsModule"],"mappings":"yeAmBA,IAAYA,GAAAA,EAAAA,EAAAA,gBAAAA,EAAAA,cAAa,KACxBA,EAAA,KAAA,GAAA,OACAA,EAAAA,EAAA,cAAA,GAAA,gBACAA,EAAAA,EAAA,QAAA,GAAA,UACAA,EAAAA,EAAA,UAAA,GAAA,YAQD,IAAAC,EAAA,aAgBAC,GAgGCC,OAAAC,eAAyBF,EAAAG,UAAA,YAAS,C,IAIlC,WACC,OAAOC,KAAKC,Y,IALb,SAAmCC,GAClCF,KAAKC,WAAaC,G,gCAiBnBL,OAAAC,eAA8BF,EAAAG,UAAA,iBAAc,C,IAI5C,WACC,OAAOC,KAAKG,iB,IALb,SAA6CD,GAC5CF,KAAKG,gBAAkBD,G,gCAgBxBL,OAAAC,eAAaF,EAAAG,UAAA,gBAAa,C,IAqB1B,WACC,OAAOC,KAAKI,gB,IAtBb,SAA2BC,GACtBA,IAAkBL,KAAKI,iBAI3BJ,KAAKI,eAAiBC,EAElBL,KAAKI,eACRJ,KAAKM,wBAAwBZ,EAAAA,cAAca,eAE3CP,KAAKM,wBAAwBN,KAAKQ,QAAUd,EAAAA,cAAce,QAAUf,EAAAA,cAAcgB,WAGnFV,KAAKW,cAAcC,cAAcP,cAAgBA,EACjDL,KAAKa,kBAAkBC,eACvBd,KAAKe,oBAAoBC,KAAKhB,KAAKI,kB,gCAepCP,OAAAC,eAAaF,EAAAG,UAAA,UAAO,C,IAOpB,WACC,OAAOC,KAAKiB,U,IARb,SAAsBT,GACrBR,KAAKkB,WAAWV,GAAS,I,gCAiEnBZ,EAAAG,UAAAoB,OAAP,WAECnB,KAAKkB,YAAYlB,KAAKQ,SAAS,IAUzBZ,EAAAG,UAAAqB,WAAP,SAAkBlB,GAEjBF,KAAKkB,aAAahB,GAAO,IAMnBN,EAAAG,UAAAsB,iBAAP,SAAwBC,GACvBtB,KAAKuB,gBAAkBD,GAOjB1B,EAAAG,UAAAyB,kBAAP,SAAyBF,GACxBtB,KAAKyB,UAAYH,GAUlB1B,EAAAG,UAAA2B,iBAAA,SAAiBC,GAChB3B,KAAK4B,SAAWD,EAChB3B,KAAKW,cAAcC,cAAcgB,SAAW5B,KAAK4B,UAIlDhC,EAAAG,UAAA8B,SADA,WAEC7B,KAAKyB,aAMN7B,EAAAG,UAAA+B,SAAA,SAASC,GACRA,EAAMC,mBAMPpC,EAAAG,UAAAkC,QAAA,SAAQF,GACP,GAAI/B,KAAKkC,MAAMC,UAAUC,OAKxB,OAFAL,EAAMM,sBACNrC,KAAKkC,MAAMlB,OAGPhB,KAAK4B,WACT5B,KAAKmB,SACLnB,KAAKM,wBAAwBN,KAAKiB,SAAWvB,EAAAA,cAAce,QAAUf,EAAAA,cAAcgB,WACnFV,KAAKsC,oBAaP1C,EAAAG,UAAAO,wBAAA,SAAwBiC,GACvBvC,KAAKwC,qBAAuBD,GAM7B3C,EAAAG,UAAAuC,gBAAA,WAEC,IAAIP,EAAQ,IAAIpC,EAChBoC,EAAMU,OAASzC,KACf+B,EAAMvB,QAAUR,KAAKQ,QACrBR,KAAK0C,OAAO1B,KAAKe,GAGjB/B,KAAK2C,cAAc3B,KAAKhB,KAAKQ,SAC7BR,KAAKuB,gBAAgBvB,KAAKQ,UAM3BZ,EAAAG,UAAA6C,gBAAA,WACK5C,KAAKK,gBACRL,KAAKW,cAAcC,cAAcP,eAAgB,IAY3CT,EAAAG,UAAAmB,WAAR,SAAmBV,EAAkBqC,GAArC,IAAAC,EAAA9C,KACKQ,IAAYR,KAAKiB,WAGrBjB,KAAKiB,SAAWT,EAEZqC,GAAsB7C,KAAKI,iBAC9BJ,KAAKI,gBAAiB,EACtB2C,QAAQC,UAAUC,KAAK,WACtBH,EAAK/B,oBAAoBC,KAAK8B,EAAK1C,mBAGrCJ,KAAKa,kBAAkBC,iBA1TjBlB,EAAAsD,cAAgB,E,oBA5CvBC,EAAAA,UAASC,KAAA,CAAC,CACVC,SAAU,eACVC,SAAU,43BA6BVC,UAAW,CACV,CACCC,QAASC,EAAAA,kBACTC,YAAa9D,EACb+D,OAAO,IAGTC,gBAAiBC,EAAAA,wBAAwBC,W,yCAlFzCC,EAAAA,qB,8BA+FCC,EAAAA,Q,cAMAA,EAAAA,Q,cAIAA,EAAAA,Q,gBAIAA,EAAAA,Q,gBAIAA,EAAAA,Q,iBAIAA,EAAAA,Q,YAIAA,EAAAA,Q,UAIAA,EAAAA,Q,gBAIAA,EAAAA,Q,aAIAA,EAAAA,Q,iBAOAA,EAAAA,MAAKZ,KAAA,CAAC,gB,kBAUNY,EAAAA,MAAKZ,KAAA,CAAC,e,sBAQNY,EAAAA,MAAKZ,KAAA,CAAC,qB,uBAUNY,EAAAA,MAAKZ,KAAA,CAAC,oB,qBAONY,EAAAA,Q,eA8BAA,EAAAA,Q,aAcAC,EAAAA,S,cAOAA,EAAAA,S,qBAOAA,EAAAA,S,2BAMAA,EAAAA,S,qBAoBAC,EAAAA,UAASd,KAAA,CAAC,gBAAiB,CAAEe,UAAQ,M,gBAwDrCC,EAAAA,aAAYhB,KAAA,CAAC,eAyFfxD,GA5IC,SAAAA,EAAsBiB,GAAAb,KAAAa,kBAAAA,EAzKbb,KAAAqE,KAAoB,KAUpBrE,KAAAsE,QAAS,EAITtE,KAAA4B,UAAW,EAIX5B,KAAAuE,UAAW,EAIXvE,KAAAwE,WAAY,EAQZxE,KAAAyE,GAAK,YAAY7E,EAASsD,cAyBflD,KAAAC,WAAa,GAqEvBD,KAAAkC,MAAQ,IAAIwC,EAAAA,aAOZ1E,KAAA0C,OAAS,IAAIgC,EAAAA,aAOb1E,KAAA2C,cAAgB,IAAI+B,EAAAA,aAMpB1E,KAAAe,oBAAsB,IAAI2D,EAAAA,aAKpC1E,KAAAiB,UAAW,EAIXjB,KAAAI,gBAAiB,EAKjBJ,KAAAwC,qBAAuB9C,EAAAA,cAAciF,KAgGrC3E,KAAAyB,UAAuB,aAoCvBzB,KAAAuB,gBAAkB,SAACqD,KAxHlBhF,EAASsD,gBC3QX,IAAA2B,G,oBAOCC,EAAAA,SAAQ1B,KAAA,CAAC,CACT2B,aAAc,CACbnF,GAEDoF,QAAS,CACRpF,GAEDqF,QAAS,CACRC,EAAAA,aACAC,EAAAA,iBAG4BN,GAZ9B,SAAAA,K"}