/**
 *
 * carbon-angular v0.0.0 | checkbox.component.js
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, EventEmitter, Input, Output, ViewChild, HostListener } from "@angular/core";
import { NG_VALUE_ACCESSOR } from "@angular/forms";
/**
 * Defines the set of states for a checkbox component.
 */
export var CheckboxState;
(function (CheckboxState) {
    CheckboxState[CheckboxState["Init"] = 0] = "Init";
    CheckboxState[CheckboxState["Indeterminate"] = 1] = "Indeterminate";
    CheckboxState[CheckboxState["Checked"] = 2] = "Checked";
    CheckboxState[CheckboxState["Unchecked"] = 3] = "Unchecked";
})(CheckboxState || (CheckboxState = {}));
/**
 * Used to emit changes performed on checkbox components.
 *
 * @deprecated since v4
 */
var CheckboxChange = /** @class */ (function () {
    function CheckboxChange() {
    }
    return CheckboxChange;
}());
export { CheckboxChange };
/**
 * [See demo](../../?path=/story/checkbox--basic)
 *
 * <example-url>../../iframe.html?id=checkbox--basic</example-url>
 */
var Checkbox = /** @class */ (function () {
    /**
     * Creates an instance of `Checkbox`.
     */
    function Checkbox(changeDetectorRef) {
        this.changeDetectorRef = changeDetectorRef;
        /**
         * Size of the checkbox.
         *
         * @deprecated since v4
         */
        this.size = "md";
        /**
         * Set to `true` for checkbox to be rendered without any classes on the host element.
         */
        this.inline = false;
        /**
         * Set to `true` for a disabled checkbox.
         */
        this.disabled = false;
        /**
         * Set to `true` for a loading checkbox.
         */
        this.skeleton = false;
        /**
         * Set to `true` to hide the checkbox labels.
         */
        this.hideLabel = false;
        /**
         * The unique id for the checkbox component.
         */
        this.id = "checkbox-" + Checkbox.checkboxCount;
        // TODO: drop the `_`
        // tslint:disable-next-line:no-input-rename
        this._ariaLabel = "";
        /**
         * Emits click event.
         */
        this.click = new EventEmitter();
        /**
         * Emits event notifying other classes when a change in state occurs on a checkbox after a
         * click.
         *
         * @deprecated since v4 use `checked` and `checkedChange` instead
         */
        this.change = new EventEmitter();
        /**
         * Emits an event when the value of the checkbox changes.
         *
         * Allows double biding with the `checked` Input.
         */
        this.checkedChange = new EventEmitter();
        /**
         * Emits event notifying other classes when a change in state occurs specifically
         * on an indeterminate checkbox.
         */
        this.indeterminateChange = new EventEmitter();
        /**
         * Set to `true` if the input checkbox is selected (or checked).
         */
        this._checked = false;
        /**
         * Set to `true` if the input checkbox is in state indeterminate.
         */
        this._indeterminate = false;
        /**
         * Keeps a reference to the checkboxes current state, as defined in `CheckboxState`.
         */
        this.currentCheckboxState = CheckboxState.Init;
        /**
         * Called when checkbox is blurred. Needed to properly implement `ControlValueAccessor`.
         */
        this.onTouched = function () { };
        /**
         * Method set in `registerOnChange` to propagate changes back to the form.
         */
        this.propagateChange = function (_) { };
        Checkbox.checkboxCount++;
    }
    Object.defineProperty(Checkbox.prototype, "ariaLabel", {
        get: function () {
            return this._ariaLabel;
        },
        /**
         * Used to set the `aria-label` attribute on the input element.
         *
         * @deprecated since v4 use the `ariaLabel` input instead
         */
        // tslint:disable-next-line:no-input-rename
        set: function (value) {
            this._ariaLabel = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Checkbox.prototype, "ariaLabelledby", {
        get: function () {
            return this._ariaLabelledby;
        },
        /**
         * Used to set the `aria-labelledby` attribute on the input element.
         *
         * @deprecated since v4 use the `ariaLabelledby` input instead
         */
        // tslint:disable-next-line:no-input-rename
        set: function (value) {
            this._ariaLabelledby = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Checkbox.prototype, "indeterminate", {
        /**
         * Reflects whether the checkbox state is indeterminate.
         */
        get: function () {
            return this._indeterminate;
        },
        /**
         * Set the checkbox's indeterminate state to match the parameter and transition the view to reflect the change.
         *
         * Allows double binding with the `indeterminateChange` Output.
         */
        set: function (indeterminate) {
            if (indeterminate === this._indeterminate) {
                return;
            }
            this._indeterminate = indeterminate;
            if (this._indeterminate) {
                this.transitionCheckboxState(CheckboxState.Indeterminate);
            }
            else {
                this.transitionCheckboxState(this.checked ? CheckboxState.Checked : CheckboxState.Unchecked);
            }
            this.inputCheckbox.nativeElement.indeterminate = indeterminate;
            this.changeDetectorRef.markForCheck();
            this.indeterminateChange.emit(this._indeterminate);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Checkbox.prototype, "checked", {
        /**
         * Returns value `true` if state is selected for the checkbox.
         */
        get: function () {
            return this._checked;
        },
        /**
         * Sets the `checked` state. `true` for checked, `false` for unchecked
         *
         * Allows double binding with the `checkedChange` Output.
         */
        set: function (checked) {
            this.setChecked(checked, false);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Toggle the selected state of the checkbox.
     */
    Checkbox.prototype.toggle = function () {
        // Flip checked and reset indeterminate
        this.setChecked(!this.checked, true);
    };
    /**
     * Writes a value from `ngModel` to the component.
     *
     * In this case the value is the `checked` property.
     *
     * @param value boolean, corresponds to the `checked` property.
     */
    Checkbox.prototype.writeValue = function (value) {
        // Set checked and reset indeterminate
        this.setChecked(!!value, true);
    };
    /**
     * Sets a method in order to propagate changes back to the form.
     */
    Checkbox.prototype.registerOnChange = function (fn) {
        this.propagateChange = fn;
    };
    /**
     * Registers a callback to be triggered when the control has been touched.
     * @param fn Callback to be triggered when the checkbox is touched.
     */
    Checkbox.prototype.registerOnTouched = function (fn) {
        this.onTouched = fn;
    };
    /**
     * `ControlValueAccessor` method to programmatically disable the checkbox.
     *
     * ex: `this.formGroup.get("myCheckbox").disable();`
     *
     * @param isDisabled `true` to disable the checkbox
     */
    Checkbox.prototype.setDisabledState = function (isDisabled) {
        this.disabled = isDisabled;
        this.inputCheckbox.nativeElement.disabled = this.disabled;
    };
    Checkbox.prototype.focusOut = function () {
        this.onTouched();
    };
    /**
     * Executes on the event of a change within `Checkbox` to block propagation.
     */
    Checkbox.prototype.onChange = function (event) {
        event.stopPropagation();
    };
    /**
     * Handles click events on the `Checkbox` and emits changes to other classes.
     */
    Checkbox.prototype.onClick = function (event) {
        if (this.click.observers.length) {
            // Disable default checkbox activation behavior which flips checked and resets indeterminate.
            // This allows the parent component to control the checked/indeterminate properties.
            event.preventDefault();
            this.click.emit();
            return;
        }
        if (!this.disabled) {
            this.toggle();
            this.transitionCheckboxState(this._checked ? CheckboxState.Checked : CheckboxState.Unchecked);
            this.emitChangeEvent();
        }
    };
    /**
     * Handles changes between checkbox states.
     */
    Checkbox.prototype.transitionCheckboxState = function (newState) {
        this.currentCheckboxState = newState;
    };
    /**
     * Creates instance of `CheckboxChange` used to propagate the change event.
     */
    Checkbox.prototype.emitChangeEvent = function () {
        /* begin deprecation */
        var event = new CheckboxChange();
        event.source = this;
        event.checked = this.checked;
        this.change.emit(event);
        /* end deprecation */
        this.checkedChange.emit(this.checked);
        this.propagateChange(this.checked);
    };
    /**
     * Updates the checkbox if it is in the indeterminate state.
     */
    Checkbox.prototype.ngAfterViewInit = function () {
        if (this.indeterminate) {
            this.inputCheckbox.nativeElement.indeterminate = true;
        }
    };
    /**
     * Sets checked state and optionally resets indeterminate state.
     */
    Checkbox.prototype.setChecked = function (checked, resetIndeterminate) {
        var _this = this;
        if (checked === this._checked) {
            return;
        }
        this._checked = checked;
        // Reset indeterminate if requested
        if (resetIndeterminate && this._indeterminate) {
            this._indeterminate = false;
            Promise.resolve().then(function () {
                _this.indeterminateChange.emit(_this._indeterminate);
            });
        }
        this.changeDetectorRef.markForCheck();
    };
    /**
     * Variable used for creating unique ids for checkbox components.
     */
    Checkbox.checkboxCount = 0;
    Checkbox.decorators = [
        { type: Component, args: [{
                    selector: "ibm-checkbox",
                    template: "\n\t\t<div class=\"bx--form-item bx--checkbox-wrapper\">\n\t\t\t<input\n\t\t\t\t#inputCheckbox\n\t\t\t\tclass=\"bx--checkbox\"\n\t\t\t\ttype=\"checkbox\"\n\t\t\t\t[id]=\"id + '_input'\"\n\t\t\t\t[value]=\"value\"\n\t\t\t\t[name]=\"name\"\n\t\t\t\t[required]=\"required\"\n\t\t\t\t[checked]=\"checked\"\n\t\t\t\t[disabled]=\"disabled\"\n\t\t\t\t[attr.aria-labelledby]=\"ariaLabelledby\"\n\t\t\t\t[attr.aria-checked]=\"(indeterminate ? 'mixed' : checked)\"\n\t\t\t\t(change)=\"onChange($event)\"\n\t\t\t\t(click)=\"onClick($event)\">\n\t\t\t<label\n\t\t\t\t[for]=\"id + '_input'\"\n\t\t\t\t[attr.aria-label]=\"ariaLabel\"\n\t\t\t\tclass=\"bx--checkbox-label\"\n\t\t\t\t[ngClass]=\"{\n\t\t\t\t\t'bx--skeleton' : skeleton\n\t\t\t\t}\">\n\t\t\t\t<span [ngClass]=\"{'bx--visually-hidden' : hideLabel}\" class=\"bx--checkbox-label-text\">\n\t\t\t\t\t<ng-content></ng-content>\n\t\t\t\t</span>\n\t\t\t</label>\n\t\t</div>\n\t",
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: Checkbox,
                            multi: true
                        }
                    ],
                    changeDetection: ChangeDetectionStrategy.OnPush
                }] }
    ];
    /** @nocollapse */
    Checkbox.ctorParameters = function () { return [
        { type: ChangeDetectorRef }
    ]; };
    Checkbox.propDecorators = {
        size: [{ type: Input }],
        nested: [{ type: Input }],
        inline: [{ type: Input }],
        disabled: [{ type: Input }],
        skeleton: [{ type: Input }],
        hideLabel: [{ type: Input }],
        name: [{ type: Input }],
        id: [{ type: Input }],
        required: [{ type: Input }],
        value: [{ type: Input }],
        ariaLabel: [{ type: Input, args: ["aria-label",] }],
        _ariaLabel: [{ type: Input, args: ["ariaLabel",] }],
        ariaLabelledby: [{ type: Input, args: ["aria-labelledby",] }],
        _ariaLabelledby: [{ type: Input, args: ["ariaLabelledby",] }],
        indeterminate: [{ type: Input }],
        checked: [{ type: Input }],
        click: [{ type: Output }],
        change: [{ type: Output }],
        checkedChange: [{ type: Output }],
        indeterminateChange: [{ type: Output }],
        inputCheckbox: [{ type: ViewChild, args: ["inputCheckbox", { static: false },] }],
        focusOut: [{ type: HostListener, args: ["focusout",] }]
    };
    return Checkbox;
}());
export { Checkbox };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hlY2tib3guY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vY2FyYm9uLWNvbXBvbmVudHMtYW5ndWxhci9jaGVja2JveC8iLCJzb3VyY2VzIjpbImNoZWNrYm94LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBRU4sdUJBQXVCLEVBQ3ZCLGlCQUFpQixFQUNqQixTQUFTLEVBQ1QsVUFBVSxFQUNWLFlBQVksRUFDWixLQUFLLEVBQ0wsTUFBTSxFQUNOLFNBQVMsRUFFVCxZQUFZLEVBQ1osTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLGlCQUFpQixFQUF3QixNQUFNLGdCQUFnQixDQUFDO0FBR3pFOztHQUVHO0FBQ0gsTUFBTSxDQUFOLElBQVksYUFLWDtBQUxELFdBQVksYUFBYTtJQUN4QixpREFBSSxDQUFBO0lBQ0osbUVBQWEsQ0FBQTtJQUNiLHVEQUFPLENBQUE7SUFDUCwyREFBUyxDQUFBO0FBQ1YsQ0FBQyxFQUxXLGFBQWEsS0FBYixhQUFhLFFBS3hCO0FBRUQ7Ozs7R0FJRztBQUNIO0lBQUE7SUFTQSxDQUFDO0lBQUQscUJBQUM7QUFBRCxDQUFDLEFBVEQsSUFTQzs7QUFFRDs7OztHQUlHO0FBQ0g7SUF5TkM7O09BRUc7SUFDSCxrQkFBc0IsaUJBQW9DO1FBQXBDLHNCQUFpQixHQUFqQixpQkFBaUIsQ0FBbUI7UUE5SzFEOzs7O1dBSUc7UUFDTSxTQUFJLEdBQWdCLElBQUksQ0FBQztRQU9sQzs7V0FFRztRQUNNLFdBQU0sR0FBRyxLQUFLLENBQUM7UUFDeEI7O1dBRUc7UUFDTSxhQUFRLEdBQUcsS0FBSyxDQUFDO1FBQzFCOztXQUVHO1FBQ00sYUFBUSxHQUFHLEtBQUssQ0FBQztRQUMxQjs7V0FFRztRQUNNLGNBQVMsR0FBRyxLQUFLLENBQUM7UUFLM0I7O1dBRUc7UUFDTSxPQUFFLEdBQUcsY0FBWSxRQUFRLENBQUMsYUFBZSxDQUFDO1FBdUJuRCxxQkFBcUI7UUFDckIsMkNBQTJDO1FB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Q0FBQyxJQUFJLENBQUMsS0FBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDO1lBQ3BELENBQUMsQ0FBQyxDQUFDO1NBQ0g7UUFDRCxJQUFJLENBQUMsaUJBQWlCLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDdkMsQ0FBQztJQTlURDs7T0FFRztJQUNJLHNCQUFhLEdBQUcsQ0FBQyxDQUFDOztnQkE1Q3pCLFNBQVMsU0FBQztvQkFDVixRQUFRLEVBQUUsY0FBYztvQkFDeEIsUUFBUSxFQUFFLHU1QkE0QlQ7b0JBQ0QsU0FBUyxFQUFFO3dCQUNWOzRCQUNDLE9BQU8sRUFBRSxpQkFBaUI7NEJBQzFCLFdBQVcsRUFBRSxRQUFROzRCQUNyQixLQUFLLEVBQUUsSUFBSTt5QkFDWDtxQkFDRDtvQkFDRCxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtpQkFDL0M7Ozs7Z0JBbkZBLGlCQUFpQjs7O3VCQStGaEIsS0FBSzt5QkFNTCxLQUFLO3lCQUlMLEtBQUs7MkJBSUwsS0FBSzsyQkFJTCxLQUFLOzRCQUlMLEtBQUs7dUJBSUwsS0FBSztxQkFJTCxLQUFLOzJCQUlMLEtBQUs7d0JBSUwsS0FBSzs0QkFPTCxLQUFLLFNBQUMsWUFBWTs2QkFVbEIsS0FBSyxTQUFDLFdBQVc7aUNBUWpCLEtBQUssU0FBQyxpQkFBaUI7a0NBVXZCLEtBQUssU0FBQyxnQkFBZ0I7Z0NBT3RCLEtBQUs7MEJBOEJMLEtBQUs7d0JBY0wsTUFBTTt5QkFPTixNQUFNO2dDQU9OLE1BQU07c0NBTU4sTUFBTTtnQ0FvQk4sU0FBUyxTQUFDLGVBQWUsRUFBRSxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUU7MkJBd0Q1QyxZQUFZLFNBQUMsVUFBVTs7SUF5RnpCLGVBQUM7Q0FBQSxBQXhXRCxJQXdXQztTQWhVWSxRQUFRIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcblx0QWZ0ZXJWaWV3SW5pdCxcblx0Q2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksXG5cdENoYW5nZURldGVjdG9yUmVmLFxuXHRDb21wb25lbnQsXG5cdEVsZW1lbnRSZWYsXG5cdEV2ZW50RW1pdHRlcixcblx0SW5wdXQsXG5cdE91dHB1dCxcblx0Vmlld0NoaWxkLFxuXHRIb3N0QmluZGluZyxcblx0SG9zdExpc3RlbmVyXG59IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQgeyBOR19WQUxVRV9BQ0NFU1NPUiwgQ29udHJvbFZhbHVlQWNjZXNzb3IgfSBmcm9tIFwiQGFuZ3VsYXIvZm9ybXNcIjtcbmltcG9ydCB7IENoZWNrYm94VmFsdWUgfSBmcm9tIFwiLi9jaGVja2JveC50eXBlc1wiO1xuXG4vKipcbiAqIERlZmluZXMgdGhlIHNldCBvZiBzdGF0ZXMgZm9yIGEgY2hlY2tib3ggY29tcG9uZW50LlxuICovXG5leHBvcnQgZW51bSBDaGVja2JveFN0YXRlIHtcblx0SW5pdCxcblx0SW5kZXRlcm1pbmF0ZSxcblx0Q2hlY2tlZCxcblx0VW5jaGVja2VkXG59XG5cbi8qKlxuICogVXNlZCB0byBlbWl0IGNoYW5nZXMgcGVyZm9ybWVkIG9uIGNoZWNrYm94IGNvbXBvbmVudHMuXG4gKlxuICogQGRlcHJlY2F0ZWQgc2luY2UgdjRcbiAqL1xuZXhwb3J0IGNsYXNzIENoZWNrYm94Q2hhbmdlIHtcblx0LyoqXG5cdCAqIENvbnRhaW5zIHRoZSBgQ2hlY2tib3hgIHRoYXQgaGFzIGJlZW4gY2hhbmdlZC5cblx0ICovXG5cdHNvdXJjZTogQ2hlY2tib3g7XG5cdC8qKlxuXHQgKiBUaGUgc3RhdGUgb2YgdGhlIGBDaGVja2JveGAgZW5jb21wYXNzZWQgaW4gdGhlIGBDaGVja2JveENoYW5nZWAgY2xhc3MuXG5cdCAqL1xuXHRjaGVja2VkOiBib29sZWFuO1xufVxuXG4vKipcbiAqIFtTZWUgZGVtb10oLi4vLi4vP3BhdGg9L3N0b3J5L2NoZWNrYm94LS1iYXNpYylcbiAqXG4gKiA8ZXhhbXBsZS11cmw+Li4vLi4vaWZyYW1lLmh0bWw/aWQ9Y2hlY2tib3gtLWJhc2ljPC9leGFtcGxlLXVybD5cbiAqL1xuQENvbXBvbmVudCh7XG5cdHNlbGVjdG9yOiBcImlibS1jaGVja2JveFwiLFxuXHR0ZW1wbGF0ZTogYFxuXHRcdDxkaXYgY2xhc3M9XCJieC0tZm9ybS1pdGVtIGJ4LS1jaGVja2JveC13cmFwcGVyXCI+XG5cdFx0XHQ8aW5wdXRcblx0XHRcdFx0I2lucHV0Q2hlY2tib3hcblx0XHRcdFx0Y2xhc3M9XCJieC0tY2hlY2tib3hcIlxuXHRcdFx0XHR0eXBlPVwiY2hlY2tib3hcIlxuXHRcdFx0XHRbaWRdPVwiaWQgKyAnX2lucHV0J1wiXG5cdFx0XHRcdFt2YWx1ZV09XCJ2YWx1ZVwiXG5cdFx0XHRcdFtuYW1lXT1cIm5hbWVcIlxuXHRcdFx0XHRbcmVxdWlyZWRdPVwicmVxdWlyZWRcIlxuXHRcdFx0XHRbY2hlY2tlZF09XCJjaGVja2VkXCJcblx0XHRcdFx0W2Rpc2FibGVkXT1cImRpc2FibGVkXCJcblx0XHRcdFx0W2F0dHIuYXJpYS1sYWJlbGxlZGJ5XT1cImFyaWFMYWJlbGxlZGJ5XCJcblx0XHRcdFx0W2F0dHIuYXJpYS1jaGVja2VkXT1cIihpbmRldGVybWluYXRlID8gJ21peGVkJyA6IGNoZWNrZWQpXCJcblx0XHRcdFx0KGNoYW5nZSk9XCJvbkNoYW5nZSgkZXZlbnQpXCJcblx0XHRcdFx0KGNsaWNrKT1cIm9uQ2xpY2soJGV2ZW50KVwiPlxuXHRcdFx0PGxhYmVsXG5cdFx0XHRcdFtmb3JdPVwiaWQgKyAnX2lucHV0J1wiXG5cdFx0XHRcdFthdHRyLmFyaWEtbGFiZWxdPVwiYXJpYUxhYmVsXCJcblx0XHRcdFx0Y2xhc3M9XCJieC0tY2hlY2tib3gtbGFiZWxcIlxuXHRcdFx0XHRbbmdDbGFzc109XCJ7XG5cdFx0XHRcdFx0J2J4LS1za2VsZXRvbicgOiBza2VsZXRvblxuXHRcdFx0XHR9XCI+XG5cdFx0XHRcdDxzcGFuIFtuZ0NsYXNzXT1cInsnYngtLXZpc3VhbGx5LWhpZGRlbicgOiBoaWRlTGFiZWx9XCIgY2xhc3M9XCJieC0tY2hlY2tib3gtbGFiZWwtdGV4dFwiPlxuXHRcdFx0XHRcdDxuZy1jb250ZW50PjwvbmctY29udGVudD5cblx0XHRcdFx0PC9zcGFuPlxuXHRcdFx0PC9sYWJlbD5cblx0XHQ8L2Rpdj5cblx0YCxcblx0cHJvdmlkZXJzOiBbXG5cdFx0e1xuXHRcdFx0cHJvdmlkZTogTkdfVkFMVUVfQUNDRVNTT1IsXG5cdFx0XHR1c2VFeGlzdGluZzogQ2hlY2tib3gsXG5cdFx0XHRtdWx0aTogdHJ1ZVxuXHRcdH1cblx0XSxcblx0Y2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2hcbn0pXG5leHBvcnQgY2xhc3MgQ2hlY2tib3ggaW1wbGVtZW50cyBDb250cm9sVmFsdWVBY2Nlc3NvciwgQWZ0ZXJWaWV3SW5pdCB7XG5cdC8qKlxuXHQgKiBWYXJpYWJsZSB1c2VkIGZvciBjcmVhdGluZyB1bmlxdWUgaWRzIGZvciBjaGVja2JveCBjb21wb25lbnRzLlxuXHQgKi9cblx0c3RhdGljIGNoZWNrYm94Q291bnQgPSAwO1xuXG5cdC8qKlxuXHQgKiBTaXplIG9mIHRoZSBjaGVja2JveC5cblx0ICpcblx0ICogQGRlcHJlY2F0ZWQgc2luY2UgdjRcblx0ICovXG5cdEBJbnB1dCgpIHNpemU6IFwic21cIiB8IFwibWRcIiA9IFwibWRcIjtcblx0LyoqXG5cdCAqIFNldCB0byBgdHJ1ZWAgZm9yIGNoZWNrYm94IHRvIGJlIHJlbmRlcmVkIHdpdGggbmVzdGVkIHN0eWxlcy5cblx0ICpcblx0ICogQGRlcHJlY2F0ZWQgc2luY2UgdjRcblx0ICovXG5cdEBJbnB1dCgpIG5lc3RlZDogYm9vbGVhbjtcblx0LyoqXG5cdCAqIFNldCB0byBgdHJ1ZWAgZm9yIGNoZWNrYm94IHRvIGJlIHJlbmRlcmVkIHdpdGhvdXQgYW55IGNsYXNzZXMgb24gdGhlIGhvc3QgZWxlbWVudC5cblx0ICovXG5cdEBJbnB1dCgpIGlubGluZSA9IGZhbHNlO1xuXHQvKipcblx0ICogU2V0IHRvIGB0cnVlYCBmb3IgYSBkaXNhYmxlZCBjaGVja2JveC5cblx0ICovXG5cdEBJbnB1dCgpIGRpc2FibGVkID0gZmFsc2U7XG5cdC8qKlxuXHQgKiBTZXQgdG8gYHRydWVgIGZvciBhIGxvYWRpbmcgY2hlY2tib3guXG5cdCAqL1xuXHRASW5wdXQoKSBza2VsZXRvbiA9IGZhbHNlO1xuXHQvKipcblx0ICogU2V0IHRvIGB0cnVlYCB0byBoaWRlIHRoZSBjaGVja2JveCBsYWJlbHMuXG5cdCAqL1xuXHRASW5wdXQoKSBoaWRlTGFiZWwgPSBmYWxzZTtcblx0LyoqXG5cdCAqIFNldHMgdGhlIG5hbWUgYXR0cmlidXRlIG9uIHRoZSBgaW5wdXRgIGVsZW1lbnQuXG5cdCAqL1xuXHRASW5wdXQoKSBuYW1lOiBzdHJpbmc7XG5cdC8qKlxuXHQgKiBUaGUgdW5pcXVlIGlkIGZvciB0aGUgY2hlY2tib3ggY29tcG9uZW50LlxuXHQgKi9cblx0QElucHV0KCkgaWQgPSBgY2hlY2tib3gtJHtDaGVja2JveC5jaGVja2JveENvdW50fWA7XG5cdC8qKlxuXHQgKiBSZWZsZWN0cyB0aGUgcmVxdWlyZWQgYXR0cmlidXRlIG9mIHRoZSBgaW5wdXRgIGVsZW1lbnQuXG5cdCAqL1xuXHRASW5wdXQoKSByZXF1aXJlZDogYm9vbGVhbjtcblx0LyoqXG5cdCAqIFNldHMgdGhlIHZhbHVlIGF0dHJpYnV0ZSBvbiB0aGUgYGlucHV0YCBlbGVtZW50LlxuXHQgKi9cblx0QElucHV0KCkgdmFsdWU6IENoZWNrYm94VmFsdWU7XG5cdC8qKlxuXHQgKiBVc2VkIHRvIHNldCB0aGUgYGFyaWEtbGFiZWxgIGF0dHJpYnV0ZSBvbiB0aGUgaW5wdXQgZWxlbWVudC5cblx0ICpcblx0ICogQGRlcHJlY2F0ZWQgc2luY2UgdjQgdXNlIHRoZSBgYXJpYUxhYmVsYCBpbnB1dCBpbnN0ZWFkXG5cdCAqL1xuXHQvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8taW5wdXQtcmVuYW1lXG5cdEBJbnB1dChcImFyaWEtbGFiZWxcIikgc2V0IGFyaWFMYWJlbCh2YWx1ZTogc3RyaW5nKSB7XG5cdFx0dGhpcy5fYXJpYUxhYmVsID0gdmFsdWU7XG5cdH1cblxuXHRnZXQgYXJpYUxhYmVsKCkge1xuXHRcdHJldHVybiB0aGlzLl9hcmlhTGFiZWw7XG5cdH1cblxuXHQvLyBUT0RPOiBkcm9wIHRoZSBgX2Bcblx0Ly8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWlucHV0LXJlbmFtZVxuXHRASW5wdXQoXCJhcmlhTGFiZWxcIikgX2FyaWFMYWJlbCA9IFwiXCI7XG5cblx0LyoqXG5cdCAqIFVzZWQgdG8gc2V0IHRoZSBgYXJpYS1sYWJlbGxlZGJ5YCBhdHRyaWJ1dGUgb24gdGhlIGlucHV0IGVsZW1lbnQuXG5cdCAqXG5cdCAqIEBkZXByZWNhdGVkIHNpbmNlIHY0IHVzZSB0aGUgYGFyaWFMYWJlbGxlZGJ5YCBpbnB1dCBpbnN0ZWFkXG5cdCAqL1xuXHQvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8taW5wdXQtcmVuYW1lXG5cdEBJbnB1dChcImFyaWEtbGFiZWxsZWRieVwiKSBzZXQgYXJpYUxhYmVsbGVkYnkodmFsdWU6IHN0cmluZykge1xuXHRcdHRoaXMuX2FyaWFMYWJlbGxlZGJ5ID0gdmFsdWU7XG5cdH1cblxuXHRnZXQgYXJpYUxhYmVsbGVkYnkoKSB7XG5cdFx0cmV0dXJuIHRoaXMuX2FyaWFMYWJlbGxlZGJ5O1xuXHR9XG5cblx0Ly8gVE9ETzogZHJvcCB0aGUgYF9gXG5cdC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1pbnB1dC1yZW5hbWVcblx0QElucHV0KFwiYXJpYUxhYmVsbGVkYnlcIikgX2FyaWFMYWJlbGxlZGJ5OiBzdHJpbmc7XG5cblx0LyoqXG5cdCAqIFNldCB0aGUgY2hlY2tib3gncyBpbmRldGVybWluYXRlIHN0YXRlIHRvIG1hdGNoIHRoZSBwYXJhbWV0ZXIgYW5kIHRyYW5zaXRpb24gdGhlIHZpZXcgdG8gcmVmbGVjdCB0aGUgY2hhbmdlLlxuXHQgKlxuXHQgKiBBbGxvd3MgZG91YmxlIGJpbmRpbmcgd2l0aCB0aGUgYGluZGV0ZXJtaW5hdGVDaGFuZ2VgIE91dHB1dC5cblx0ICovXG5cdEBJbnB1dCgpIHNldCBpbmRldGVybWluYXRlKGluZGV0ZXJtaW5hdGU6IGJvb2xlYW4pIHtcblx0XHRpZiAoaW5kZXRlcm1pbmF0ZSA9PT0gdGhpcy5faW5kZXRlcm1pbmF0ZSkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdHRoaXMuX2luZGV0ZXJtaW5hdGUgPSBpbmRldGVybWluYXRlO1xuXG5cdFx0aWYgKHRoaXMuX2luZGV0ZXJtaW5hdGUpIHtcblx0XHRcdHRoaXMudHJhbnNpdGlvbkNoZWNrYm94U3RhdGUoQ2hlY2tib3hTdGF0ZS5JbmRldGVybWluYXRlKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpcy50cmFuc2l0aW9uQ2hlY2tib3hTdGF0ZSh0aGlzLmNoZWNrZWQgPyBDaGVja2JveFN0YXRlLkNoZWNrZWQgOiBDaGVja2JveFN0YXRlLlVuY2hlY2tlZCk7XG5cdFx0fVxuXG5cdFx0dGhpcy5pbnB1dENoZWNrYm94Lm5hdGl2ZUVsZW1lbnQuaW5kZXRlcm1pbmF0ZSA9IGluZGV0ZXJtaW5hdGU7XG5cdFx0dGhpcy5jaGFuZ2VEZXRlY3RvclJlZi5tYXJrRm9yQ2hlY2soKTtcblx0XHR0aGlzLmluZGV0ZXJtaW5hdGVDaGFuZ2UuZW1pdCh0aGlzLl9pbmRldGVybWluYXRlKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBSZWZsZWN0cyB3aGV0aGVyIHRoZSBjaGVja2JveCBzdGF0ZSBpcyBpbmRldGVybWluYXRlLlxuXHQgKi9cblx0Z2V0IGluZGV0ZXJtaW5hdGUoKSB7XG5cdFx0cmV0dXJuIHRoaXMuX2luZGV0ZXJtaW5hdGU7XG5cdH1cblxuXHQvKipcblx0ICogU2V0cyB0aGUgYGNoZWNrZWRgIHN0YXRlLiBgdHJ1ZWAgZm9yIGNoZWNrZWQsIGBmYWxzZWAgZm9yIHVuY2hlY2tlZFxuXHQgKlxuXHQgKiBBbGxvd3MgZG91YmxlIGJpbmRpbmcgd2l0aCB0aGUgYGNoZWNrZWRDaGFuZ2VgIE91dHB1dC5cblx0ICovXG5cdEBJbnB1dCgpIHNldCBjaGVja2VkIChjaGVja2VkOiBib29sZWFuKSB7XG5cdFx0dGhpcy5zZXRDaGVja2VkKGNoZWNrZWQsIGZhbHNlKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHZhbHVlIGB0cnVlYCBpZiBzdGF0ZSBpcyBzZWxlY3RlZCBmb3IgdGhlIGNoZWNrYm94LlxuXHQgKi9cblx0Z2V0IGNoZWNrZWQoKSB7XG5cdFx0cmV0dXJuIHRoaXMuX2NoZWNrZWQ7XG5cdH1cblxuXHQvKipcblx0ICogRW1pdHMgY2xpY2sgZXZlbnQuXG5cdCAqL1xuXHRAT3V0cHV0KCkgY2xpY2sgPSBuZXcgRXZlbnRFbWl0dGVyPHZvaWQ+KCk7XG5cdC8qKlxuXHQgKiBFbWl0cyBldmVudCBub3RpZnlpbmcgb3RoZXIgY2xhc3NlcyB3aGVuIGEgY2hhbmdlIGluIHN0YXRlIG9jY3VycyBvbiBhIGNoZWNrYm94IGFmdGVyIGFcblx0ICogY2xpY2suXG5cdCAqXG5cdCAqIEBkZXByZWNhdGVkIHNpbmNlIHY0IHVzZSBgY2hlY2tlZGAgYW5kIGBjaGVja2VkQ2hhbmdlYCBpbnN0ZWFkXG5cdCAqL1xuXHRAT3V0cHV0KCkgY2hhbmdlID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XG5cblx0LyoqXG5cdCAqIEVtaXRzIGFuIGV2ZW50IHdoZW4gdGhlIHZhbHVlIG9mIHRoZSBjaGVja2JveCBjaGFuZ2VzLlxuXHQgKlxuXHQgKiBBbGxvd3MgZG91YmxlIGJpZGluZyB3aXRoIHRoZSBgY2hlY2tlZGAgSW5wdXQuXG5cdCAqL1xuXHRAT3V0cHV0KCkgY2hlY2tlZENoYW5nZSA9IG5ldyBFdmVudEVtaXR0ZXI8Ym9vbGVhbj4oKTtcblxuXHQvKipcblx0ICogRW1pdHMgZXZlbnQgbm90aWZ5aW5nIG90aGVyIGNsYXNzZXMgd2hlbiBhIGNoYW5nZSBpbiBzdGF0ZSBvY2N1cnMgc3BlY2lmaWNhbGx5XG5cdCAqIG9uIGFuIGluZGV0ZXJtaW5hdGUgY2hlY2tib3guXG5cdCAqL1xuXHRAT3V0cHV0KCkgaW5kZXRlcm1pbmF0ZUNoYW5nZSA9IG5ldyBFdmVudEVtaXR0ZXI8Ym9vbGVhbj4oKTtcblxuXHQvKipcblx0ICogU2V0IHRvIGB0cnVlYCBpZiB0aGUgaW5wdXQgY2hlY2tib3ggaXMgc2VsZWN0ZWQgKG9yIGNoZWNrZWQpLlxuXHQgKi9cblx0X2NoZWNrZWQgPSBmYWxzZTtcblx0LyoqXG5cdCAqIFNldCB0byBgdHJ1ZWAgaWYgdGhlIGlucHV0IGNoZWNrYm94IGlzIGluIHN0YXRlIGluZGV0ZXJtaW5hdGUuXG5cdCAqL1xuXHRfaW5kZXRlcm1pbmF0ZSA9IGZhbHNlO1xuXG5cdC8qKlxuXHQgKiBLZWVwcyBhIHJlZmVyZW5jZSB0byB0aGUgY2hlY2tib3hlcyBjdXJyZW50IHN0YXRlLCBhcyBkZWZpbmVkIGluIGBDaGVja2JveFN0YXRlYC5cblx0ICovXG5cdGN1cnJlbnRDaGVja2JveFN0YXRlID0gQ2hlY2tib3hTdGF0ZS5Jbml0O1xuXG5cdC8qKlxuXHQgKiBNYWludGFpbnMgYSByZWZlcmVuY2UgdG8gdGhlIHZpZXcgRE9NIGVsZW1lbnQgb2YgdGhlIGBDaGVja2JveGAuXG5cdCAqL1xuXHQvLyBAdHMtaWdub3JlXG5cdEBWaWV3Q2hpbGQoXCJpbnB1dENoZWNrYm94XCIsIHsgc3RhdGljOiBmYWxzZSB9KSBpbnB1dENoZWNrYm94OiBFbGVtZW50UmVmO1xuXG5cdC8qKlxuXHQgKiBDcmVhdGVzIGFuIGluc3RhbmNlIG9mIGBDaGVja2JveGAuXG5cdCAqL1xuXHRjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgY2hhbmdlRGV0ZWN0b3JSZWY6IENoYW5nZURldGVjdG9yUmVmKSB7XG5cdFx0Q2hlY2tib3guY2hlY2tib3hDb3VudCsrO1xuXHR9XG5cblx0LyoqXG5cdCAqIFRvZ2dsZSB0aGUgc2VsZWN0ZWQgc3RhdGUgb2YgdGhlIGNoZWNrYm94LlxuXHQgKi9cblx0cHVibGljIHRvZ2dsZSgpIHtcblx0XHQvLyBGbGlwIGNoZWNrZWQgYW5kIHJlc2V0IGluZGV0ZXJtaW5hdGVcblx0XHR0aGlzLnNldENoZWNrZWQoIXRoaXMuY2hlY2tlZCwgdHJ1ZSk7XG5cdH1cblxuXHQvKipcblx0ICogV3JpdGVzIGEgdmFsdWUgZnJvbSBgbmdNb2RlbGAgdG8gdGhlIGNvbXBvbmVudC5cblx0ICpcblx0ICogSW4gdGhpcyBjYXNlIHRoZSB2YWx1ZSBpcyB0aGUgYGNoZWNrZWRgIHByb3BlcnR5LlxuXHQgKlxuXHQgKiBAcGFyYW0gdmFsdWUgYm9vbGVhbiwgY29ycmVzcG9uZHMgdG8gdGhlIGBjaGVja2VkYCBwcm9wZXJ0eS5cblx0ICovXG5cdHB1YmxpYyB3cml0ZVZhbHVlKHZhbHVlOiBhbnkpIHtcblx0XHQvLyBTZXQgY2hlY2tlZCBhbmQgcmVzZXQgaW5kZXRlcm1pbmF0ZVxuXHRcdHRoaXMuc2V0Q2hlY2tlZCghIXZhbHVlLCB0cnVlKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBTZXRzIGEgbWV0aG9kIGluIG9yZGVyIHRvIHByb3BhZ2F0ZSBjaGFuZ2VzIGJhY2sgdG8gdGhlIGZvcm0uXG5cdCAqL1xuXHRwdWJsaWMgcmVnaXN0ZXJPbkNoYW5nZShmbjogYW55KSB7XG5cdFx0dGhpcy5wcm9wYWdhdGVDaGFuZ2UgPSBmbjtcblx0fVxuXG5cdC8qKlxuXHQgKiBSZWdpc3RlcnMgYSBjYWxsYmFjayB0byBiZSB0cmlnZ2VyZWQgd2hlbiB0aGUgY29udHJvbCBoYXMgYmVlbiB0b3VjaGVkLlxuXHQgKiBAcGFyYW0gZm4gQ2FsbGJhY2sgdG8gYmUgdHJpZ2dlcmVkIHdoZW4gdGhlIGNoZWNrYm94IGlzIHRvdWNoZWQuXG5cdCAqL1xuXHRwdWJsaWMgcmVnaXN0ZXJPblRvdWNoZWQoZm46IGFueSkge1xuXHRcdHRoaXMub25Ub3VjaGVkID0gZm47XG5cdH1cblxuXHQvKipcblx0ICogYENvbnRyb2xWYWx1ZUFjY2Vzc29yYCBtZXRob2QgdG8gcHJvZ3JhbW1hdGljYWxseSBkaXNhYmxlIHRoZSBjaGVja2JveC5cblx0ICpcblx0ICogZXg6IGB0aGlzLmZvcm1Hcm91cC5nZXQoXCJteUNoZWNrYm94XCIpLmRpc2FibGUoKTtgXG5cdCAqXG5cdCAqIEBwYXJhbSBpc0Rpc2FibGVkIGB0cnVlYCB0byBkaXNhYmxlIHRoZSBjaGVja2JveFxuXHQgKi9cblx0c2V0RGlzYWJsZWRTdGF0ZShpc0Rpc2FibGVkOiBib29sZWFuKSB7XG5cdFx0dGhpcy5kaXNhYmxlZCA9IGlzRGlzYWJsZWQ7XG5cdFx0dGhpcy5pbnB1dENoZWNrYm94Lm5hdGl2ZUVsZW1lbnQuZGlzYWJsZWQgPSB0aGlzLmRpc2FibGVkO1xuXHR9XG5cblx0QEhvc3RMaXN0ZW5lcihcImZvY3Vzb3V0XCIpXG5cdGZvY3VzT3V0KCkge1xuXHRcdHRoaXMub25Ub3VjaGVkKCk7XG5cdH1cblxuXHQvKipcblx0ICogRXhlY3V0ZXMgb24gdGhlIGV2ZW50IG9mIGEgY2hhbmdlIHdpdGhpbiBgQ2hlY2tib3hgIHRvIGJsb2NrIHByb3BhZ2F0aW9uLlxuXHQgKi9cblx0b25DaGFuZ2UoZXZlbnQ6IEV2ZW50KSB7XG5cdFx0ZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdH1cblxuXHQvKipcblx0ICogSGFuZGxlcyBjbGljayBldmVudHMgb24gdGhlIGBDaGVja2JveGAgYW5kIGVtaXRzIGNoYW5nZXMgdG8gb3RoZXIgY2xhc3Nlcy5cblx0ICovXG5cdG9uQ2xpY2soZXZlbnQ6IEV2ZW50KSB7XG5cdFx0aWYgKHRoaXMuY2xpY2sub2JzZXJ2ZXJzLmxlbmd0aCkge1xuXHRcdFx0Ly8gRGlzYWJsZSBkZWZhdWx0IGNoZWNrYm94IGFjdGl2YXRpb24gYmVoYXZpb3Igd2hpY2ggZmxpcHMgY2hlY2tlZCBhbmQgcmVzZXRzIGluZGV0ZXJtaW5hdGUuXG5cdFx0XHQvLyBUaGlzIGFsbG93cyB0aGUgcGFyZW50IGNvbXBvbmVudCB0byBjb250cm9sIHRoZSBjaGVja2VkL2luZGV0ZXJtaW5hdGUgcHJvcGVydGllcy5cblx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHR0aGlzLmNsaWNrLmVtaXQoKTtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0aWYgKCF0aGlzLmRpc2FibGVkKSB7XG5cdFx0XHR0aGlzLnRvZ2dsZSgpO1xuXHRcdFx0dGhpcy50cmFuc2l0aW9uQ2hlY2tib3hTdGF0ZSh0aGlzLl9jaGVja2VkID8gQ2hlY2tib3hTdGF0ZS5DaGVja2VkIDogQ2hlY2tib3hTdGF0ZS5VbmNoZWNrZWQpO1xuXHRcdFx0dGhpcy5lbWl0Q2hhbmdlRXZlbnQoKTtcblx0XHR9XG5cdH1cblxuXG5cdC8qKlxuXHQgKiBDYWxsZWQgd2hlbiBjaGVja2JveCBpcyBibHVycmVkLiBOZWVkZWQgdG8gcHJvcGVybHkgaW1wbGVtZW50IGBDb250cm9sVmFsdWVBY2Nlc3NvcmAuXG5cdCAqL1xuXHRvblRvdWNoZWQ6ICgpID0+IGFueSA9ICgpID0+IHt9O1xuXG5cdC8qKlxuXHQgKiBIYW5kbGVzIGNoYW5nZXMgYmV0d2VlbiBjaGVja2JveCBzdGF0ZXMuXG5cdCAqL1xuXHR0cmFuc2l0aW9uQ2hlY2tib3hTdGF0ZShuZXdTdGF0ZTogQ2hlY2tib3hTdGF0ZSkge1xuXHRcdHRoaXMuY3VycmVudENoZWNrYm94U3RhdGUgPSBuZXdTdGF0ZTtcblx0fVxuXG5cdC8qKlxuXHQgKiBDcmVhdGVzIGluc3RhbmNlIG9mIGBDaGVja2JveENoYW5nZWAgdXNlZCB0byBwcm9wYWdhdGUgdGhlIGNoYW5nZSBldmVudC5cblx0ICovXG5cdGVtaXRDaGFuZ2VFdmVudCgpIHtcblx0XHQvKiBiZWdpbiBkZXByZWNhdGlvbiAqL1xuXHRcdGxldCBldmVudCA9IG5ldyBDaGVja2JveENoYW5nZSgpO1xuXHRcdGV2ZW50LnNvdXJjZSA9IHRoaXM7XG5cdFx0ZXZlbnQuY2hlY2tlZCA9IHRoaXMuY2hlY2tlZDtcblx0XHR0aGlzLmNoYW5nZS5lbWl0KGV2ZW50KTtcblx0XHQvKiBlbmQgZGVwcmVjYXRpb24gKi9cblxuXHRcdHRoaXMuY2hlY2tlZENoYW5nZS5lbWl0KHRoaXMuY2hlY2tlZCk7XG5cdFx0dGhpcy5wcm9wYWdhdGVDaGFuZ2UodGhpcy5jaGVja2VkKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBVcGRhdGVzIHRoZSBjaGVja2JveCBpZiBpdCBpcyBpbiB0aGUgaW5kZXRlcm1pbmF0ZSBzdGF0ZS5cblx0ICovXG5cdG5nQWZ0ZXJWaWV3SW5pdCgpIHtcblx0XHRpZiAodGhpcy5pbmRldGVybWluYXRlKSB7XG5cdFx0XHR0aGlzLmlucHV0Q2hlY2tib3gubmF0aXZlRWxlbWVudC5pbmRldGVybWluYXRlID0gdHJ1ZTtcblx0XHR9XG5cdH1cblxuXHQvKipcblx0ICogTWV0aG9kIHNldCBpbiBgcmVnaXN0ZXJPbkNoYW5nZWAgdG8gcHJvcGFnYXRlIGNoYW5nZXMgYmFjayB0byB0aGUgZm9ybS5cblx0ICovXG5cdHByb3BhZ2F0ZUNoYW5nZSA9IChfOiBhbnkpID0+IHt9O1xuXG5cdC8qKlxuXHQgKiBTZXRzIGNoZWNrZWQgc3RhdGUgYW5kIG9wdGlvbmFsbHkgcmVzZXRzIGluZGV0ZXJtaW5hdGUgc3RhdGUuXG5cdCAqL1xuXHRwcml2YXRlIHNldENoZWNrZWQoY2hlY2tlZDogYm9vbGVhbiwgcmVzZXRJbmRldGVybWluYXRlOiBib29sZWFuKSB7XG5cdFx0aWYgKGNoZWNrZWQgPT09IHRoaXMuX2NoZWNrZWQpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0dGhpcy5fY2hlY2tlZCA9IGNoZWNrZWQ7XG5cdFx0Ly8gUmVzZXQgaW5kZXRlcm1pbmF0ZSBpZiByZXF1ZXN0ZWRcblx0XHRpZiAocmVzZXRJbmRldGVybWluYXRlICYmIHRoaXMuX2luZGV0ZXJtaW5hdGUpIHtcblx0XHRcdHRoaXMuX2luZGV0ZXJtaW5hdGUgPSBmYWxzZTtcblx0XHRcdFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKCkgPT4ge1xuXHRcdFx0XHR0aGlzLmluZGV0ZXJtaW5hdGVDaGFuZ2UuZW1pdCh0aGlzLl9pbmRldGVybWluYXRlKTtcblx0XHRcdH0pO1xuXHRcdH1cblx0XHR0aGlzLmNoYW5nZURldGVjdG9yUmVmLm1hcmtGb3JDaGVjaygpO1xuXHR9XG59XG4iXX0=