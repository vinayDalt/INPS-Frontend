import { __decorate, __metadata } from 'tslib';
import { Input, Component, ElementRef, Directive, NgModule } from '@angular/core';
import { getAttributes } from '@carbon/icon-helpers';

import * as ɵngcc0 from '@angular/core';
var TaskComponent = /** @class */ (function () {
    function TaskComponent() {
        this.focusable = false;
    }
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], TaskComponent.prototype, "ariaLabel", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], TaskComponent.prototype, "ariaLabelledby", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], TaskComponent.prototype, "ariaHidden", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], TaskComponent.prototype, "title", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], TaskComponent.prototype, "focusable", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], TaskComponent.prototype, "innerClass", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], TaskComponent.prototype, "size", void 0);
TaskComponent.ɵfac = function TaskComponent_Factory(t) { return new (t || TaskComponent)(); };
TaskComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: TaskComponent, selectors: [["ibm-icon-task"]], inputs: { focusable: "focusable", ariaLabel: "ariaLabel", ariaLabelledby: "ariaLabelledby", ariaHidden: "ariaHidden", title: "title", innerClass: "innerClass", size: "size" }, decls: 1, vars: 7, consts: [["ibmIconTask", "", 3, "size", "ariaLabel", "ariaLabelledby", "ariaHidden", "title", "isFocusable"]], template: function TaskComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵnamespaceSVG();
        ɵngcc0.ɵɵelement(0, "svg", 0);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("size", ctx.size)("ariaLabel", ctx.ariaLabel)("ariaLabelledby", ctx.ariaLabelledby)("ariaHidden", ctx.ariaHidden)("title", ctx.title)("isFocusable", ctx.focusable);
        ɵngcc0.ɵɵattribute("class", ctx.innerClass);
    } }, directives: function () { return [TaskDirective]; }, encapsulation: 2 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TaskComponent, [{
        type: Component,
        args: [{
                selector: "ibm-icon-task",
                template: "\n    <svg\n      ibmIconTask\n      [size]=\"size\"\n      [ariaLabel]=\"ariaLabel\"\n      [ariaLabelledby]=\"ariaLabelledby\"\n      [ariaHidden]=\"ariaHidden\"\n      [title]=\"title\"\n      [isFocusable]=\"focusable\"\n      [attr.class]=\"innerClass\">\n    </svg>\n  "
            }]
    }], function () { return []; }, { focusable: [{
            type: Input
        }], ariaLabel: [{
            type: Input
        }], ariaLabelledby: [{
            type: Input
        }], ariaHidden: [{
            type: Input
        }], title: [{
            type: Input
        }], innerClass: [{
            type: Input
        }], size: [{
            type: Input
        }] }); })();
    return TaskComponent;
}());
var TaskDirective = /** @class */ (function () {
    function TaskDirective(elementRef) {
        this.elementRef = elementRef;
        this.isFocusable = false;
        this.icons = {
            "32": {
                metadata: { "moduleName": "Task32", "filepath": "task/32.js", "descriptor": { "elem": "svg", "attrs": { "xmlns": "http://www.w3.org/2000/svg", "viewBox": "0 0 32 32", "fill": "currentColor", "width": 32, "height": 32 }, "content": [{ "elem": "path", "attrs": { "d": "M14 20.18L10.41 16.59 9 18 14 23 23 14 21.59 12.58 14 20.18z" } }, { "elem": "path", "attrs": { "d": "M25,5H22V4a2,2,0,0,0-2-2H12a2,2,0,0,0-2,2V5H7A2,2,0,0,0,5,7V28a2,2,0,0,0,2,2H25a2,2,0,0,0,2-2V7A2,2,0,0,0,25,5ZM12,4h8V8H12ZM25,28H7V7h3v3H22V7h3Z" } }], "name": "task", "size": 32 }, "size": 32 },
                svg: "<svg focusable=\"false\" preserveAspectRatio=\"xMidYMid meet\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"currentColor\" width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" aria-hidden=\"true\"><path d=\"M14 20.18L10.41 16.59 9 18 14 23 23 14 21.59 12.58 14 20.18z\"></path><path d=\"M25,5H22V4a2,2,0,0,0-2-2H12a2,2,0,0,0-2,2V5H7A2,2,0,0,0,5,7V28a2,2,0,0,0,2,2H25a2,2,0,0,0,2-2V7A2,2,0,0,0,25,5ZM12,4h8V8H12ZM25,28H7V7h3v3H22V7h3Z\"></path></svg>"
            },
            "24": {
                metadata: { "moduleName": "Task24", "filepath": "task/24.js", "descriptor": { "elem": "svg", "attrs": { "xmlns": "http://www.w3.org/2000/svg", "viewBox": "0 0 32 32", "fill": "currentColor", "width": 24, "height": 24 }, "content": [{ "elem": "path", "attrs": { "d": "M14 20.18L10.41 16.59 9 18 14 23 23 14 21.59 12.58 14 20.18z" } }, { "elem": "path", "attrs": { "d": "M25,5H22V4a2,2,0,0,0-2-2H12a2,2,0,0,0-2,2V5H7A2,2,0,0,0,5,7V28a2,2,0,0,0,2,2H25a2,2,0,0,0,2-2V7A2,2,0,0,0,25,5ZM12,4h8V8H12ZM25,28H7V7h3v3H22V7h3Z" } }], "name": "task", "size": 24 }, "size": 24 },
                svg: "<svg focusable=\"false\" preserveAspectRatio=\"xMidYMid meet\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"currentColor\" width=\"24\" height=\"24\" viewBox=\"0 0 32 32\" aria-hidden=\"true\"><path d=\"M14 20.18L10.41 16.59 9 18 14 23 23 14 21.59 12.58 14 20.18z\"></path><path d=\"M25,5H22V4a2,2,0,0,0-2-2H12a2,2,0,0,0-2,2V5H7A2,2,0,0,0,5,7V28a2,2,0,0,0,2,2H25a2,2,0,0,0,2-2V7A2,2,0,0,0,25,5ZM12,4h8V8H12ZM25,28H7V7h3v3H22V7h3Z\"></path></svg>"
            },
            "20": {
                metadata: { "moduleName": "Task20", "filepath": "task/20.js", "descriptor": { "elem": "svg", "attrs": { "xmlns": "http://www.w3.org/2000/svg", "viewBox": "0 0 32 32", "fill": "currentColor", "width": 20, "height": 20 }, "content": [{ "elem": "path", "attrs": { "d": "M14 20.18L10.41 16.59 9 18 14 23 23 14 21.59 12.58 14 20.18z" } }, { "elem": "path", "attrs": { "d": "M25,5H22V4a2,2,0,0,0-2-2H12a2,2,0,0,0-2,2V5H7A2,2,0,0,0,5,7V28a2,2,0,0,0,2,2H25a2,2,0,0,0,2-2V7A2,2,0,0,0,25,5ZM12,4h8V8H12ZM25,28H7V7h3v3H22V7h3Z" } }], "name": "task", "size": 20 }, "size": 20 },
                svg: "<svg focusable=\"false\" preserveAspectRatio=\"xMidYMid meet\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"currentColor\" width=\"20\" height=\"20\" viewBox=\"0 0 32 32\" aria-hidden=\"true\"><path d=\"M14 20.18L10.41 16.59 9 18 14 23 23 14 21.59 12.58 14 20.18z\"></path><path d=\"M25,5H22V4a2,2,0,0,0-2-2H12a2,2,0,0,0-2,2V5H7A2,2,0,0,0,5,7V28a2,2,0,0,0,2,2H25a2,2,0,0,0,2-2V7A2,2,0,0,0,25,5ZM12,4h8V8H12ZM25,28H7V7h3v3H22V7h3Z\"></path></svg>"
            },
            "16": {
                metadata: { "moduleName": "Task16", "filepath": "task/16.js", "descriptor": { "elem": "svg", "attrs": { "xmlns": "http://www.w3.org/2000/svg", "viewBox": "0 0 32 32", "fill": "currentColor", "width": 16, "height": 16 }, "content": [{ "elem": "path", "attrs": { "d": "M14 20.18L10.41 16.59 9 18 14 23 23 14 21.59 12.58 14 20.18z" } }, { "elem": "path", "attrs": { "d": "M25,5H22V4a2,2,0,0,0-2-2H12a2,2,0,0,0-2,2V5H7A2,2,0,0,0,5,7V28a2,2,0,0,0,2,2H25a2,2,0,0,0,2-2V7A2,2,0,0,0,25,5ZM12,4h8V8H12ZM25,28H7V7h3v3H22V7h3Z" } }], "name": "task", "size": 16 }, "size": 16 },
                svg: "<svg focusable=\"false\" preserveAspectRatio=\"xMidYMid meet\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"currentColor\" width=\"16\" height=\"16\" viewBox=\"0 0 32 32\" aria-hidden=\"true\"><path d=\"M14 20.18L10.41 16.59 9 18 14 23 23 14 21.59 12.58 14 20.18z\"></path><path d=\"M25,5H22V4a2,2,0,0,0-2-2H12a2,2,0,0,0-2,2V5H7A2,2,0,0,0,5,7V28a2,2,0,0,0,2,2H25a2,2,0,0,0,2-2V7A2,2,0,0,0,25,5ZM12,4h8V8H12ZM25,28H7V7h3v3H22V7h3Z\"></path></svg>"
            },
        };
    }
    TaskDirective_1 = TaskDirective;
    TaskDirective.prototype.ngAfterViewInit = function () {
        var svg = this.elementRef.nativeElement;
        svg.setAttribute("xmlns", "http://www.w3.org/2000/svg");
        var icon = this.icons[this.size];
        var domParser = new DOMParser();
        var rawSVG = icon.svg;
        var svgElement = domParser.parseFromString(rawSVG, "image/svg+xml").documentElement;
        var node = svgElement.firstChild;
        while (node) {
            // importNode makes a clone of the node
            // this ensures we keep looping over the nodes in the parsed document
            svg.appendChild(svg.ownerDocument.importNode(node, true));
            node = node.nextSibling;
        }
        var attributes = getAttributes({
            width: icon.metadata.descriptor.attrs.height,
            height: icon.metadata.descriptor.attrs.height,
            viewBox: icon.metadata.descriptor.attrs.viewBox,
            title: this.title,
            "aria-label": this.ariaLabel,
            "aria-labelledby": this.ariaLabelledby,
            "aria-hidden": this.ariaHidden,
            focusable: this.isFocusable.toString()
        });
        var attrKeys = Object.keys(attributes);
        for (var i = 0; i < attrKeys.length; i++) {
            var key = attrKeys[i];
            var value = attributes[key];
            if (key === "title") {
                continue;
            }
            if (value) {
                svg.setAttribute(key, value);
            }
        }
        if (attributes.title) {
            var title = document.createElement("title");
            title.textContent = attributes.title;
            TaskDirective_1.titleIdCounter++;
            title.setAttribute("id", "task-" + TaskDirective_1.titleIdCounter);
            svg.appendChild(title);
            svg.setAttribute("aria-labelledby", "task-" + TaskDirective_1.titleIdCounter);
        }
    };
    var TaskDirective_1;
    TaskDirective.titleIdCounter = 0;
    TaskDirective.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], TaskDirective.prototype, "ariaLabel", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], TaskDirective.prototype, "ariaLabelledby", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], TaskDirective.prototype, "ariaHidden", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], TaskDirective.prototype, "title", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], TaskDirective.prototype, "isFocusable", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], TaskDirective.prototype, "size", void 0);
    TaskDirective = TaskDirective_1 = __decorate([ __metadata("design:paramtypes", [ElementRef])
    ], TaskDirective);
TaskDirective.ɵfac = function TaskDirective_Factory(t) { return new (t || TaskDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
TaskDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: TaskDirective, selectors: [["", "ibmIconTask", ""]], inputs: { isFocusable: "isFocusable", ariaLabel: "ariaLabel", ariaLabelledby: "ariaLabelledby", ariaHidden: "ariaHidden", title: "title", size: "size" } });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TaskDirective, [{
        type: Directive,
        args: [{
                selector: "[ibmIconTask]"
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, { isFocusable: [{
            type: Input
        }], ariaLabel: [{
            type: Input
        }], ariaLabelledby: [{
            type: Input
        }], ariaHidden: [{
            type: Input
        }], title: [{
            type: Input
        }], size: [{
            type: Input
        }] }); })();
    return TaskDirective;
}());
var TaskModule = /** @class */ (function () {
    function TaskModule() {
    }
TaskModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: TaskModule });
TaskModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function TaskModule_Factory(t) { return new (t || TaskModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(TaskModule, { declarations: [TaskComponent, TaskDirective], exports: [TaskComponent, TaskDirective] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TaskModule, [{
        type: NgModule,
        args: [{
                declarations: [
                    TaskComponent,
                    TaskDirective,
                ],
                exports: [
                    TaskComponent,
                    TaskDirective,
                ]
            }]
    }], function () { return []; }, null); })();
    return TaskModule;
}());

export { TaskComponent, TaskDirective, TaskModule };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFzay5qcyIsInNvdXJjZXMiOlsidGFzay5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztvQkFNc0I7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0RBSU87QUFDUDs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7b0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7Z0RBWW1CO0FBQ25CO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgX19kZWNvcmF0ZSwgX19tZXRhZGF0YSB9IGZyb20gJ3RzbGliJztcbmltcG9ydCB7IElucHV0LCBDb21wb25lbnQsIEVsZW1lbnRSZWYsIERpcmVjdGl2ZSwgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IGdldEF0dHJpYnV0ZXMgfSBmcm9tICdAY2FyYm9uL2ljb24taGVscGVycyc7XG5cbnZhciBUYXNrQ29tcG9uZW50ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFRhc2tDb21wb25lbnQoKSB7XG4gICAgICAgIHRoaXMuZm9jdXNhYmxlID0gZmFsc2U7XG4gICAgfVxuICAgIF9fZGVjb3JhdGUoW1xuICAgICAgICBJbnB1dCgpLFxuICAgICAgICBfX21ldGFkYXRhKFwiZGVzaWduOnR5cGVcIiwgU3RyaW5nKVxuICAgIF0sIFRhc2tDb21wb25lbnQucHJvdG90eXBlLCBcImFyaWFMYWJlbFwiLCB2b2lkIDApO1xuICAgIF9fZGVjb3JhdGUoW1xuICAgICAgICBJbnB1dCgpLFxuICAgICAgICBfX21ldGFkYXRhKFwiZGVzaWduOnR5cGVcIiwgU3RyaW5nKVxuICAgIF0sIFRhc2tDb21wb25lbnQucHJvdG90eXBlLCBcImFyaWFMYWJlbGxlZGJ5XCIsIHZvaWQgMCk7XG4gICAgX19kZWNvcmF0ZShbXG4gICAgICAgIElucHV0KCksXG4gICAgICAgIF9fbWV0YWRhdGEoXCJkZXNpZ246dHlwZVwiLCBCb29sZWFuKVxuICAgIF0sIFRhc2tDb21wb25lbnQucHJvdG90eXBlLCBcImFyaWFIaWRkZW5cIiwgdm9pZCAwKTtcbiAgICBfX2RlY29yYXRlKFtcbiAgICAgICAgSW5wdXQoKSxcbiAgICAgICAgX19tZXRhZGF0YShcImRlc2lnbjp0eXBlXCIsIFN0cmluZylcbiAgICBdLCBUYXNrQ29tcG9uZW50LnByb3RvdHlwZSwgXCJ0aXRsZVwiLCB2b2lkIDApO1xuICAgIF9fZGVjb3JhdGUoW1xuICAgICAgICBJbnB1dCgpLFxuICAgICAgICBfX21ldGFkYXRhKFwiZGVzaWduOnR5cGVcIiwgQm9vbGVhbilcbiAgICBdLCBUYXNrQ29tcG9uZW50LnByb3RvdHlwZSwgXCJmb2N1c2FibGVcIiwgdm9pZCAwKTtcbiAgICBfX2RlY29yYXRlKFtcbiAgICAgICAgSW5wdXQoKSxcbiAgICAgICAgX19tZXRhZGF0YShcImRlc2lnbjp0eXBlXCIsIFN0cmluZylcbiAgICBdLCBUYXNrQ29tcG9uZW50LnByb3RvdHlwZSwgXCJpbm5lckNsYXNzXCIsIHZvaWQgMCk7XG4gICAgX19kZWNvcmF0ZShbXG4gICAgICAgIElucHV0KCksXG4gICAgICAgIF9fbWV0YWRhdGEoXCJkZXNpZ246dHlwZVwiLCBTdHJpbmcpXG4gICAgXSwgVGFza0NvbXBvbmVudC5wcm90b3R5cGUsIFwic2l6ZVwiLCB2b2lkIDApO1xuICAgIFRhc2tDb21wb25lbnQgPSBfX2RlY29yYXRlKFtcbiAgICAgICAgQ29tcG9uZW50KHtcbiAgICAgICAgICAgIHNlbGVjdG9yOiBcImlibS1pY29uLXRhc2tcIixcbiAgICAgICAgICAgIHRlbXBsYXRlOiBcIlxcbiAgICA8c3ZnXFxuICAgICAgaWJtSWNvblRhc2tcXG4gICAgICBbc2l6ZV09XFxcInNpemVcXFwiXFxuICAgICAgW2FyaWFMYWJlbF09XFxcImFyaWFMYWJlbFxcXCJcXG4gICAgICBbYXJpYUxhYmVsbGVkYnldPVxcXCJhcmlhTGFiZWxsZWRieVxcXCJcXG4gICAgICBbYXJpYUhpZGRlbl09XFxcImFyaWFIaWRkZW5cXFwiXFxuICAgICAgW3RpdGxlXT1cXFwidGl0bGVcXFwiXFxuICAgICAgW2lzRm9jdXNhYmxlXT1cXFwiZm9jdXNhYmxlXFxcIlxcbiAgICAgIFthdHRyLmNsYXNzXT1cXFwiaW5uZXJDbGFzc1xcXCI+XFxuICAgIDwvc3ZnPlxcbiAgXCJcbiAgICAgICAgfSlcbiAgICBdLCBUYXNrQ29tcG9uZW50KTtcbiAgICByZXR1cm4gVGFza0NvbXBvbmVudDtcbn0oKSk7XG52YXIgVGFza0RpcmVjdGl2ZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBUYXNrRGlyZWN0aXZlKGVsZW1lbnRSZWYpIHtcbiAgICAgICAgdGhpcy5lbGVtZW50UmVmID0gZWxlbWVudFJlZjtcbiAgICAgICAgdGhpcy5pc0ZvY3VzYWJsZSA9IGZhbHNlO1xuICAgICAgICB0aGlzLmljb25zID0ge1xuICAgICAgICAgICAgXCIzMlwiOiB7XG4gICAgICAgICAgICAgICAgbWV0YWRhdGE6IHsgXCJtb2R1bGVOYW1lXCI6IFwiVGFzazMyXCIsIFwiZmlsZXBhdGhcIjogXCJ0YXNrLzMyLmpzXCIsIFwiZGVzY3JpcHRvclwiOiB7IFwiZWxlbVwiOiBcInN2Z1wiLCBcImF0dHJzXCI6IHsgXCJ4bWxuc1wiOiBcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIsIFwidmlld0JveFwiOiBcIjAgMCAzMiAzMlwiLCBcImZpbGxcIjogXCJjdXJyZW50Q29sb3JcIiwgXCJ3aWR0aFwiOiAzMiwgXCJoZWlnaHRcIjogMzIgfSwgXCJjb250ZW50XCI6IFt7IFwiZWxlbVwiOiBcInBhdGhcIiwgXCJhdHRyc1wiOiB7IFwiZFwiOiBcIk0xNCAyMC4xOEwxMC40MSAxNi41OSA5IDE4IDE0IDIzIDIzIDE0IDIxLjU5IDEyLjU4IDE0IDIwLjE4elwiIH0gfSwgeyBcImVsZW1cIjogXCJwYXRoXCIsIFwiYXR0cnNcIjogeyBcImRcIjogXCJNMjUsNUgyMlY0YTIsMiwwLDAsMC0yLTJIMTJhMiwyLDAsMCwwLTIsMlY1SDdBMiwyLDAsMCwwLDUsN1YyOGEyLDIsMCwwLDAsMiwySDI1YTIsMiwwLDAsMCwyLTJWN0EyLDIsMCwwLDAsMjUsNVpNMTIsNGg4VjhIMTJaTTI1LDI4SDdWN2gzdjNIMjJWN2gzWlwiIH0gfV0sIFwibmFtZVwiOiBcInRhc2tcIiwgXCJzaXplXCI6IDMyIH0sIFwic2l6ZVwiOiAzMiB9LFxuICAgICAgICAgICAgICAgIHN2ZzogXCI8c3ZnIGZvY3VzYWJsZT1cXFwiZmFsc2VcXFwiIHByZXNlcnZlQXNwZWN0UmF0aW89XFxcInhNaWRZTWlkIG1lZXRcXFwiIHhtbG5zPVxcXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1xcXCIgZmlsbD1cXFwiY3VycmVudENvbG9yXFxcIiB3aWR0aD1cXFwiMzJcXFwiIGhlaWdodD1cXFwiMzJcXFwiIHZpZXdCb3g9XFxcIjAgMCAzMiAzMlxcXCIgYXJpYS1oaWRkZW49XFxcInRydWVcXFwiPjxwYXRoIGQ9XFxcIk0xNCAyMC4xOEwxMC40MSAxNi41OSA5IDE4IDE0IDIzIDIzIDE0IDIxLjU5IDEyLjU4IDE0IDIwLjE4elxcXCI+PC9wYXRoPjxwYXRoIGQ9XFxcIk0yNSw1SDIyVjRhMiwyLDAsMCwwLTItMkgxMmEyLDIsMCwwLDAtMiwyVjVIN0EyLDIsMCwwLDAsNSw3VjI4YTIsMiwwLDAsMCwyLDJIMjVhMiwyLDAsMCwwLDItMlY3QTIsMiwwLDAsMCwyNSw1Wk0xMiw0aDhWOEgxMlpNMjUsMjhIN1Y3aDN2M0gyMlY3aDNaXFxcIj48L3BhdGg+PC9zdmc+XCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcIjI0XCI6IHtcbiAgICAgICAgICAgICAgICBtZXRhZGF0YTogeyBcIm1vZHVsZU5hbWVcIjogXCJUYXNrMjRcIiwgXCJmaWxlcGF0aFwiOiBcInRhc2svMjQuanNcIiwgXCJkZXNjcmlwdG9yXCI6IHsgXCJlbGVtXCI6IFwic3ZnXCIsIFwiYXR0cnNcIjogeyBcInhtbG5zXCI6IFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiwgXCJ2aWV3Qm94XCI6IFwiMCAwIDMyIDMyXCIsIFwiZmlsbFwiOiBcImN1cnJlbnRDb2xvclwiLCBcIndpZHRoXCI6IDI0LCBcImhlaWdodFwiOiAyNCB9LCBcImNvbnRlbnRcIjogW3sgXCJlbGVtXCI6IFwicGF0aFwiLCBcImF0dHJzXCI6IHsgXCJkXCI6IFwiTTE0IDIwLjE4TDEwLjQxIDE2LjU5IDkgMTggMTQgMjMgMjMgMTQgMjEuNTkgMTIuNTggMTQgMjAuMTh6XCIgfSB9LCB7IFwiZWxlbVwiOiBcInBhdGhcIiwgXCJhdHRyc1wiOiB7IFwiZFwiOiBcIk0yNSw1SDIyVjRhMiwyLDAsMCwwLTItMkgxMmEyLDIsMCwwLDAtMiwyVjVIN0EyLDIsMCwwLDAsNSw3VjI4YTIsMiwwLDAsMCwyLDJIMjVhMiwyLDAsMCwwLDItMlY3QTIsMiwwLDAsMCwyNSw1Wk0xMiw0aDhWOEgxMlpNMjUsMjhIN1Y3aDN2M0gyMlY3aDNaXCIgfSB9XSwgXCJuYW1lXCI6IFwidGFza1wiLCBcInNpemVcIjogMjQgfSwgXCJzaXplXCI6IDI0IH0sXG4gICAgICAgICAgICAgICAgc3ZnOiBcIjxzdmcgZm9jdXNhYmxlPVxcXCJmYWxzZVxcXCIgcHJlc2VydmVBc3BlY3RSYXRpbz1cXFwieE1pZFlNaWQgbWVldFxcXCIgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIiBmaWxsPVxcXCJjdXJyZW50Q29sb3JcXFwiIHdpZHRoPVxcXCIyNFxcXCIgaGVpZ2h0PVxcXCIyNFxcXCIgdmlld0JveD1cXFwiMCAwIDMyIDMyXFxcIiBhcmlhLWhpZGRlbj1cXFwidHJ1ZVxcXCI+PHBhdGggZD1cXFwiTTE0IDIwLjE4TDEwLjQxIDE2LjU5IDkgMTggMTQgMjMgMjMgMTQgMjEuNTkgMTIuNTggMTQgMjAuMTh6XFxcIj48L3BhdGg+PHBhdGggZD1cXFwiTTI1LDVIMjJWNGEyLDIsMCwwLDAtMi0ySDEyYTIsMiwwLDAsMC0yLDJWNUg3QTIsMiwwLDAsMCw1LDdWMjhhMiwyLDAsMCwwLDIsMkgyNWEyLDIsMCwwLDAsMi0yVjdBMiwyLDAsMCwwLDI1LDVaTTEyLDRoOFY4SDEyWk0yNSwyOEg3VjdoM3YzSDIyVjdoM1pcXFwiPjwvcGF0aD48L3N2Zz5cIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFwiMjBcIjoge1xuICAgICAgICAgICAgICAgIG1ldGFkYXRhOiB7IFwibW9kdWxlTmFtZVwiOiBcIlRhc2syMFwiLCBcImZpbGVwYXRoXCI6IFwidGFzay8yMC5qc1wiLCBcImRlc2NyaXB0b3JcIjogeyBcImVsZW1cIjogXCJzdmdcIiwgXCJhdHRyc1wiOiB7IFwieG1sbnNcIjogXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiLCBcInZpZXdCb3hcIjogXCIwIDAgMzIgMzJcIiwgXCJmaWxsXCI6IFwiY3VycmVudENvbG9yXCIsIFwid2lkdGhcIjogMjAsIFwiaGVpZ2h0XCI6IDIwIH0sIFwiY29udGVudFwiOiBbeyBcImVsZW1cIjogXCJwYXRoXCIsIFwiYXR0cnNcIjogeyBcImRcIjogXCJNMTQgMjAuMThMMTAuNDEgMTYuNTkgOSAxOCAxNCAyMyAyMyAxNCAyMS41OSAxMi41OCAxNCAyMC4xOHpcIiB9IH0sIHsgXCJlbGVtXCI6IFwicGF0aFwiLCBcImF0dHJzXCI6IHsgXCJkXCI6IFwiTTI1LDVIMjJWNGEyLDIsMCwwLDAtMi0ySDEyYTIsMiwwLDAsMC0yLDJWNUg3QTIsMiwwLDAsMCw1LDdWMjhhMiwyLDAsMCwwLDIsMkgyNWEyLDIsMCwwLDAsMi0yVjdBMiwyLDAsMCwwLDI1LDVaTTEyLDRoOFY4SDEyWk0yNSwyOEg3VjdoM3YzSDIyVjdoM1pcIiB9IH1dLCBcIm5hbWVcIjogXCJ0YXNrXCIsIFwic2l6ZVwiOiAyMCB9LCBcInNpemVcIjogMjAgfSxcbiAgICAgICAgICAgICAgICBzdmc6IFwiPHN2ZyBmb2N1c2FibGU9XFxcImZhbHNlXFxcIiBwcmVzZXJ2ZUFzcGVjdFJhdGlvPVxcXCJ4TWlkWU1pZCBtZWV0XFxcIiB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiIGZpbGw9XFxcImN1cnJlbnRDb2xvclxcXCIgd2lkdGg9XFxcIjIwXFxcIiBoZWlnaHQ9XFxcIjIwXFxcIiB2aWV3Qm94PVxcXCIwIDAgMzIgMzJcXFwiIGFyaWEtaGlkZGVuPVxcXCJ0cnVlXFxcIj48cGF0aCBkPVxcXCJNMTQgMjAuMThMMTAuNDEgMTYuNTkgOSAxOCAxNCAyMyAyMyAxNCAyMS41OSAxMi41OCAxNCAyMC4xOHpcXFwiPjwvcGF0aD48cGF0aCBkPVxcXCJNMjUsNUgyMlY0YTIsMiwwLDAsMC0yLTJIMTJhMiwyLDAsMCwwLTIsMlY1SDdBMiwyLDAsMCwwLDUsN1YyOGEyLDIsMCwwLDAsMiwySDI1YTIsMiwwLDAsMCwyLTJWN0EyLDIsMCwwLDAsMjUsNVpNMTIsNGg4VjhIMTJaTTI1LDI4SDdWN2gzdjNIMjJWN2gzWlxcXCI+PC9wYXRoPjwvc3ZnPlwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCIxNlwiOiB7XG4gICAgICAgICAgICAgICAgbWV0YWRhdGE6IHsgXCJtb2R1bGVOYW1lXCI6IFwiVGFzazE2XCIsIFwiZmlsZXBhdGhcIjogXCJ0YXNrLzE2LmpzXCIsIFwiZGVzY3JpcHRvclwiOiB7IFwiZWxlbVwiOiBcInN2Z1wiLCBcImF0dHJzXCI6IHsgXCJ4bWxuc1wiOiBcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIsIFwidmlld0JveFwiOiBcIjAgMCAzMiAzMlwiLCBcImZpbGxcIjogXCJjdXJyZW50Q29sb3JcIiwgXCJ3aWR0aFwiOiAxNiwgXCJoZWlnaHRcIjogMTYgfSwgXCJjb250ZW50XCI6IFt7IFwiZWxlbVwiOiBcInBhdGhcIiwgXCJhdHRyc1wiOiB7IFwiZFwiOiBcIk0xNCAyMC4xOEwxMC40MSAxNi41OSA5IDE4IDE0IDIzIDIzIDE0IDIxLjU5IDEyLjU4IDE0IDIwLjE4elwiIH0gfSwgeyBcImVsZW1cIjogXCJwYXRoXCIsIFwiYXR0cnNcIjogeyBcImRcIjogXCJNMjUsNUgyMlY0YTIsMiwwLDAsMC0yLTJIMTJhMiwyLDAsMCwwLTIsMlY1SDdBMiwyLDAsMCwwLDUsN1YyOGEyLDIsMCwwLDAsMiwySDI1YTIsMiwwLDAsMCwyLTJWN0EyLDIsMCwwLDAsMjUsNVpNMTIsNGg4VjhIMTJaTTI1LDI4SDdWN2gzdjNIMjJWN2gzWlwiIH0gfV0sIFwibmFtZVwiOiBcInRhc2tcIiwgXCJzaXplXCI6IDE2IH0sIFwic2l6ZVwiOiAxNiB9LFxuICAgICAgICAgICAgICAgIHN2ZzogXCI8c3ZnIGZvY3VzYWJsZT1cXFwiZmFsc2VcXFwiIHByZXNlcnZlQXNwZWN0UmF0aW89XFxcInhNaWRZTWlkIG1lZXRcXFwiIHhtbG5zPVxcXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1xcXCIgZmlsbD1cXFwiY3VycmVudENvbG9yXFxcIiB3aWR0aD1cXFwiMTZcXFwiIGhlaWdodD1cXFwiMTZcXFwiIHZpZXdCb3g9XFxcIjAgMCAzMiAzMlxcXCIgYXJpYS1oaWRkZW49XFxcInRydWVcXFwiPjxwYXRoIGQ9XFxcIk0xNCAyMC4xOEwxMC40MSAxNi41OSA5IDE4IDE0IDIzIDIzIDE0IDIxLjU5IDEyLjU4IDE0IDIwLjE4elxcXCI+PC9wYXRoPjxwYXRoIGQ9XFxcIk0yNSw1SDIyVjRhMiwyLDAsMCwwLTItMkgxMmEyLDIsMCwwLDAtMiwyVjVIN0EyLDIsMCwwLDAsNSw3VjI4YTIsMiwwLDAsMCwyLDJIMjVhMiwyLDAsMCwwLDItMlY3QTIsMiwwLDAsMCwyNSw1Wk0xMiw0aDhWOEgxMlpNMjUsMjhIN1Y3aDN2M0gyMlY3aDNaXFxcIj48L3BhdGg+PC9zdmc+XCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH07XG4gICAgfVxuICAgIFRhc2tEaXJlY3RpdmVfMSA9IFRhc2tEaXJlY3RpdmU7XG4gICAgVGFza0RpcmVjdGl2ZS5wcm90b3R5cGUubmdBZnRlclZpZXdJbml0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgc3ZnID0gdGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQ7XG4gICAgICAgIHN2Zy5zZXRBdHRyaWJ1dGUoXCJ4bWxuc1wiLCBcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIpO1xuICAgICAgICB2YXIgaWNvbiA9IHRoaXMuaWNvbnNbdGhpcy5zaXplXTtcbiAgICAgICAgdmFyIGRvbVBhcnNlciA9IG5ldyBET01QYXJzZXIoKTtcbiAgICAgICAgdmFyIHJhd1NWRyA9IGljb24uc3ZnO1xuICAgICAgICB2YXIgc3ZnRWxlbWVudCA9IGRvbVBhcnNlci5wYXJzZUZyb21TdHJpbmcocmF3U1ZHLCBcImltYWdlL3N2Zyt4bWxcIikuZG9jdW1lbnRFbGVtZW50O1xuICAgICAgICB2YXIgbm9kZSA9IHN2Z0VsZW1lbnQuZmlyc3RDaGlsZDtcbiAgICAgICAgd2hpbGUgKG5vZGUpIHtcbiAgICAgICAgICAgIC8vIGltcG9ydE5vZGUgbWFrZXMgYSBjbG9uZSBvZiB0aGUgbm9kZVxuICAgICAgICAgICAgLy8gdGhpcyBlbnN1cmVzIHdlIGtlZXAgbG9vcGluZyBvdmVyIHRoZSBub2RlcyBpbiB0aGUgcGFyc2VkIGRvY3VtZW50XG4gICAgICAgICAgICBzdmcuYXBwZW5kQ2hpbGQoc3ZnLm93bmVyRG9jdW1lbnQuaW1wb3J0Tm9kZShub2RlLCB0cnVlKSk7XG4gICAgICAgICAgICBub2RlID0gbm9kZS5uZXh0U2libGluZztcbiAgICAgICAgfVxuICAgICAgICB2YXIgYXR0cmlidXRlcyA9IGdldEF0dHJpYnV0ZXMoe1xuICAgICAgICAgICAgd2lkdGg6IGljb24ubWV0YWRhdGEuZGVzY3JpcHRvci5hdHRycy5oZWlnaHQsXG4gICAgICAgICAgICBoZWlnaHQ6IGljb24ubWV0YWRhdGEuZGVzY3JpcHRvci5hdHRycy5oZWlnaHQsXG4gICAgICAgICAgICB2aWV3Qm94OiBpY29uLm1ldGFkYXRhLmRlc2NyaXB0b3IuYXR0cnMudmlld0JveCxcbiAgICAgICAgICAgIHRpdGxlOiB0aGlzLnRpdGxlLFxuICAgICAgICAgICAgXCJhcmlhLWxhYmVsXCI6IHRoaXMuYXJpYUxhYmVsLFxuICAgICAgICAgICAgXCJhcmlhLWxhYmVsbGVkYnlcIjogdGhpcy5hcmlhTGFiZWxsZWRieSxcbiAgICAgICAgICAgIFwiYXJpYS1oaWRkZW5cIjogdGhpcy5hcmlhSGlkZGVuLFxuICAgICAgICAgICAgZm9jdXNhYmxlOiB0aGlzLmlzRm9jdXNhYmxlLnRvU3RyaW5nKClcbiAgICAgICAgfSk7XG4gICAgICAgIHZhciBhdHRyS2V5cyA9IE9iamVjdC5rZXlzKGF0dHJpYnV0ZXMpO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGF0dHJLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIga2V5ID0gYXR0cktleXNbaV07XG4gICAgICAgICAgICB2YXIgdmFsdWUgPSBhdHRyaWJ1dGVzW2tleV07XG4gICAgICAgICAgICBpZiAoa2V5ID09PSBcInRpdGxlXCIpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgIHN2Zy5zZXRBdHRyaWJ1dGUoa2V5LCB2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGF0dHJpYnV0ZXMudGl0bGUpIHtcbiAgICAgICAgICAgIHZhciB0aXRsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ0aXRsZVwiKTtcbiAgICAgICAgICAgIHRpdGxlLnRleHRDb250ZW50ID0gYXR0cmlidXRlcy50aXRsZTtcbiAgICAgICAgICAgIFRhc2tEaXJlY3RpdmVfMS50aXRsZUlkQ291bnRlcisrO1xuICAgICAgICAgICAgdGl0bGUuc2V0QXR0cmlidXRlKFwiaWRcIiwgXCJ0YXNrLVwiICsgVGFza0RpcmVjdGl2ZV8xLnRpdGxlSWRDb3VudGVyKTtcbiAgICAgICAgICAgIHN2Zy5hcHBlbmRDaGlsZCh0aXRsZSk7XG4gICAgICAgICAgICBzdmcuc2V0QXR0cmlidXRlKFwiYXJpYS1sYWJlbGxlZGJ5XCIsIFwidGFzay1cIiArIFRhc2tEaXJlY3RpdmVfMS50aXRsZUlkQ291bnRlcik7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHZhciBUYXNrRGlyZWN0aXZlXzE7XG4gICAgVGFza0RpcmVjdGl2ZS50aXRsZUlkQ291bnRlciA9IDA7XG4gICAgVGFza0RpcmVjdGl2ZS5jdG9yUGFyYW1ldGVycyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIFtcbiAgICAgICAgeyB0eXBlOiBFbGVtZW50UmVmIH1cbiAgICBdOyB9O1xuICAgIF9fZGVjb3JhdGUoW1xuICAgICAgICBJbnB1dCgpLFxuICAgICAgICBfX21ldGFkYXRhKFwiZGVzaWduOnR5cGVcIiwgU3RyaW5nKVxuICAgIF0sIFRhc2tEaXJlY3RpdmUucHJvdG90eXBlLCBcImFyaWFMYWJlbFwiLCB2b2lkIDApO1xuICAgIF9fZGVjb3JhdGUoW1xuICAgICAgICBJbnB1dCgpLFxuICAgICAgICBfX21ldGFkYXRhKFwiZGVzaWduOnR5cGVcIiwgU3RyaW5nKVxuICAgIF0sIFRhc2tEaXJlY3RpdmUucHJvdG90eXBlLCBcImFyaWFMYWJlbGxlZGJ5XCIsIHZvaWQgMCk7XG4gICAgX19kZWNvcmF0ZShbXG4gICAgICAgIElucHV0KCksXG4gICAgICAgIF9fbWV0YWRhdGEoXCJkZXNpZ246dHlwZVwiLCBCb29sZWFuKVxuICAgIF0sIFRhc2tEaXJlY3RpdmUucHJvdG90eXBlLCBcImFyaWFIaWRkZW5cIiwgdm9pZCAwKTtcbiAgICBfX2RlY29yYXRlKFtcbiAgICAgICAgSW5wdXQoKSxcbiAgICAgICAgX19tZXRhZGF0YShcImRlc2lnbjp0eXBlXCIsIFN0cmluZylcbiAgICBdLCBUYXNrRGlyZWN0aXZlLnByb3RvdHlwZSwgXCJ0aXRsZVwiLCB2b2lkIDApO1xuICAgIF9fZGVjb3JhdGUoW1xuICAgICAgICBJbnB1dCgpLFxuICAgICAgICBfX21ldGFkYXRhKFwiZGVzaWduOnR5cGVcIiwgQm9vbGVhbilcbiAgICBdLCBUYXNrRGlyZWN0aXZlLnByb3RvdHlwZSwgXCJpc0ZvY3VzYWJsZVwiLCB2b2lkIDApO1xuICAgIF9fZGVjb3JhdGUoW1xuICAgICAgICBJbnB1dCgpLFxuICAgICAgICBfX21ldGFkYXRhKFwiZGVzaWduOnR5cGVcIiwgU3RyaW5nKVxuICAgIF0sIFRhc2tEaXJlY3RpdmUucHJvdG90eXBlLCBcInNpemVcIiwgdm9pZCAwKTtcbiAgICBUYXNrRGlyZWN0aXZlID0gVGFza0RpcmVjdGl2ZV8xID0gX19kZWNvcmF0ZShbXG4gICAgICAgIERpcmVjdGl2ZSh7XG4gICAgICAgICAgICBzZWxlY3RvcjogXCJbaWJtSWNvblRhc2tdXCJcbiAgICAgICAgfSksXG4gICAgICAgIF9fbWV0YWRhdGEoXCJkZXNpZ246cGFyYW10eXBlc1wiLCBbRWxlbWVudFJlZl0pXG4gICAgXSwgVGFza0RpcmVjdGl2ZSk7XG4gICAgcmV0dXJuIFRhc2tEaXJlY3RpdmU7XG59KCkpO1xudmFyIFRhc2tNb2R1bGUgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gVGFza01vZHVsZSgpIHtcbiAgICB9XG4gICAgVGFza01vZHVsZSA9IF9fZGVjb3JhdGUoW1xuICAgICAgICBOZ01vZHVsZSh7XG4gICAgICAgICAgICBkZWNsYXJhdGlvbnM6IFtcbiAgICAgICAgICAgICAgICBUYXNrQ29tcG9uZW50LFxuICAgICAgICAgICAgICAgIFRhc2tEaXJlY3RpdmUsXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgZXhwb3J0czogW1xuICAgICAgICAgICAgICAgIFRhc2tDb21wb25lbnQsXG4gICAgICAgICAgICAgICAgVGFza0RpcmVjdGl2ZSxcbiAgICAgICAgICAgIF1cbiAgICAgICAgfSlcbiAgICBdLCBUYXNrTW9kdWxlKTtcbiAgICByZXR1cm4gVGFza01vZHVsZTtcbn0oKSk7XG5cbmV4cG9ydCB7IFRhc2tDb21wb25lbnQsIFRhc2tEaXJlY3RpdmUsIFRhc2tNb2R1bGUgfTtcbiJdfQ==