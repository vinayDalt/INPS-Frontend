import { __decorate, __metadata } from 'tslib';
import { Input, Component, ElementRef, Directive, NgModule } from '@angular/core';
import { getAttributes } from '@carbon/icon-helpers';

import * as ɵngcc0 from '@angular/core';
var ZipReferenceComponent = /** @class */ (function () {
    function ZipReferenceComponent() {
        this.focusable = false;
    }
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], ZipReferenceComponent.prototype, "ariaLabel", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], ZipReferenceComponent.prototype, "ariaLabelledby", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], ZipReferenceComponent.prototype, "ariaHidden", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], ZipReferenceComponent.prototype, "title", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], ZipReferenceComponent.prototype, "focusable", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], ZipReferenceComponent.prototype, "innerClass", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], ZipReferenceComponent.prototype, "size", void 0);
ZipReferenceComponent.ɵfac = function ZipReferenceComponent_Factory(t) { return new (t || ZipReferenceComponent)(); };
ZipReferenceComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ZipReferenceComponent, selectors: [["ibm-icon-zip-reference"]], inputs: { focusable: "focusable", ariaLabel: "ariaLabel", ariaLabelledby: "ariaLabelledby", ariaHidden: "ariaHidden", title: "title", innerClass: "innerClass", size: "size" }, decls: 1, vars: 7, consts: [["ibmIconZipReference", "", 3, "size", "ariaLabel", "ariaLabelledby", "ariaHidden", "title", "isFocusable"]], template: function ZipReferenceComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵnamespaceSVG();
        ɵngcc0.ɵɵelement(0, "svg", 0);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("size", ctx.size)("ariaLabel", ctx.ariaLabel)("ariaLabelledby", ctx.ariaLabelledby)("ariaHidden", ctx.ariaHidden)("title", ctx.title)("isFocusable", ctx.focusable);
        ɵngcc0.ɵɵattribute("class", ctx.innerClass);
    } }, directives: function () { return [ZipReferenceDirective]; }, encapsulation: 2 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ZipReferenceComponent, [{
        type: Component,
        args: [{
                selector: "ibm-icon-zip-reference",
                template: "\n    <svg\n      ibmIconZipReference\n      [size]=\"size\"\n      [ariaLabel]=\"ariaLabel\"\n      [ariaLabelledby]=\"ariaLabelledby\"\n      [ariaHidden]=\"ariaHidden\"\n      [title]=\"title\"\n      [isFocusable]=\"focusable\"\n      [attr.class]=\"innerClass\">\n    </svg>\n  "
            }]
    }], function () { return []; }, { focusable: [{
            type: Input
        }], ariaLabel: [{
            type: Input
        }], ariaLabelledby: [{
            type: Input
        }], ariaHidden: [{
            type: Input
        }], title: [{
            type: Input
        }], innerClass: [{
            type: Input
        }], size: [{
            type: Input
        }] }); })();
    return ZipReferenceComponent;
}());
var ZipReferenceDirective = /** @class */ (function () {
    function ZipReferenceDirective(elementRef) {
        this.elementRef = elementRef;
        this.isFocusable = false;
        this.icons = {
            "32": {
                metadata: { "moduleName": "ZipReference32", "filepath": "ZIP--reference/32.js", "descriptor": { "elem": "svg", "attrs": { "xmlns": "http://www.w3.org/2000/svg", "viewBox": "0 0 32 32", "fill": "currentColor", "width": 32, "height": 32 }, "content": [{ "elem": "path", "attrs": { "d": "M4 20L4 22 8.586 22 2 28.586 3.414 30 10 23.414 10 28 12 28 12 20 4 20zM28 2H22V16h2V11h4a2 2 0 002-2V4A2 2 0 0028 2zm0 7H24V4h4zM12 4L15 4 15 14 12 14 12 16 20 16 20 14 17 14 17 4 20 4 20 2 12 2 12 4zM2 4L8 4 2 14 2 16 10 16 10 14 4 14 10 4 10 2 2 2 2 4z" } }], "name": "ZIP--reference", "size": 32 }, "size": 32 },
                svg: "<svg focusable=\"false\" preserveAspectRatio=\"xMidYMid meet\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"currentColor\" width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" aria-hidden=\"true\"><path d=\"M4 20L4 22 8.586 22 2 28.586 3.414 30 10 23.414 10 28 12 28 12 20 4 20zM28 2H22V16h2V11h4a2 2 0 002-2V4A2 2 0 0028 2zm0 7H24V4h4zM12 4L15 4 15 14 12 14 12 16 20 16 20 14 17 14 17 4 20 4 20 2 12 2 12 4zM2 4L8 4 2 14 2 16 10 16 10 14 4 14 10 4 10 2 2 2 2 4z\"></path></svg>"
            },
            "24": {
                metadata: { "moduleName": "ZipReference24", "filepath": "ZIP--reference/24.js", "descriptor": { "elem": "svg", "attrs": { "xmlns": "http://www.w3.org/2000/svg", "viewBox": "0 0 32 32", "fill": "currentColor", "width": 24, "height": 24 }, "content": [{ "elem": "path", "attrs": { "d": "M4 20L4 22 8.586 22 2 28.586 3.414 30 10 23.414 10 28 12 28 12 20 4 20zM28 2H22V16h2V11h4a2 2 0 002-2V4A2 2 0 0028 2zm0 7H24V4h4zM12 4L15 4 15 14 12 14 12 16 20 16 20 14 17 14 17 4 20 4 20 2 12 2 12 4zM2 4L8 4 2 14 2 16 10 16 10 14 4 14 10 4 10 2 2 2 2 4z" } }], "name": "ZIP--reference", "size": 24 }, "size": 24 },
                svg: "<svg focusable=\"false\" preserveAspectRatio=\"xMidYMid meet\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"currentColor\" width=\"24\" height=\"24\" viewBox=\"0 0 32 32\" aria-hidden=\"true\"><path d=\"M4 20L4 22 8.586 22 2 28.586 3.414 30 10 23.414 10 28 12 28 12 20 4 20zM28 2H22V16h2V11h4a2 2 0 002-2V4A2 2 0 0028 2zm0 7H24V4h4zM12 4L15 4 15 14 12 14 12 16 20 16 20 14 17 14 17 4 20 4 20 2 12 2 12 4zM2 4L8 4 2 14 2 16 10 16 10 14 4 14 10 4 10 2 2 2 2 4z\"></path></svg>"
            },
            "20": {
                metadata: { "moduleName": "ZipReference20", "filepath": "ZIP--reference/20.js", "descriptor": { "elem": "svg", "attrs": { "xmlns": "http://www.w3.org/2000/svg", "viewBox": "0 0 32 32", "fill": "currentColor", "width": 20, "height": 20 }, "content": [{ "elem": "path", "attrs": { "d": "M4 20L4 22 8.586 22 2 28.586 3.414 30 10 23.414 10 28 12 28 12 20 4 20zM28 2H22V16h2V11h4a2 2 0 002-2V4A2 2 0 0028 2zm0 7H24V4h4zM12 4L15 4 15 14 12 14 12 16 20 16 20 14 17 14 17 4 20 4 20 2 12 2 12 4zM2 4L8 4 2 14 2 16 10 16 10 14 4 14 10 4 10 2 2 2 2 4z" } }], "name": "ZIP--reference", "size": 20 }, "size": 20 },
                svg: "<svg focusable=\"false\" preserveAspectRatio=\"xMidYMid meet\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"currentColor\" width=\"20\" height=\"20\" viewBox=\"0 0 32 32\" aria-hidden=\"true\"><path d=\"M4 20L4 22 8.586 22 2 28.586 3.414 30 10 23.414 10 28 12 28 12 20 4 20zM28 2H22V16h2V11h4a2 2 0 002-2V4A2 2 0 0028 2zm0 7H24V4h4zM12 4L15 4 15 14 12 14 12 16 20 16 20 14 17 14 17 4 20 4 20 2 12 2 12 4zM2 4L8 4 2 14 2 16 10 16 10 14 4 14 10 4 10 2 2 2 2 4z\"></path></svg>"
            },
            "16": {
                metadata: { "moduleName": "ZipReference16", "filepath": "ZIP--reference/16.js", "descriptor": { "elem": "svg", "attrs": { "xmlns": "http://www.w3.org/2000/svg", "viewBox": "0 0 32 32", "fill": "currentColor", "width": 16, "height": 16 }, "content": [{ "elem": "path", "attrs": { "d": "M4 20L4 22 8.586 22 2 28.586 3.414 30 10 23.414 10 28 12 28 12 20 4 20zM28 2H22V16h2V11h4a2 2 0 002-2V4A2 2 0 0028 2zm0 7H24V4h4zM12 4L15 4 15 14 12 14 12 16 20 16 20 14 17 14 17 4 20 4 20 2 12 2 12 4zM2 4L8 4 2 14 2 16 10 16 10 14 4 14 10 4 10 2 2 2 2 4z" } }], "name": "ZIP--reference", "size": 16 }, "size": 16 },
                svg: "<svg focusable=\"false\" preserveAspectRatio=\"xMidYMid meet\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"currentColor\" width=\"16\" height=\"16\" viewBox=\"0 0 32 32\" aria-hidden=\"true\"><path d=\"M4 20L4 22 8.586 22 2 28.586 3.414 30 10 23.414 10 28 12 28 12 20 4 20zM28 2H22V16h2V11h4a2 2 0 002-2V4A2 2 0 0028 2zm0 7H24V4h4zM12 4L15 4 15 14 12 14 12 16 20 16 20 14 17 14 17 4 20 4 20 2 12 2 12 4zM2 4L8 4 2 14 2 16 10 16 10 14 4 14 10 4 10 2 2 2 2 4z\"></path></svg>"
            },
        };
    }
    ZipReferenceDirective_1 = ZipReferenceDirective;
    ZipReferenceDirective.prototype.ngAfterViewInit = function () {
        var svg = this.elementRef.nativeElement;
        svg.setAttribute("xmlns", "http://www.w3.org/2000/svg");
        var icon = this.icons[this.size];
        var domParser = new DOMParser();
        var rawSVG = icon.svg;
        var svgElement = domParser.parseFromString(rawSVG, "image/svg+xml").documentElement;
        var node = svgElement.firstChild;
        while (node) {
            // importNode makes a clone of the node
            // this ensures we keep looping over the nodes in the parsed document
            svg.appendChild(svg.ownerDocument.importNode(node, true));
            node = node.nextSibling;
        }
        var attributes = getAttributes({
            width: icon.metadata.descriptor.attrs.height,
            height: icon.metadata.descriptor.attrs.height,
            viewBox: icon.metadata.descriptor.attrs.viewBox,
            title: this.title,
            "aria-label": this.ariaLabel,
            "aria-labelledby": this.ariaLabelledby,
            "aria-hidden": this.ariaHidden,
            focusable: this.isFocusable.toString()
        });
        var attrKeys = Object.keys(attributes);
        for (var i = 0; i < attrKeys.length; i++) {
            var key = attrKeys[i];
            var value = attributes[key];
            if (key === "title") {
                continue;
            }
            if (value) {
                svg.setAttribute(key, value);
            }
        }
        if (attributes.title) {
            var title = document.createElement("title");
            title.textContent = attributes.title;
            ZipReferenceDirective_1.titleIdCounter++;
            title.setAttribute("id", "zip-reference-" + ZipReferenceDirective_1.titleIdCounter);
            svg.appendChild(title);
            svg.setAttribute("aria-labelledby", "zip-reference-" + ZipReferenceDirective_1.titleIdCounter);
        }
    };
    var ZipReferenceDirective_1;
    ZipReferenceDirective.titleIdCounter = 0;
    ZipReferenceDirective.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], ZipReferenceDirective.prototype, "ariaLabel", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], ZipReferenceDirective.prototype, "ariaLabelledby", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], ZipReferenceDirective.prototype, "ariaHidden", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], ZipReferenceDirective.prototype, "title", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], ZipReferenceDirective.prototype, "isFocusable", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], ZipReferenceDirective.prototype, "size", void 0);
    ZipReferenceDirective = ZipReferenceDirective_1 = __decorate([ __metadata("design:paramtypes", [ElementRef])
    ], ZipReferenceDirective);
ZipReferenceDirective.ɵfac = function ZipReferenceDirective_Factory(t) { return new (t || ZipReferenceDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
ZipReferenceDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ZipReferenceDirective, selectors: [["", "ibmIconZipReference", ""]], inputs: { isFocusable: "isFocusable", ariaLabel: "ariaLabel", ariaLabelledby: "ariaLabelledby", ariaHidden: "ariaHidden", title: "title", size: "size" } });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ZipReferenceDirective, [{
        type: Directive,
        args: [{
                selector: "[ibmIconZipReference]"
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, { isFocusable: [{
            type: Input
        }], ariaLabel: [{
            type: Input
        }], ariaLabelledby: [{
            type: Input
        }], ariaHidden: [{
            type: Input
        }], title: [{
            type: Input
        }], size: [{
            type: Input
        }] }); })();
    return ZipReferenceDirective;
}());
var ZipReferenceModule = /** @class */ (function () {
    function ZipReferenceModule() {
    }
ZipReferenceModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: ZipReferenceModule });
ZipReferenceModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function ZipReferenceModule_Factory(t) { return new (t || ZipReferenceModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ZipReferenceModule, { declarations: [ZipReferenceComponent, ZipReferenceDirective], exports: [ZipReferenceComponent, ZipReferenceDirective] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ZipReferenceModule, [{
        type: NgModule,
        args: [{
                declarations: [
                    ZipReferenceComponent,
                    ZipReferenceDirective,
                ],
                exports: [
                    ZipReferenceComponent,
                    ZipReferenceDirective,
                ]
            }]
    }], function () { return []; }, null); })();
    return ZipReferenceModule;
}());

export { ZipReferenceComponent, ZipReferenceDirective, ZipReferenceModule };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,