import { __decorate, __metadata } from 'tslib';
import { Input, Component, ElementRef, Directive, NgModule } from '@angular/core';
import { getAttributes } from '@carbon/icon-helpers';

import * as ɵngcc0 from '@angular/core';
var WatsonHealthSplitDiscardComponent = /** @class */ (function () {
    function WatsonHealthSplitDiscardComponent() {
        this.focusable = false;
    }
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], WatsonHealthSplitDiscardComponent.prototype, "ariaLabel", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], WatsonHealthSplitDiscardComponent.prototype, "ariaLabelledby", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], WatsonHealthSplitDiscardComponent.prototype, "ariaHidden", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], WatsonHealthSplitDiscardComponent.prototype, "title", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], WatsonHealthSplitDiscardComponent.prototype, "focusable", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], WatsonHealthSplitDiscardComponent.prototype, "innerClass", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], WatsonHealthSplitDiscardComponent.prototype, "size", void 0);
WatsonHealthSplitDiscardComponent.ɵfac = function WatsonHealthSplitDiscardComponent_Factory(t) { return new (t || WatsonHealthSplitDiscardComponent)(); };
WatsonHealthSplitDiscardComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: WatsonHealthSplitDiscardComponent, selectors: [["ibm-icon-watson-health-split-discard"]], inputs: { focusable: "focusable", ariaLabel: "ariaLabel", ariaLabelledby: "ariaLabelledby", ariaHidden: "ariaHidden", title: "title", innerClass: "innerClass", size: "size" }, decls: 1, vars: 7, consts: [["ibmIconWatsonHealthSplitDiscard", "", 3, "size", "ariaLabel", "ariaLabelledby", "ariaHidden", "title", "isFocusable"]], template: function WatsonHealthSplitDiscardComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵnamespaceSVG();
        ɵngcc0.ɵɵelement(0, "svg", 0);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("size", ctx.size)("ariaLabel", ctx.ariaLabel)("ariaLabelledby", ctx.ariaLabelledby)("ariaHidden", ctx.ariaHidden)("title", ctx.title)("isFocusable", ctx.focusable);
        ɵngcc0.ɵɵattribute("class", ctx.innerClass);
    } }, directives: function () { return [WatsonHealthSplitDiscardDirective]; }, encapsulation: 2 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(WatsonHealthSplitDiscardComponent, [{
        type: Component,
        args: [{
                selector: "ibm-icon-watson-health-split-discard",
                template: "\n    <svg\n      ibmIconWatsonHealthSplitDiscard\n      [size]=\"size\"\n      [ariaLabel]=\"ariaLabel\"\n      [ariaLabelledby]=\"ariaLabelledby\"\n      [ariaHidden]=\"ariaHidden\"\n      [title]=\"title\"\n      [isFocusable]=\"focusable\"\n      [attr.class]=\"innerClass\">\n    </svg>\n  "
            }]
    }], function () { return []; }, { focusable: [{
            type: Input
        }], ariaLabel: [{
            type: Input
        }], ariaLabelledby: [{
            type: Input
        }], ariaHidden: [{
            type: Input
        }], title: [{
            type: Input
        }], innerClass: [{
            type: Input
        }], size: [{
            type: Input
        }] }); })();
    return WatsonHealthSplitDiscardComponent;
}());
var WatsonHealthSplitDiscardDirective = /** @class */ (function () {
    function WatsonHealthSplitDiscardDirective(elementRef) {
        this.elementRef = elementRef;
        this.isFocusable = false;
        this.icons = {
            "32": {
                metadata: { "moduleName": "WatsonHealthSplitDiscard32", "filepath": "watson-health/split--discard/32.js", "descriptor": { "elem": "svg", "attrs": { "xmlns": "http://www.w3.org/2000/svg", "viewBox": "0 0 32 32", "fill": "currentColor", "width": 32, "height": 32 }, "content": [{ "elem": "path", "attrs": { "d": "M28,16A12.01,12.01,0,0,0,17,4.0508V2H15V4.0508a11.99,11.99,0,0,0,0,23.8984V30h2V27.9492A12.01,12.01,0,0,0,28,16ZM16,26V6a10,10,0,0,1,0,20Z" } }], "name": "split--discard", "size": 32 }, "size": 32 },
                svg: "<svg focusable=\"false\" preserveAspectRatio=\"xMidYMid meet\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"currentColor\" width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" aria-hidden=\"true\"><path d=\"M28,16A12.01,12.01,0,0,0,17,4.0508V2H15V4.0508a11.99,11.99,0,0,0,0,23.8984V30h2V27.9492A12.01,12.01,0,0,0,28,16ZM16,26V6a10,10,0,0,1,0,20Z\"></path></svg>"
            },
            "24": {
                metadata: { "moduleName": "WatsonHealthSplitDiscard24", "filepath": "watson-health/split--discard/24.js", "descriptor": { "elem": "svg", "attrs": { "xmlns": "http://www.w3.org/2000/svg", "viewBox": "0 0 32 32", "fill": "currentColor", "width": 24, "height": 24 }, "content": [{ "elem": "path", "attrs": { "d": "M28,16A12.01,12.01,0,0,0,17,4.0508V2H15V4.0508a11.99,11.99,0,0,0,0,23.8984V30h2V27.9492A12.01,12.01,0,0,0,28,16ZM16,26V6a10,10,0,0,1,0,20Z" } }], "name": "split--discard", "size": 24 }, "size": 24 },
                svg: "<svg focusable=\"false\" preserveAspectRatio=\"xMidYMid meet\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"currentColor\" width=\"24\" height=\"24\" viewBox=\"0 0 32 32\" aria-hidden=\"true\"><path d=\"M28,16A12.01,12.01,0,0,0,17,4.0508V2H15V4.0508a11.99,11.99,0,0,0,0,23.8984V30h2V27.9492A12.01,12.01,0,0,0,28,16ZM16,26V6a10,10,0,0,1,0,20Z\"></path></svg>"
            },
            "20": {
                metadata: { "moduleName": "WatsonHealthSplitDiscard20", "filepath": "watson-health/split--discard/20.js", "descriptor": { "elem": "svg", "attrs": { "xmlns": "http://www.w3.org/2000/svg", "viewBox": "0 0 32 32", "fill": "currentColor", "width": 20, "height": 20 }, "content": [{ "elem": "path", "attrs": { "d": "M28,16A12.01,12.01,0,0,0,17,4.0508V2H15V4.0508a11.99,11.99,0,0,0,0,23.8984V30h2V27.9492A12.01,12.01,0,0,0,28,16ZM16,26V6a10,10,0,0,1,0,20Z" } }], "name": "split--discard", "size": 20 }, "size": 20 },
                svg: "<svg focusable=\"false\" preserveAspectRatio=\"xMidYMid meet\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"currentColor\" width=\"20\" height=\"20\" viewBox=\"0 0 32 32\" aria-hidden=\"true\"><path d=\"M28,16A12.01,12.01,0,0,0,17,4.0508V2H15V4.0508a11.99,11.99,0,0,0,0,23.8984V30h2V27.9492A12.01,12.01,0,0,0,28,16ZM16,26V6a10,10,0,0,1,0,20Z\"></path></svg>"
            },
            "16": {
                metadata: { "moduleName": "WatsonHealthSplitDiscard16", "filepath": "watson-health/split--discard/16.js", "descriptor": { "elem": "svg", "attrs": { "xmlns": "http://www.w3.org/2000/svg", "viewBox": "0 0 32 32", "fill": "currentColor", "width": 16, "height": 16 }, "content": [{ "elem": "path", "attrs": { "d": "M28,16A12.01,12.01,0,0,0,17,4.0508V2H15V4.0508a11.99,11.99,0,0,0,0,23.8984V30h2V27.9492A12.01,12.01,0,0,0,28,16ZM16,26V6a10,10,0,0,1,0,20Z" } }], "name": "split--discard", "size": 16 }, "size": 16 },
                svg: "<svg focusable=\"false\" preserveAspectRatio=\"xMidYMid meet\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"currentColor\" width=\"16\" height=\"16\" viewBox=\"0 0 32 32\" aria-hidden=\"true\"><path d=\"M28,16A12.01,12.01,0,0,0,17,4.0508V2H15V4.0508a11.99,11.99,0,0,0,0,23.8984V30h2V27.9492A12.01,12.01,0,0,0,28,16ZM16,26V6a10,10,0,0,1,0,20Z\"></path></svg>"
            },
        };
    }
    WatsonHealthSplitDiscardDirective_1 = WatsonHealthSplitDiscardDirective;
    WatsonHealthSplitDiscardDirective.prototype.ngAfterViewInit = function () {
        var svg = this.elementRef.nativeElement;
        svg.setAttribute("xmlns", "http://www.w3.org/2000/svg");
        var icon = this.icons[this.size];
        var domParser = new DOMParser();
        var rawSVG = icon.svg;
        var svgElement = domParser.parseFromString(rawSVG, "image/svg+xml").documentElement;
        var node = svgElement.firstChild;
        while (node) {
            // importNode makes a clone of the node
            // this ensures we keep looping over the nodes in the parsed document
            svg.appendChild(svg.ownerDocument.importNode(node, true));
            node = node.nextSibling;
        }
        var attributes = getAttributes({
            width: icon.metadata.descriptor.attrs.height,
            height: icon.metadata.descriptor.attrs.height,
            viewBox: icon.metadata.descriptor.attrs.viewBox,
            title: this.title,
            "aria-label": this.ariaLabel,
            "aria-labelledby": this.ariaLabelledby,
            "aria-hidden": this.ariaHidden,
            focusable: this.isFocusable.toString()
        });
        var attrKeys = Object.keys(attributes);
        for (var i = 0; i < attrKeys.length; i++) {
            var key = attrKeys[i];
            var value = attributes[key];
            if (key === "title") {
                continue;
            }
            if (value) {
                svg.setAttribute(key, value);
            }
        }
        if (attributes.title) {
            var title = document.createElement("title");
            title.textContent = attributes.title;
            WatsonHealthSplitDiscardDirective_1.titleIdCounter++;
            title.setAttribute("id", "watson-health-split-discard-" + WatsonHealthSplitDiscardDirective_1.titleIdCounter);
            svg.appendChild(title);
            svg.setAttribute("aria-labelledby", "watson-health-split-discard-" + WatsonHealthSplitDiscardDirective_1.titleIdCounter);
        }
    };
    var WatsonHealthSplitDiscardDirective_1;
    WatsonHealthSplitDiscardDirective.titleIdCounter = 0;
    WatsonHealthSplitDiscardDirective.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], WatsonHealthSplitDiscardDirective.prototype, "ariaLabel", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], WatsonHealthSplitDiscardDirective.prototype, "ariaLabelledby", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], WatsonHealthSplitDiscardDirective.prototype, "ariaHidden", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], WatsonHealthSplitDiscardDirective.prototype, "title", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], WatsonHealthSplitDiscardDirective.prototype, "isFocusable", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], WatsonHealthSplitDiscardDirective.prototype, "size", void 0);
    WatsonHealthSplitDiscardDirective = WatsonHealthSplitDiscardDirective_1 = __decorate([ __metadata("design:paramtypes", [ElementRef])
    ], WatsonHealthSplitDiscardDirective);
WatsonHealthSplitDiscardDirective.ɵfac = function WatsonHealthSplitDiscardDirective_Factory(t) { return new (t || WatsonHealthSplitDiscardDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
WatsonHealthSplitDiscardDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: WatsonHealthSplitDiscardDirective, selectors: [["", "ibmIconWatsonHealthSplitDiscard", ""]], inputs: { isFocusable: "isFocusable", ariaLabel: "ariaLabel", ariaLabelledby: "ariaLabelledby", ariaHidden: "ariaHidden", title: "title", size: "size" } });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(WatsonHealthSplitDiscardDirective, [{
        type: Directive,
        args: [{
                selector: "[ibmIconWatsonHealthSplitDiscard]"
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, { isFocusable: [{
            type: Input
        }], ariaLabel: [{
            type: Input
        }], ariaLabelledby: [{
            type: Input
        }], ariaHidden: [{
            type: Input
        }], title: [{
            type: Input
        }], size: [{
            type: Input
        }] }); })();
    return WatsonHealthSplitDiscardDirective;
}());
var WatsonHealthSplitDiscardModule = /** @class */ (function () {
    function WatsonHealthSplitDiscardModule() {
    }
WatsonHealthSplitDiscardModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: WatsonHealthSplitDiscardModule });
WatsonHealthSplitDiscardModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function WatsonHealthSplitDiscardModule_Factory(t) { return new (t || WatsonHealthSplitDiscardModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(WatsonHealthSplitDiscardModule, { declarations: [WatsonHealthSplitDiscardComponent, WatsonHealthSplitDiscardDirective], exports: [WatsonHealthSplitDiscardComponent, WatsonHealthSplitDiscardDirective] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(WatsonHealthSplitDiscardModule, [{
        type: NgModule,
        args: [{
                declarations: [
                    WatsonHealthSplitDiscardComponent,
                    WatsonHealthSplitDiscardDirective,
                ],
                exports: [
                    WatsonHealthSplitDiscardComponent,
                    WatsonHealthSplitDiscardDirective,
                ]
            }]
    }], function () { return []; }, null); })();
    return WatsonHealthSplitDiscardModule;
}());

export { WatsonHealthSplitDiscardComponent, WatsonHealthSplitDiscardDirective, WatsonHealthSplitDiscardModule };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,