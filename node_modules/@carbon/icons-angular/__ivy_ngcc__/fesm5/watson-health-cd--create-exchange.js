import { __decorate, __metadata } from 'tslib';
import { Input, Component, ElementRef, Directive, NgModule } from '@angular/core';
import { getAttributes } from '@carbon/icon-helpers';

import * as ɵngcc0 from '@angular/core';
var WatsonHealthCdCreateExchangeComponent = /** @class */ (function () {
    function WatsonHealthCdCreateExchangeComponent() {
        this.focusable = false;
    }
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], WatsonHealthCdCreateExchangeComponent.prototype, "ariaLabel", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], WatsonHealthCdCreateExchangeComponent.prototype, "ariaLabelledby", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], WatsonHealthCdCreateExchangeComponent.prototype, "ariaHidden", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], WatsonHealthCdCreateExchangeComponent.prototype, "title", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], WatsonHealthCdCreateExchangeComponent.prototype, "focusable", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], WatsonHealthCdCreateExchangeComponent.prototype, "innerClass", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], WatsonHealthCdCreateExchangeComponent.prototype, "size", void 0);
WatsonHealthCdCreateExchangeComponent.ɵfac = function WatsonHealthCdCreateExchangeComponent_Factory(t) { return new (t || WatsonHealthCdCreateExchangeComponent)(); };
WatsonHealthCdCreateExchangeComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: WatsonHealthCdCreateExchangeComponent, selectors: [["ibm-icon-watson-health-cd-create-exchange"]], inputs: { focusable: "focusable", ariaLabel: "ariaLabel", ariaLabelledby: "ariaLabelledby", ariaHidden: "ariaHidden", title: "title", innerClass: "innerClass", size: "size" }, decls: 1, vars: 7, consts: [["ibmIconWatsonHealthCdCreateExchange", "", 3, "size", "ariaLabel", "ariaLabelledby", "ariaHidden", "title", "isFocusable"]], template: function WatsonHealthCdCreateExchangeComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵnamespaceSVG();
        ɵngcc0.ɵɵelement(0, "svg", 0);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("size", ctx.size)("ariaLabel", ctx.ariaLabel)("ariaLabelledby", ctx.ariaLabelledby)("ariaHidden", ctx.ariaHidden)("title", ctx.title)("isFocusable", ctx.focusable);
        ɵngcc0.ɵɵattribute("class", ctx.innerClass);
    } }, directives: function () { return [WatsonHealthCdCreateExchangeDirective]; }, encapsulation: 2 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(WatsonHealthCdCreateExchangeComponent, [{
        type: Component,
        args: [{
                selector: "ibm-icon-watson-health-cd-create-exchange",
                template: "\n    <svg\n      ibmIconWatsonHealthCdCreateExchange\n      [size]=\"size\"\n      [ariaLabel]=\"ariaLabel\"\n      [ariaLabelledby]=\"ariaLabelledby\"\n      [ariaHidden]=\"ariaHidden\"\n      [title]=\"title\"\n      [isFocusable]=\"focusable\"\n      [attr.class]=\"innerClass\">\n    </svg>\n  "
            }]
    }], function () { return []; }, { focusable: [{
            type: Input
        }], ariaLabel: [{
            type: Input
        }], ariaLabelledby: [{
            type: Input
        }], ariaHidden: [{
            type: Input
        }], title: [{
            type: Input
        }], innerClass: [{
            type: Input
        }], size: [{
            type: Input
        }] }); })();
    return WatsonHealthCdCreateExchangeComponent;
}());
var WatsonHealthCdCreateExchangeDirective = /** @class */ (function () {
    function WatsonHealthCdCreateExchangeDirective(elementRef) {
        this.elementRef = elementRef;
        this.isFocusable = false;
        this.icons = {
            "32": {
                metadata: { "moduleName": "WatsonHealthCdCreateExchange32", "filepath": "watson-health/cd--create-exchange/32.js", "descriptor": { "elem": "svg", "attrs": { "xmlns": "http://www.w3.org/2000/svg", "viewBox": "0 0 32 32", "fill": "currentColor", "width": 32, "height": 32 }, "content": [{ "elem": "circle", "attrs": { "cx": "14", "cy": "14", "r": "2" } }, { "elem": "path", "attrs": { "d": "M14,2a12,12,0,0,0,0,24V24A10,10,0,1,1,24,14,8.27,8.27,0,0,1,24,15h2c0-.33.05-.66.05-1A12,12,0,0,0,14,2Z" } }, { "elem": "path", "attrs": { "d": "M17 24L26.17 24 23.58 26.59 25 28 30 23 25 18 23.58 19.42 26.17 22 17 22 17 24zM14 20a6 6 0 116-6A6 6 0 0114 20zm0-10a4 4 0 104 4A4 4 0 0014 10z" } }], "name": "cd--create-exchange", "size": 32 }, "size": 32 },
                svg: "<svg focusable=\"false\" preserveAspectRatio=\"xMidYMid meet\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"currentColor\" width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" aria-hidden=\"true\"><circle cx=\"14\" cy=\"14\" r=\"2\"></circle><path d=\"M14,2a12,12,0,0,0,0,24V24A10,10,0,1,1,24,14,8.27,8.27,0,0,1,24,15h2c0-.33.05-.66.05-1A12,12,0,0,0,14,2Z\"></path><path d=\"M17 24L26.17 24 23.58 26.59 25 28 30 23 25 18 23.58 19.42 26.17 22 17 22 17 24zM14 20a6 6 0 116-6A6 6 0 0114 20zm0-10a4 4 0 104 4A4 4 0 0014 10z\"></path></svg>"
            },
            "24": {
                metadata: { "moduleName": "WatsonHealthCdCreateExchange24", "filepath": "watson-health/cd--create-exchange/24.js", "descriptor": { "elem": "svg", "attrs": { "xmlns": "http://www.w3.org/2000/svg", "viewBox": "0 0 32 32", "fill": "currentColor", "width": 24, "height": 24 }, "content": [{ "elem": "circle", "attrs": { "cx": "14", "cy": "14", "r": "2" } }, { "elem": "path", "attrs": { "d": "M14,2a12,12,0,0,0,0,24V24A10,10,0,1,1,24,14,8.27,8.27,0,0,1,24,15h2c0-.33.05-.66.05-1A12,12,0,0,0,14,2Z" } }, { "elem": "path", "attrs": { "d": "M17 24L26.17 24 23.58 26.59 25 28 30 23 25 18 23.58 19.42 26.17 22 17 22 17 24zM14 20a6 6 0 116-6A6 6 0 0114 20zm0-10a4 4 0 104 4A4 4 0 0014 10z" } }], "name": "cd--create-exchange", "size": 24 }, "size": 24 },
                svg: "<svg focusable=\"false\" preserveAspectRatio=\"xMidYMid meet\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"currentColor\" width=\"24\" height=\"24\" viewBox=\"0 0 32 32\" aria-hidden=\"true\"><circle cx=\"14\" cy=\"14\" r=\"2\"></circle><path d=\"M14,2a12,12,0,0,0,0,24V24A10,10,0,1,1,24,14,8.27,8.27,0,0,1,24,15h2c0-.33.05-.66.05-1A12,12,0,0,0,14,2Z\"></path><path d=\"M17 24L26.17 24 23.58 26.59 25 28 30 23 25 18 23.58 19.42 26.17 22 17 22 17 24zM14 20a6 6 0 116-6A6 6 0 0114 20zm0-10a4 4 0 104 4A4 4 0 0014 10z\"></path></svg>"
            },
            "20": {
                metadata: { "moduleName": "WatsonHealthCdCreateExchange20", "filepath": "watson-health/cd--create-exchange/20.js", "descriptor": { "elem": "svg", "attrs": { "xmlns": "http://www.w3.org/2000/svg", "viewBox": "0 0 32 32", "fill": "currentColor", "width": 20, "height": 20 }, "content": [{ "elem": "circle", "attrs": { "cx": "14", "cy": "14", "r": "2" } }, { "elem": "path", "attrs": { "d": "M14,2a12,12,0,0,0,0,24V24A10,10,0,1,1,24,14,8.27,8.27,0,0,1,24,15h2c0-.33.05-.66.05-1A12,12,0,0,0,14,2Z" } }, { "elem": "path", "attrs": { "d": "M17 24L26.17 24 23.58 26.59 25 28 30 23 25 18 23.58 19.42 26.17 22 17 22 17 24zM14 20a6 6 0 116-6A6 6 0 0114 20zm0-10a4 4 0 104 4A4 4 0 0014 10z" } }], "name": "cd--create-exchange", "size": 20 }, "size": 20 },
                svg: "<svg focusable=\"false\" preserveAspectRatio=\"xMidYMid meet\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"currentColor\" width=\"20\" height=\"20\" viewBox=\"0 0 32 32\" aria-hidden=\"true\"><circle cx=\"14\" cy=\"14\" r=\"2\"></circle><path d=\"M14,2a12,12,0,0,0,0,24V24A10,10,0,1,1,24,14,8.27,8.27,0,0,1,24,15h2c0-.33.05-.66.05-1A12,12,0,0,0,14,2Z\"></path><path d=\"M17 24L26.17 24 23.58 26.59 25 28 30 23 25 18 23.58 19.42 26.17 22 17 22 17 24zM14 20a6 6 0 116-6A6 6 0 0114 20zm0-10a4 4 0 104 4A4 4 0 0014 10z\"></path></svg>"
            },
            "16": {
                metadata: { "moduleName": "WatsonHealthCdCreateExchange16", "filepath": "watson-health/cd--create-exchange/16.js", "descriptor": { "elem": "svg", "attrs": { "xmlns": "http://www.w3.org/2000/svg", "viewBox": "0 0 32 32", "fill": "currentColor", "width": 16, "height": 16 }, "content": [{ "elem": "circle", "attrs": { "cx": "14", "cy": "14", "r": "2" } }, { "elem": "path", "attrs": { "d": "M14,2a12,12,0,0,0,0,24V24A10,10,0,1,1,24,14,8.27,8.27,0,0,1,24,15h2c0-.33.05-.66.05-1A12,12,0,0,0,14,2Z" } }, { "elem": "path", "attrs": { "d": "M17 24L26.17 24 23.58 26.59 25 28 30 23 25 18 23.58 19.42 26.17 22 17 22 17 24zM14 20a6 6 0 116-6A6 6 0 0114 20zm0-10a4 4 0 104 4A4 4 0 0014 10z" } }], "name": "cd--create-exchange", "size": 16 }, "size": 16 },
                svg: "<svg focusable=\"false\" preserveAspectRatio=\"xMidYMid meet\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"currentColor\" width=\"16\" height=\"16\" viewBox=\"0 0 32 32\" aria-hidden=\"true\"><circle cx=\"14\" cy=\"14\" r=\"2\"></circle><path d=\"M14,2a12,12,0,0,0,0,24V24A10,10,0,1,1,24,14,8.27,8.27,0,0,1,24,15h2c0-.33.05-.66.05-1A12,12,0,0,0,14,2Z\"></path><path d=\"M17 24L26.17 24 23.58 26.59 25 28 30 23 25 18 23.58 19.42 26.17 22 17 22 17 24zM14 20a6 6 0 116-6A6 6 0 0114 20zm0-10a4 4 0 104 4A4 4 0 0014 10z\"></path></svg>"
            },
        };
    }
    WatsonHealthCdCreateExchangeDirective_1 = WatsonHealthCdCreateExchangeDirective;
    WatsonHealthCdCreateExchangeDirective.prototype.ngAfterViewInit = function () {
        var svg = this.elementRef.nativeElement;
        svg.setAttribute("xmlns", "http://www.w3.org/2000/svg");
        var icon = this.icons[this.size];
        var domParser = new DOMParser();
        var rawSVG = icon.svg;
        var svgElement = domParser.parseFromString(rawSVG, "image/svg+xml").documentElement;
        var node = svgElement.firstChild;
        while (node) {
            // importNode makes a clone of the node
            // this ensures we keep looping over the nodes in the parsed document
            svg.appendChild(svg.ownerDocument.importNode(node, true));
            node = node.nextSibling;
        }
        var attributes = getAttributes({
            width: icon.metadata.descriptor.attrs.height,
            height: icon.metadata.descriptor.attrs.height,
            viewBox: icon.metadata.descriptor.attrs.viewBox,
            title: this.title,
            "aria-label": this.ariaLabel,
            "aria-labelledby": this.ariaLabelledby,
            "aria-hidden": this.ariaHidden,
            focusable: this.isFocusable.toString()
        });
        var attrKeys = Object.keys(attributes);
        for (var i = 0; i < attrKeys.length; i++) {
            var key = attrKeys[i];
            var value = attributes[key];
            if (key === "title") {
                continue;
            }
            if (value) {
                svg.setAttribute(key, value);
            }
        }
        if (attributes.title) {
            var title = document.createElement("title");
            title.textContent = attributes.title;
            WatsonHealthCdCreateExchangeDirective_1.titleIdCounter++;
            title.setAttribute("id", "watson-health-cd-create-exchange-" + WatsonHealthCdCreateExchangeDirective_1.titleIdCounter);
            svg.appendChild(title);
            svg.setAttribute("aria-labelledby", "watson-health-cd-create-exchange-" + WatsonHealthCdCreateExchangeDirective_1.titleIdCounter);
        }
    };
    var WatsonHealthCdCreateExchangeDirective_1;
    WatsonHealthCdCreateExchangeDirective.titleIdCounter = 0;
    WatsonHealthCdCreateExchangeDirective.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], WatsonHealthCdCreateExchangeDirective.prototype, "ariaLabel", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], WatsonHealthCdCreateExchangeDirective.prototype, "ariaLabelledby", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], WatsonHealthCdCreateExchangeDirective.prototype, "ariaHidden", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], WatsonHealthCdCreateExchangeDirective.prototype, "title", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], WatsonHealthCdCreateExchangeDirective.prototype, "isFocusable", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], WatsonHealthCdCreateExchangeDirective.prototype, "size", void 0);
    WatsonHealthCdCreateExchangeDirective = WatsonHealthCdCreateExchangeDirective_1 = __decorate([ __metadata("design:paramtypes", [ElementRef])
    ], WatsonHealthCdCreateExchangeDirective);
WatsonHealthCdCreateExchangeDirective.ɵfac = function WatsonHealthCdCreateExchangeDirective_Factory(t) { return new (t || WatsonHealthCdCreateExchangeDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
WatsonHealthCdCreateExchangeDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: WatsonHealthCdCreateExchangeDirective, selectors: [["", "ibmIconWatsonHealthCdCreateExchange", ""]], inputs: { isFocusable: "isFocusable", ariaLabel: "ariaLabel", ariaLabelledby: "ariaLabelledby", ariaHidden: "ariaHidden", title: "title", size: "size" } });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(WatsonHealthCdCreateExchangeDirective, [{
        type: Directive,
        args: [{
                selector: "[ibmIconWatsonHealthCdCreateExchange]"
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, { isFocusable: [{
            type: Input
        }], ariaLabel: [{
            type: Input
        }], ariaLabelledby: [{
            type: Input
        }], ariaHidden: [{
            type: Input
        }], title: [{
            type: Input
        }], size: [{
            type: Input
        }] }); })();
    return WatsonHealthCdCreateExchangeDirective;
}());
var WatsonHealthCdCreateExchangeModule = /** @class */ (function () {
    function WatsonHealthCdCreateExchangeModule() {
    }
WatsonHealthCdCreateExchangeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: WatsonHealthCdCreateExchangeModule });
WatsonHealthCdCreateExchangeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function WatsonHealthCdCreateExchangeModule_Factory(t) { return new (t || WatsonHealthCdCreateExchangeModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(WatsonHealthCdCreateExchangeModule, { declarations: [WatsonHealthCdCreateExchangeComponent, WatsonHealthCdCreateExchangeDirective], exports: [WatsonHealthCdCreateExchangeComponent, WatsonHealthCdCreateExchangeDirective] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(WatsonHealthCdCreateExchangeModule, [{
        type: NgModule,
        args: [{
                declarations: [
                    WatsonHealthCdCreateExchangeComponent,
                    WatsonHealthCdCreateExchangeDirective,
                ],
                exports: [
                    WatsonHealthCdCreateExchangeComponent,
                    WatsonHealthCdCreateExchangeDirective,
                ]
            }]
    }], function () { return []; }, null); })();
    return WatsonHealthCdCreateExchangeModule;
}());

export { WatsonHealthCdCreateExchangeComponent, WatsonHealthCdCreateExchangeDirective, WatsonHealthCdCreateExchangeModule };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,