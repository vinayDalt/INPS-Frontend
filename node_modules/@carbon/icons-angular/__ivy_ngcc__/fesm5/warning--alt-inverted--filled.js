import { __decorate, __metadata } from 'tslib';
import { Input, Component, ElementRef, Directive, NgModule } from '@angular/core';
import { getAttributes } from '@carbon/icon-helpers';

import * as ɵngcc0 from '@angular/core';
var WarningAltInvertedFilledComponent = /** @class */ (function () {
    function WarningAltInvertedFilledComponent() {
        this.focusable = false;
    }
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], WarningAltInvertedFilledComponent.prototype, "ariaLabel", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], WarningAltInvertedFilledComponent.prototype, "ariaLabelledby", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], WarningAltInvertedFilledComponent.prototype, "ariaHidden", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], WarningAltInvertedFilledComponent.prototype, "title", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], WarningAltInvertedFilledComponent.prototype, "focusable", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], WarningAltInvertedFilledComponent.prototype, "innerClass", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], WarningAltInvertedFilledComponent.prototype, "size", void 0);
WarningAltInvertedFilledComponent.ɵfac = function WarningAltInvertedFilledComponent_Factory(t) { return new (t || WarningAltInvertedFilledComponent)(); };
WarningAltInvertedFilledComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: WarningAltInvertedFilledComponent, selectors: [["ibm-icon-warning-alt-inverted-filled"]], inputs: { focusable: "focusable", ariaLabel: "ariaLabel", ariaLabelledby: "ariaLabelledby", ariaHidden: "ariaHidden", title: "title", innerClass: "innerClass", size: "size" }, decls: 1, vars: 7, consts: [["ibmIconWarningAltInvertedFilled", "", 3, "size", "ariaLabel", "ariaLabelledby", "ariaHidden", "title", "isFocusable"]], template: function WarningAltInvertedFilledComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵnamespaceSVG();
        ɵngcc0.ɵɵelement(0, "svg", 0);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("size", ctx.size)("ariaLabel", ctx.ariaLabel)("ariaLabelledby", ctx.ariaLabelledby)("ariaHidden", ctx.ariaHidden)("title", ctx.title)("isFocusable", ctx.focusable);
        ɵngcc0.ɵɵattribute("class", ctx.innerClass);
    } }, directives: function () { return [WarningAltInvertedFilledDirective]; }, encapsulation: 2 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(WarningAltInvertedFilledComponent, [{
        type: Component,
        args: [{
                selector: "ibm-icon-warning-alt-inverted-filled",
                template: "\n    <svg\n      ibmIconWarningAltInvertedFilled\n      [size]=\"size\"\n      [ariaLabel]=\"ariaLabel\"\n      [ariaLabelledby]=\"ariaLabelledby\"\n      [ariaHidden]=\"ariaHidden\"\n      [title]=\"title\"\n      [isFocusable]=\"focusable\"\n      [attr.class]=\"innerClass\">\n    </svg>\n  "
            }]
    }], function () { return []; }, { focusable: [{
            type: Input
        }], ariaLabel: [{
            type: Input
        }], ariaLabelledby: [{
            type: Input
        }], ariaHidden: [{
            type: Input
        }], title: [{
            type: Input
        }], innerClass: [{
            type: Input
        }], size: [{
            type: Input
        }] }); })();
    return WarningAltInvertedFilledComponent;
}());
var WarningAltInvertedFilledDirective = /** @class */ (function () {
    function WarningAltInvertedFilledDirective(elementRef) {
        this.elementRef = elementRef;
        this.isFocusable = false;
        this.icons = {
            "32": {
                metadata: { "moduleName": "WarningAltInvertedFilled32", "filepath": "warning--alt-inverted--filled/32.js", "descriptor": { "elem": "svg", "attrs": { "xmlns": "http://www.w3.org/2000/svg", "viewBox": "0 0 32 32", "fill": "currentColor", "width": 32, "height": 32 }, "content": [{ "elem": "path", "attrs": { "d": "M29.8594,2.4893A1,1,0,0,0,29,2H3a1.0015,1.0015,0,0,0-.8794,1.4785l13,25.0366a1.04,1.04,0,0,0,1.7583,0l13-25.0366A1.0034,1.0034,0,0,0,29.8594,2.4893ZM14.875,5h2.25V15h-2.25ZM16,21a1.5,1.5,0,1,1,1.5-1.5A1.5,1.5,0,0,1,16,21Z" } }, { "elem": "path", "attrs": { "fill": "none", "d": "M14.875,5h2.25V15h-2.25ZM16,21a1.5,1.5,0,1,1,1.5-1.5A1.5,1.5,0,0,1,16,21Z", "data-icon-path": "inner-path" } }], "name": "warning--alt-inverted--filled", "size": 32 }, "size": 32 },
                svg: "<svg focusable=\"false\" preserveAspectRatio=\"xMidYMid meet\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"currentColor\" width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" aria-hidden=\"true\"><path d=\"M29.8594,2.4893A1,1,0,0,0,29,2H3a1.0015,1.0015,0,0,0-.8794,1.4785l13,25.0366a1.04,1.04,0,0,0,1.7583,0l13-25.0366A1.0034,1.0034,0,0,0,29.8594,2.4893ZM14.875,5h2.25V15h-2.25ZM16,21a1.5,1.5,0,1,1,1.5-1.5A1.5,1.5,0,0,1,16,21Z\"></path><path fill=\"none\" d=\"M14.875,5h2.25V15h-2.25ZM16,21a1.5,1.5,0,1,1,1.5-1.5A1.5,1.5,0,0,1,16,21Z\" data-icon-path=\"inner-path\"></path></svg>"
            },
            "24": {
                metadata: { "moduleName": "WarningAltInvertedFilled24", "filepath": "warning--alt-inverted--filled/24.js", "descriptor": { "elem": "svg", "attrs": { "xmlns": "http://www.w3.org/2000/svg", "viewBox": "0 0 32 32", "fill": "currentColor", "width": 24, "height": 24 }, "content": [{ "elem": "path", "attrs": { "d": "M29.8594,2.4893A1,1,0,0,0,29,2H3a1.0015,1.0015,0,0,0-.8794,1.4785l13,25.0366a1.04,1.04,0,0,0,1.7583,0l13-25.0366A1.0034,1.0034,0,0,0,29.8594,2.4893ZM14.875,5h2.25V15h-2.25ZM16,21a1.5,1.5,0,1,1,1.5-1.5A1.5,1.5,0,0,1,16,21Z" } }, { "elem": "path", "attrs": { "fill": "none", "d": "M14.875,5h2.25V15h-2.25ZM16,21a1.5,1.5,0,1,1,1.5-1.5A1.5,1.5,0,0,1,16,21Z", "data-icon-path": "inner-path" } }], "name": "warning--alt-inverted--filled", "size": 24 }, "size": 24 },
                svg: "<svg focusable=\"false\" preserveAspectRatio=\"xMidYMid meet\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"currentColor\" width=\"24\" height=\"24\" viewBox=\"0 0 32 32\" aria-hidden=\"true\"><path d=\"M29.8594,2.4893A1,1,0,0,0,29,2H3a1.0015,1.0015,0,0,0-.8794,1.4785l13,25.0366a1.04,1.04,0,0,0,1.7583,0l13-25.0366A1.0034,1.0034,0,0,0,29.8594,2.4893ZM14.875,5h2.25V15h-2.25ZM16,21a1.5,1.5,0,1,1,1.5-1.5A1.5,1.5,0,0,1,16,21Z\"></path><path fill=\"none\" d=\"M14.875,5h2.25V15h-2.25ZM16,21a1.5,1.5,0,1,1,1.5-1.5A1.5,1.5,0,0,1,16,21Z\" data-icon-path=\"inner-path\"></path></svg>"
            },
            "20": {
                metadata: { "moduleName": "WarningAltInvertedFilled20", "filepath": "warning--alt-inverted--filled/20.js", "descriptor": { "elem": "svg", "attrs": { "xmlns": "http://www.w3.org/2000/svg", "viewBox": "0 0 32 32", "fill": "currentColor", "width": 20, "height": 20 }, "content": [{ "elem": "path", "attrs": { "d": "M29.8594,2.4893A1,1,0,0,0,29,2H3a1.0015,1.0015,0,0,0-.8794,1.4785l13,25.0366a1.04,1.04,0,0,0,1.7583,0l13-25.0366A1.0034,1.0034,0,0,0,29.8594,2.4893ZM14.875,5h2.25V15h-2.25ZM16,21a1.5,1.5,0,1,1,1.5-1.5A1.5,1.5,0,0,1,16,21Z" } }, { "elem": "path", "attrs": { "fill": "none", "d": "M14.875,5h2.25V15h-2.25ZM16,21a1.5,1.5,0,1,1,1.5-1.5A1.5,1.5,0,0,1,16,21Z", "data-icon-path": "inner-path" } }], "name": "warning--alt-inverted--filled", "size": 20 }, "size": 20 },
                svg: "<svg focusable=\"false\" preserveAspectRatio=\"xMidYMid meet\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"currentColor\" width=\"20\" height=\"20\" viewBox=\"0 0 32 32\" aria-hidden=\"true\"><path d=\"M29.8594,2.4893A1,1,0,0,0,29,2H3a1.0015,1.0015,0,0,0-.8794,1.4785l13,25.0366a1.04,1.04,0,0,0,1.7583,0l13-25.0366A1.0034,1.0034,0,0,0,29.8594,2.4893ZM14.875,5h2.25V15h-2.25ZM16,21a1.5,1.5,0,1,1,1.5-1.5A1.5,1.5,0,0,1,16,21Z\"></path><path fill=\"none\" d=\"M14.875,5h2.25V15h-2.25ZM16,21a1.5,1.5,0,1,1,1.5-1.5A1.5,1.5,0,0,1,16,21Z\" data-icon-path=\"inner-path\"></path></svg>"
            },
            "16": {
                metadata: { "moduleName": "WarningAltInvertedFilled16", "filepath": "warning--alt-inverted--filled/16.js", "descriptor": { "elem": "svg", "attrs": { "xmlns": "http://www.w3.org/2000/svg", "viewBox": "0 0 32 32", "fill": "currentColor", "width": 16, "height": 16 }, "content": [{ "elem": "path", "attrs": { "d": "M29.8594,2.4893A1,1,0,0,0,29,2H3a1.0015,1.0015,0,0,0-.8794,1.4785l13,25.0366a1.04,1.04,0,0,0,1.7583,0l13-25.0366A1.0034,1.0034,0,0,0,29.8594,2.4893ZM14.875,5h2.25V15h-2.25ZM16,21a1.5,1.5,0,1,1,1.5-1.5A1.5,1.5,0,0,1,16,21Z" } }, { "elem": "path", "attrs": { "fill": "none", "d": "M14.875,5h2.25V15h-2.25ZM16,21a1.5,1.5,0,1,1,1.5-1.5A1.5,1.5,0,0,1,16,21Z", "data-icon-path": "inner-path" } }], "name": "warning--alt-inverted--filled", "size": 16 }, "size": 16 },
                svg: "<svg focusable=\"false\" preserveAspectRatio=\"xMidYMid meet\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"currentColor\" width=\"16\" height=\"16\" viewBox=\"0 0 32 32\" aria-hidden=\"true\"><path d=\"M29.8594,2.4893A1,1,0,0,0,29,2H3a1.0015,1.0015,0,0,0-.8794,1.4785l13,25.0366a1.04,1.04,0,0,0,1.7583,0l13-25.0366A1.0034,1.0034,0,0,0,29.8594,2.4893ZM14.875,5h2.25V15h-2.25ZM16,21a1.5,1.5,0,1,1,1.5-1.5A1.5,1.5,0,0,1,16,21Z\"></path><path fill=\"none\" d=\"M14.875,5h2.25V15h-2.25ZM16,21a1.5,1.5,0,1,1,1.5-1.5A1.5,1.5,0,0,1,16,21Z\" data-icon-path=\"inner-path\"></path></svg>"
            },
        };
    }
    WarningAltInvertedFilledDirective_1 = WarningAltInvertedFilledDirective;
    WarningAltInvertedFilledDirective.prototype.ngAfterViewInit = function () {
        var svg = this.elementRef.nativeElement;
        svg.setAttribute("xmlns", "http://www.w3.org/2000/svg");
        var icon = this.icons[this.size];
        var domParser = new DOMParser();
        var rawSVG = icon.svg;
        var svgElement = domParser.parseFromString(rawSVG, "image/svg+xml").documentElement;
        var node = svgElement.firstChild;
        while (node) {
            // importNode makes a clone of the node
            // this ensures we keep looping over the nodes in the parsed document
            svg.appendChild(svg.ownerDocument.importNode(node, true));
            node = node.nextSibling;
        }
        var attributes = getAttributes({
            width: icon.metadata.descriptor.attrs.height,
            height: icon.metadata.descriptor.attrs.height,
            viewBox: icon.metadata.descriptor.attrs.viewBox,
            title: this.title,
            "aria-label": this.ariaLabel,
            "aria-labelledby": this.ariaLabelledby,
            "aria-hidden": this.ariaHidden,
            focusable: this.isFocusable.toString()
        });
        var attrKeys = Object.keys(attributes);
        for (var i = 0; i < attrKeys.length; i++) {
            var key = attrKeys[i];
            var value = attributes[key];
            if (key === "title") {
                continue;
            }
            if (value) {
                svg.setAttribute(key, value);
            }
        }
        if (attributes.title) {
            var title = document.createElement("title");
            title.textContent = attributes.title;
            WarningAltInvertedFilledDirective_1.titleIdCounter++;
            title.setAttribute("id", "warning-alt-inverted-filled-" + WarningAltInvertedFilledDirective_1.titleIdCounter);
            svg.appendChild(title);
            svg.setAttribute("aria-labelledby", "warning-alt-inverted-filled-" + WarningAltInvertedFilledDirective_1.titleIdCounter);
        }
    };
    var WarningAltInvertedFilledDirective_1;
    WarningAltInvertedFilledDirective.titleIdCounter = 0;
    WarningAltInvertedFilledDirective.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], WarningAltInvertedFilledDirective.prototype, "ariaLabel", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], WarningAltInvertedFilledDirective.prototype, "ariaLabelledby", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], WarningAltInvertedFilledDirective.prototype, "ariaHidden", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], WarningAltInvertedFilledDirective.prototype, "title", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], WarningAltInvertedFilledDirective.prototype, "isFocusable", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], WarningAltInvertedFilledDirective.prototype, "size", void 0);
    WarningAltInvertedFilledDirective = WarningAltInvertedFilledDirective_1 = __decorate([ __metadata("design:paramtypes", [ElementRef])
    ], WarningAltInvertedFilledDirective);
WarningAltInvertedFilledDirective.ɵfac = function WarningAltInvertedFilledDirective_Factory(t) { return new (t || WarningAltInvertedFilledDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
WarningAltInvertedFilledDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: WarningAltInvertedFilledDirective, selectors: [["", "ibmIconWarningAltInvertedFilled", ""]], inputs: { isFocusable: "isFocusable", ariaLabel: "ariaLabel", ariaLabelledby: "ariaLabelledby", ariaHidden: "ariaHidden", title: "title", size: "size" } });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(WarningAltInvertedFilledDirective, [{
        type: Directive,
        args: [{
                selector: "[ibmIconWarningAltInvertedFilled]"
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, { isFocusable: [{
            type: Input
        }], ariaLabel: [{
            type: Input
        }], ariaLabelledby: [{
            type: Input
        }], ariaHidden: [{
            type: Input
        }], title: [{
            type: Input
        }], size: [{
            type: Input
        }] }); })();
    return WarningAltInvertedFilledDirective;
}());
var WarningAltInvertedFilledModule = /** @class */ (function () {
    function WarningAltInvertedFilledModule() {
    }
WarningAltInvertedFilledModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: WarningAltInvertedFilledModule });
WarningAltInvertedFilledModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function WarningAltInvertedFilledModule_Factory(t) { return new (t || WarningAltInvertedFilledModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(WarningAltInvertedFilledModule, { declarations: [WarningAltInvertedFilledComponent, WarningAltInvertedFilledDirective], exports: [WarningAltInvertedFilledComponent, WarningAltInvertedFilledDirective] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(WarningAltInvertedFilledModule, [{
        type: NgModule,
        args: [{
                declarations: [
                    WarningAltInvertedFilledComponent,
                    WarningAltInvertedFilledDirective,
                ],
                exports: [
                    WarningAltInvertedFilledComponent,
                    WarningAltInvertedFilledDirective,
                ]
            }]
    }], function () { return []; }, null); })();
    return WarningAltInvertedFilledModule;
}());

export { WarningAltInvertedFilledComponent, WarningAltInvertedFilledDirective, WarningAltInvertedFilledModule };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2FybmluZy0tYWx0LWludmVydGVkLS1maWxsZWQuanMiLCJzb3VyY2VzIjpbIndhcm5pbmctLWFsdC1pbnZlcnRlZC0tZmlsbGVkLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O29CQU0wQztBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwRkFJTztBQUNQOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztvQkFBMEM7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7Ozs7OztnREFZdUM7QUFDdkM7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBfX2RlY29yYXRlLCBfX21ldGFkYXRhIH0gZnJvbSAndHNsaWInO1xuaW1wb3J0IHsgSW5wdXQsIENvbXBvbmVudCwgRWxlbWVudFJlZiwgRGlyZWN0aXZlLCBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgZ2V0QXR0cmlidXRlcyB9IGZyb20gJ0BjYXJib24vaWNvbi1oZWxwZXJzJztcblxudmFyIFdhcm5pbmdBbHRJbnZlcnRlZEZpbGxlZENvbXBvbmVudCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBXYXJuaW5nQWx0SW52ZXJ0ZWRGaWxsZWRDb21wb25lbnQoKSB7XG4gICAgICAgIHRoaXMuZm9jdXNhYmxlID0gZmFsc2U7XG4gICAgfVxuICAgIF9fZGVjb3JhdGUoW1xuICAgICAgICBJbnB1dCgpLFxuICAgICAgICBfX21ldGFkYXRhKFwiZGVzaWduOnR5cGVcIiwgU3RyaW5nKVxuICAgIF0sIFdhcm5pbmdBbHRJbnZlcnRlZEZpbGxlZENvbXBvbmVudC5wcm90b3R5cGUsIFwiYXJpYUxhYmVsXCIsIHZvaWQgMCk7XG4gICAgX19kZWNvcmF0ZShbXG4gICAgICAgIElucHV0KCksXG4gICAgICAgIF9fbWV0YWRhdGEoXCJkZXNpZ246dHlwZVwiLCBTdHJpbmcpXG4gICAgXSwgV2FybmluZ0FsdEludmVydGVkRmlsbGVkQ29tcG9uZW50LnByb3RvdHlwZSwgXCJhcmlhTGFiZWxsZWRieVwiLCB2b2lkIDApO1xuICAgIF9fZGVjb3JhdGUoW1xuICAgICAgICBJbnB1dCgpLFxuICAgICAgICBfX21ldGFkYXRhKFwiZGVzaWduOnR5cGVcIiwgQm9vbGVhbilcbiAgICBdLCBXYXJuaW5nQWx0SW52ZXJ0ZWRGaWxsZWRDb21wb25lbnQucHJvdG90eXBlLCBcImFyaWFIaWRkZW5cIiwgdm9pZCAwKTtcbiAgICBfX2RlY29yYXRlKFtcbiAgICAgICAgSW5wdXQoKSxcbiAgICAgICAgX19tZXRhZGF0YShcImRlc2lnbjp0eXBlXCIsIFN0cmluZylcbiAgICBdLCBXYXJuaW5nQWx0SW52ZXJ0ZWRGaWxsZWRDb21wb25lbnQucHJvdG90eXBlLCBcInRpdGxlXCIsIHZvaWQgMCk7XG4gICAgX19kZWNvcmF0ZShbXG4gICAgICAgIElucHV0KCksXG4gICAgICAgIF9fbWV0YWRhdGEoXCJkZXNpZ246dHlwZVwiLCBCb29sZWFuKVxuICAgIF0sIFdhcm5pbmdBbHRJbnZlcnRlZEZpbGxlZENvbXBvbmVudC5wcm90b3R5cGUsIFwiZm9jdXNhYmxlXCIsIHZvaWQgMCk7XG4gICAgX19kZWNvcmF0ZShbXG4gICAgICAgIElucHV0KCksXG4gICAgICAgIF9fbWV0YWRhdGEoXCJkZXNpZ246dHlwZVwiLCBTdHJpbmcpXG4gICAgXSwgV2FybmluZ0FsdEludmVydGVkRmlsbGVkQ29tcG9uZW50LnByb3RvdHlwZSwgXCJpbm5lckNsYXNzXCIsIHZvaWQgMCk7XG4gICAgX19kZWNvcmF0ZShbXG4gICAgICAgIElucHV0KCksXG4gICAgICAgIF9fbWV0YWRhdGEoXCJkZXNpZ246dHlwZVwiLCBTdHJpbmcpXG4gICAgXSwgV2FybmluZ0FsdEludmVydGVkRmlsbGVkQ29tcG9uZW50LnByb3RvdHlwZSwgXCJzaXplXCIsIHZvaWQgMCk7XG4gICAgV2FybmluZ0FsdEludmVydGVkRmlsbGVkQ29tcG9uZW50ID0gX19kZWNvcmF0ZShbXG4gICAgICAgIENvbXBvbmVudCh7XG4gICAgICAgICAgICBzZWxlY3RvcjogXCJpYm0taWNvbi13YXJuaW5nLWFsdC1pbnZlcnRlZC1maWxsZWRcIixcbiAgICAgICAgICAgIHRlbXBsYXRlOiBcIlxcbiAgICA8c3ZnXFxuICAgICAgaWJtSWNvbldhcm5pbmdBbHRJbnZlcnRlZEZpbGxlZFxcbiAgICAgIFtzaXplXT1cXFwic2l6ZVxcXCJcXG4gICAgICBbYXJpYUxhYmVsXT1cXFwiYXJpYUxhYmVsXFxcIlxcbiAgICAgIFthcmlhTGFiZWxsZWRieV09XFxcImFyaWFMYWJlbGxlZGJ5XFxcIlxcbiAgICAgIFthcmlhSGlkZGVuXT1cXFwiYXJpYUhpZGRlblxcXCJcXG4gICAgICBbdGl0bGVdPVxcXCJ0aXRsZVxcXCJcXG4gICAgICBbaXNGb2N1c2FibGVdPVxcXCJmb2N1c2FibGVcXFwiXFxuICAgICAgW2F0dHIuY2xhc3NdPVxcXCJpbm5lckNsYXNzXFxcIj5cXG4gICAgPC9zdmc+XFxuICBcIlxuICAgICAgICB9KVxuICAgIF0sIFdhcm5pbmdBbHRJbnZlcnRlZEZpbGxlZENvbXBvbmVudCk7XG4gICAgcmV0dXJuIFdhcm5pbmdBbHRJbnZlcnRlZEZpbGxlZENvbXBvbmVudDtcbn0oKSk7XG52YXIgV2FybmluZ0FsdEludmVydGVkRmlsbGVkRGlyZWN0aXZlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFdhcm5pbmdBbHRJbnZlcnRlZEZpbGxlZERpcmVjdGl2ZShlbGVtZW50UmVmKSB7XG4gICAgICAgIHRoaXMuZWxlbWVudFJlZiA9IGVsZW1lbnRSZWY7XG4gICAgICAgIHRoaXMuaXNGb2N1c2FibGUgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5pY29ucyA9IHtcbiAgICAgICAgICAgIFwiMzJcIjoge1xuICAgICAgICAgICAgICAgIG1ldGFkYXRhOiB7IFwibW9kdWxlTmFtZVwiOiBcIldhcm5pbmdBbHRJbnZlcnRlZEZpbGxlZDMyXCIsIFwiZmlsZXBhdGhcIjogXCJ3YXJuaW5nLS1hbHQtaW52ZXJ0ZWQtLWZpbGxlZC8zMi5qc1wiLCBcImRlc2NyaXB0b3JcIjogeyBcImVsZW1cIjogXCJzdmdcIiwgXCJhdHRyc1wiOiB7IFwieG1sbnNcIjogXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiLCBcInZpZXdCb3hcIjogXCIwIDAgMzIgMzJcIiwgXCJmaWxsXCI6IFwiY3VycmVudENvbG9yXCIsIFwid2lkdGhcIjogMzIsIFwiaGVpZ2h0XCI6IDMyIH0sIFwiY29udGVudFwiOiBbeyBcImVsZW1cIjogXCJwYXRoXCIsIFwiYXR0cnNcIjogeyBcImRcIjogXCJNMjkuODU5NCwyLjQ4OTNBMSwxLDAsMCwwLDI5LDJIM2ExLjAwMTUsMS4wMDE1LDAsMCwwLS44Nzk0LDEuNDc4NWwxMywyNS4wMzY2YTEuMDQsMS4wNCwwLDAsMCwxLjc1ODMsMGwxMy0yNS4wMzY2QTEuMDAzNCwxLjAwMzQsMCwwLDAsMjkuODU5NCwyLjQ4OTNaTTE0Ljg3NSw1aDIuMjVWMTVoLTIuMjVaTTE2LDIxYTEuNSwxLjUsMCwxLDEsMS41LTEuNUExLjUsMS41LDAsMCwxLDE2LDIxWlwiIH0gfSwgeyBcImVsZW1cIjogXCJwYXRoXCIsIFwiYXR0cnNcIjogeyBcImZpbGxcIjogXCJub25lXCIsIFwiZFwiOiBcIk0xNC44NzUsNWgyLjI1VjE1aC0yLjI1Wk0xNiwyMWExLjUsMS41LDAsMSwxLDEuNS0xLjVBMS41LDEuNSwwLDAsMSwxNiwyMVpcIiwgXCJkYXRhLWljb24tcGF0aFwiOiBcImlubmVyLXBhdGhcIiB9IH1dLCBcIm5hbWVcIjogXCJ3YXJuaW5nLS1hbHQtaW52ZXJ0ZWQtLWZpbGxlZFwiLCBcInNpemVcIjogMzIgfSwgXCJzaXplXCI6IDMyIH0sXG4gICAgICAgICAgICAgICAgc3ZnOiBcIjxzdmcgZm9jdXNhYmxlPVxcXCJmYWxzZVxcXCIgcHJlc2VydmVBc3BlY3RSYXRpbz1cXFwieE1pZFlNaWQgbWVldFxcXCIgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIiBmaWxsPVxcXCJjdXJyZW50Q29sb3JcXFwiIHdpZHRoPVxcXCIzMlxcXCIgaGVpZ2h0PVxcXCIzMlxcXCIgdmlld0JveD1cXFwiMCAwIDMyIDMyXFxcIiBhcmlhLWhpZGRlbj1cXFwidHJ1ZVxcXCI+PHBhdGggZD1cXFwiTTI5Ljg1OTQsMi40ODkzQTEsMSwwLDAsMCwyOSwySDNhMS4wMDE1LDEuMDAxNSwwLDAsMC0uODc5NCwxLjQ3ODVsMTMsMjUuMDM2NmExLjA0LDEuMDQsMCwwLDAsMS43NTgzLDBsMTMtMjUuMDM2NkExLjAwMzQsMS4wMDM0LDAsMCwwLDI5Ljg1OTQsMi40ODkzWk0xNC44NzUsNWgyLjI1VjE1aC0yLjI1Wk0xNiwyMWExLjUsMS41LDAsMSwxLDEuNS0xLjVBMS41LDEuNSwwLDAsMSwxNiwyMVpcXFwiPjwvcGF0aD48cGF0aCBmaWxsPVxcXCJub25lXFxcIiBkPVxcXCJNMTQuODc1LDVoMi4yNVYxNWgtMi4yNVpNMTYsMjFhMS41LDEuNSwwLDEsMSwxLjUtMS41QTEuNSwxLjUsMCwwLDEsMTYsMjFaXFxcIiBkYXRhLWljb24tcGF0aD1cXFwiaW5uZXItcGF0aFxcXCI+PC9wYXRoPjwvc3ZnPlwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCIyNFwiOiB7XG4gICAgICAgICAgICAgICAgbWV0YWRhdGE6IHsgXCJtb2R1bGVOYW1lXCI6IFwiV2FybmluZ0FsdEludmVydGVkRmlsbGVkMjRcIiwgXCJmaWxlcGF0aFwiOiBcIndhcm5pbmctLWFsdC1pbnZlcnRlZC0tZmlsbGVkLzI0LmpzXCIsIFwiZGVzY3JpcHRvclwiOiB7IFwiZWxlbVwiOiBcInN2Z1wiLCBcImF0dHJzXCI6IHsgXCJ4bWxuc1wiOiBcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIsIFwidmlld0JveFwiOiBcIjAgMCAzMiAzMlwiLCBcImZpbGxcIjogXCJjdXJyZW50Q29sb3JcIiwgXCJ3aWR0aFwiOiAyNCwgXCJoZWlnaHRcIjogMjQgfSwgXCJjb250ZW50XCI6IFt7IFwiZWxlbVwiOiBcInBhdGhcIiwgXCJhdHRyc1wiOiB7IFwiZFwiOiBcIk0yOS44NTk0LDIuNDg5M0ExLDEsMCwwLDAsMjksMkgzYTEuMDAxNSwxLjAwMTUsMCwwLDAtLjg3OTQsMS40Nzg1bDEzLDI1LjAzNjZhMS4wNCwxLjA0LDAsMCwwLDEuNzU4MywwbDEzLTI1LjAzNjZBMS4wMDM0LDEuMDAzNCwwLDAsMCwyOS44NTk0LDIuNDg5M1pNMTQuODc1LDVoMi4yNVYxNWgtMi4yNVpNMTYsMjFhMS41LDEuNSwwLDEsMSwxLjUtMS41QTEuNSwxLjUsMCwwLDEsMTYsMjFaXCIgfSB9LCB7IFwiZWxlbVwiOiBcInBhdGhcIiwgXCJhdHRyc1wiOiB7IFwiZmlsbFwiOiBcIm5vbmVcIiwgXCJkXCI6IFwiTTE0Ljg3NSw1aDIuMjVWMTVoLTIuMjVaTTE2LDIxYTEuNSwxLjUsMCwxLDEsMS41LTEuNUExLjUsMS41LDAsMCwxLDE2LDIxWlwiLCBcImRhdGEtaWNvbi1wYXRoXCI6IFwiaW5uZXItcGF0aFwiIH0gfV0sIFwibmFtZVwiOiBcIndhcm5pbmctLWFsdC1pbnZlcnRlZC0tZmlsbGVkXCIsIFwic2l6ZVwiOiAyNCB9LCBcInNpemVcIjogMjQgfSxcbiAgICAgICAgICAgICAgICBzdmc6IFwiPHN2ZyBmb2N1c2FibGU9XFxcImZhbHNlXFxcIiBwcmVzZXJ2ZUFzcGVjdFJhdGlvPVxcXCJ4TWlkWU1pZCBtZWV0XFxcIiB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiIGZpbGw9XFxcImN1cnJlbnRDb2xvclxcXCIgd2lkdGg9XFxcIjI0XFxcIiBoZWlnaHQ9XFxcIjI0XFxcIiB2aWV3Qm94PVxcXCIwIDAgMzIgMzJcXFwiIGFyaWEtaGlkZGVuPVxcXCJ0cnVlXFxcIj48cGF0aCBkPVxcXCJNMjkuODU5NCwyLjQ4OTNBMSwxLDAsMCwwLDI5LDJIM2ExLjAwMTUsMS4wMDE1LDAsMCwwLS44Nzk0LDEuNDc4NWwxMywyNS4wMzY2YTEuMDQsMS4wNCwwLDAsMCwxLjc1ODMsMGwxMy0yNS4wMzY2QTEuMDAzNCwxLjAwMzQsMCwwLDAsMjkuODU5NCwyLjQ4OTNaTTE0Ljg3NSw1aDIuMjVWMTVoLTIuMjVaTTE2LDIxYTEuNSwxLjUsMCwxLDEsMS41LTEuNUExLjUsMS41LDAsMCwxLDE2LDIxWlxcXCI+PC9wYXRoPjxwYXRoIGZpbGw9XFxcIm5vbmVcXFwiIGQ9XFxcIk0xNC44NzUsNWgyLjI1VjE1aC0yLjI1Wk0xNiwyMWExLjUsMS41LDAsMSwxLDEuNS0xLjVBMS41LDEuNSwwLDAsMSwxNiwyMVpcXFwiIGRhdGEtaWNvbi1wYXRoPVxcXCJpbm5lci1wYXRoXFxcIj48L3BhdGg+PC9zdmc+XCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcIjIwXCI6IHtcbiAgICAgICAgICAgICAgICBtZXRhZGF0YTogeyBcIm1vZHVsZU5hbWVcIjogXCJXYXJuaW5nQWx0SW52ZXJ0ZWRGaWxsZWQyMFwiLCBcImZpbGVwYXRoXCI6IFwid2FybmluZy0tYWx0LWludmVydGVkLS1maWxsZWQvMjAuanNcIiwgXCJkZXNjcmlwdG9yXCI6IHsgXCJlbGVtXCI6IFwic3ZnXCIsIFwiYXR0cnNcIjogeyBcInhtbG5zXCI6IFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiwgXCJ2aWV3Qm94XCI6IFwiMCAwIDMyIDMyXCIsIFwiZmlsbFwiOiBcImN1cnJlbnRDb2xvclwiLCBcIndpZHRoXCI6IDIwLCBcImhlaWdodFwiOiAyMCB9LCBcImNvbnRlbnRcIjogW3sgXCJlbGVtXCI6IFwicGF0aFwiLCBcImF0dHJzXCI6IHsgXCJkXCI6IFwiTTI5Ljg1OTQsMi40ODkzQTEsMSwwLDAsMCwyOSwySDNhMS4wMDE1LDEuMDAxNSwwLDAsMC0uODc5NCwxLjQ3ODVsMTMsMjUuMDM2NmExLjA0LDEuMDQsMCwwLDAsMS43NTgzLDBsMTMtMjUuMDM2NkExLjAwMzQsMS4wMDM0LDAsMCwwLDI5Ljg1OTQsMi40ODkzWk0xNC44NzUsNWgyLjI1VjE1aC0yLjI1Wk0xNiwyMWExLjUsMS41LDAsMSwxLDEuNS0xLjVBMS41LDEuNSwwLDAsMSwxNiwyMVpcIiB9IH0sIHsgXCJlbGVtXCI6IFwicGF0aFwiLCBcImF0dHJzXCI6IHsgXCJmaWxsXCI6IFwibm9uZVwiLCBcImRcIjogXCJNMTQuODc1LDVoMi4yNVYxNWgtMi4yNVpNMTYsMjFhMS41LDEuNSwwLDEsMSwxLjUtMS41QTEuNSwxLjUsMCwwLDEsMTYsMjFaXCIsIFwiZGF0YS1pY29uLXBhdGhcIjogXCJpbm5lci1wYXRoXCIgfSB9XSwgXCJuYW1lXCI6IFwid2FybmluZy0tYWx0LWludmVydGVkLS1maWxsZWRcIiwgXCJzaXplXCI6IDIwIH0sIFwic2l6ZVwiOiAyMCB9LFxuICAgICAgICAgICAgICAgIHN2ZzogXCI8c3ZnIGZvY3VzYWJsZT1cXFwiZmFsc2VcXFwiIHByZXNlcnZlQXNwZWN0UmF0aW89XFxcInhNaWRZTWlkIG1lZXRcXFwiIHhtbG5zPVxcXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1xcXCIgZmlsbD1cXFwiY3VycmVudENvbG9yXFxcIiB3aWR0aD1cXFwiMjBcXFwiIGhlaWdodD1cXFwiMjBcXFwiIHZpZXdCb3g9XFxcIjAgMCAzMiAzMlxcXCIgYXJpYS1oaWRkZW49XFxcInRydWVcXFwiPjxwYXRoIGQ9XFxcIk0yOS44NTk0LDIuNDg5M0ExLDEsMCwwLDAsMjksMkgzYTEuMDAxNSwxLjAwMTUsMCwwLDAtLjg3OTQsMS40Nzg1bDEzLDI1LjAzNjZhMS4wNCwxLjA0LDAsMCwwLDEuNzU4MywwbDEzLTI1LjAzNjZBMS4wMDM0LDEuMDAzNCwwLDAsMCwyOS44NTk0LDIuNDg5M1pNMTQuODc1LDVoMi4yNVYxNWgtMi4yNVpNMTYsMjFhMS41LDEuNSwwLDEsMSwxLjUtMS41QTEuNSwxLjUsMCwwLDEsMTYsMjFaXFxcIj48L3BhdGg+PHBhdGggZmlsbD1cXFwibm9uZVxcXCIgZD1cXFwiTTE0Ljg3NSw1aDIuMjVWMTVoLTIuMjVaTTE2LDIxYTEuNSwxLjUsMCwxLDEsMS41LTEuNUExLjUsMS41LDAsMCwxLDE2LDIxWlxcXCIgZGF0YS1pY29uLXBhdGg9XFxcImlubmVyLXBhdGhcXFwiPjwvcGF0aD48L3N2Zz5cIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFwiMTZcIjoge1xuICAgICAgICAgICAgICAgIG1ldGFkYXRhOiB7IFwibW9kdWxlTmFtZVwiOiBcIldhcm5pbmdBbHRJbnZlcnRlZEZpbGxlZDE2XCIsIFwiZmlsZXBhdGhcIjogXCJ3YXJuaW5nLS1hbHQtaW52ZXJ0ZWQtLWZpbGxlZC8xNi5qc1wiLCBcImRlc2NyaXB0b3JcIjogeyBcImVsZW1cIjogXCJzdmdcIiwgXCJhdHRyc1wiOiB7IFwieG1sbnNcIjogXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiLCBcInZpZXdCb3hcIjogXCIwIDAgMzIgMzJcIiwgXCJmaWxsXCI6IFwiY3VycmVudENvbG9yXCIsIFwid2lkdGhcIjogMTYsIFwiaGVpZ2h0XCI6IDE2IH0sIFwiY29udGVudFwiOiBbeyBcImVsZW1cIjogXCJwYXRoXCIsIFwiYXR0cnNcIjogeyBcImRcIjogXCJNMjkuODU5NCwyLjQ4OTNBMSwxLDAsMCwwLDI5LDJIM2ExLjAwMTUsMS4wMDE1LDAsMCwwLS44Nzk0LDEuNDc4NWwxMywyNS4wMzY2YTEuMDQsMS4wNCwwLDAsMCwxLjc1ODMsMGwxMy0yNS4wMzY2QTEuMDAzNCwxLjAwMzQsMCwwLDAsMjkuODU5NCwyLjQ4OTNaTTE0Ljg3NSw1aDIuMjVWMTVoLTIuMjVaTTE2LDIxYTEuNSwxLjUsMCwxLDEsMS41LTEuNUExLjUsMS41LDAsMCwxLDE2LDIxWlwiIH0gfSwgeyBcImVsZW1cIjogXCJwYXRoXCIsIFwiYXR0cnNcIjogeyBcImZpbGxcIjogXCJub25lXCIsIFwiZFwiOiBcIk0xNC44NzUsNWgyLjI1VjE1aC0yLjI1Wk0xNiwyMWExLjUsMS41LDAsMSwxLDEuNS0xLjVBMS41LDEuNSwwLDAsMSwxNiwyMVpcIiwgXCJkYXRhLWljb24tcGF0aFwiOiBcImlubmVyLXBhdGhcIiB9IH1dLCBcIm5hbWVcIjogXCJ3YXJuaW5nLS1hbHQtaW52ZXJ0ZWQtLWZpbGxlZFwiLCBcInNpemVcIjogMTYgfSwgXCJzaXplXCI6IDE2IH0sXG4gICAgICAgICAgICAgICAgc3ZnOiBcIjxzdmcgZm9jdXNhYmxlPVxcXCJmYWxzZVxcXCIgcHJlc2VydmVBc3BlY3RSYXRpbz1cXFwieE1pZFlNaWQgbWVldFxcXCIgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIiBmaWxsPVxcXCJjdXJyZW50Q29sb3JcXFwiIHdpZHRoPVxcXCIxNlxcXCIgaGVpZ2h0PVxcXCIxNlxcXCIgdmlld0JveD1cXFwiMCAwIDMyIDMyXFxcIiBhcmlhLWhpZGRlbj1cXFwidHJ1ZVxcXCI+PHBhdGggZD1cXFwiTTI5Ljg1OTQsMi40ODkzQTEsMSwwLDAsMCwyOSwySDNhMS4wMDE1LDEuMDAxNSwwLDAsMC0uODc5NCwxLjQ3ODVsMTMsMjUuMDM2NmExLjA0LDEuMDQsMCwwLDAsMS43NTgzLDBsMTMtMjUuMDM2NkExLjAwMzQsMS4wMDM0LDAsMCwwLDI5Ljg1OTQsMi40ODkzWk0xNC44NzUsNWgyLjI1VjE1aC0yLjI1Wk0xNiwyMWExLjUsMS41LDAsMSwxLDEuNS0xLjVBMS41LDEuNSwwLDAsMSwxNiwyMVpcXFwiPjwvcGF0aD48cGF0aCBmaWxsPVxcXCJub25lXFxcIiBkPVxcXCJNMTQuODc1LDVoMi4yNVYxNWgtMi4yNVpNMTYsMjFhMS41LDEuNSwwLDEsMSwxLjUtMS41QTEuNSwxLjUsMCwwLDEsMTYsMjFaXFxcIiBkYXRhLWljb24tcGF0aD1cXFwiaW5uZXItcGF0aFxcXCI+PC9wYXRoPjwvc3ZnPlwiXG4gICAgICAgICAgICB9LFxuICAgICAgICB9O1xuICAgIH1cbiAgICBXYXJuaW5nQWx0SW52ZXJ0ZWRGaWxsZWREaXJlY3RpdmVfMSA9IFdhcm5pbmdBbHRJbnZlcnRlZEZpbGxlZERpcmVjdGl2ZTtcbiAgICBXYXJuaW5nQWx0SW52ZXJ0ZWRGaWxsZWREaXJlY3RpdmUucHJvdG90eXBlLm5nQWZ0ZXJWaWV3SW5pdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHN2ZyA9IHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50O1xuICAgICAgICBzdmcuc2V0QXR0cmlidXRlKFwieG1sbnNcIiwgXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiKTtcbiAgICAgICAgdmFyIGljb24gPSB0aGlzLmljb25zW3RoaXMuc2l6ZV07XG4gICAgICAgIHZhciBkb21QYXJzZXIgPSBuZXcgRE9NUGFyc2VyKCk7XG4gICAgICAgIHZhciByYXdTVkcgPSBpY29uLnN2ZztcbiAgICAgICAgdmFyIHN2Z0VsZW1lbnQgPSBkb21QYXJzZXIucGFyc2VGcm9tU3RyaW5nKHJhd1NWRywgXCJpbWFnZS9zdmcreG1sXCIpLmRvY3VtZW50RWxlbWVudDtcbiAgICAgICAgdmFyIG5vZGUgPSBzdmdFbGVtZW50LmZpcnN0Q2hpbGQ7XG4gICAgICAgIHdoaWxlIChub2RlKSB7XG4gICAgICAgICAgICAvLyBpbXBvcnROb2RlIG1ha2VzIGEgY2xvbmUgb2YgdGhlIG5vZGVcbiAgICAgICAgICAgIC8vIHRoaXMgZW5zdXJlcyB3ZSBrZWVwIGxvb3Bpbmcgb3ZlciB0aGUgbm9kZXMgaW4gdGhlIHBhcnNlZCBkb2N1bWVudFxuICAgICAgICAgICAgc3ZnLmFwcGVuZENoaWxkKHN2Zy5vd25lckRvY3VtZW50LmltcG9ydE5vZGUobm9kZSwgdHJ1ZSkpO1xuICAgICAgICAgICAgbm9kZSA9IG5vZGUubmV4dFNpYmxpbmc7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGF0dHJpYnV0ZXMgPSBnZXRBdHRyaWJ1dGVzKHtcbiAgICAgICAgICAgIHdpZHRoOiBpY29uLm1ldGFkYXRhLmRlc2NyaXB0b3IuYXR0cnMuaGVpZ2h0LFxuICAgICAgICAgICAgaGVpZ2h0OiBpY29uLm1ldGFkYXRhLmRlc2NyaXB0b3IuYXR0cnMuaGVpZ2h0LFxuICAgICAgICAgICAgdmlld0JveDogaWNvbi5tZXRhZGF0YS5kZXNjcmlwdG9yLmF0dHJzLnZpZXdCb3gsXG4gICAgICAgICAgICB0aXRsZTogdGhpcy50aXRsZSxcbiAgICAgICAgICAgIFwiYXJpYS1sYWJlbFwiOiB0aGlzLmFyaWFMYWJlbCxcbiAgICAgICAgICAgIFwiYXJpYS1sYWJlbGxlZGJ5XCI6IHRoaXMuYXJpYUxhYmVsbGVkYnksXG4gICAgICAgICAgICBcImFyaWEtaGlkZGVuXCI6IHRoaXMuYXJpYUhpZGRlbixcbiAgICAgICAgICAgIGZvY3VzYWJsZTogdGhpcy5pc0ZvY3VzYWJsZS50b1N0cmluZygpXG4gICAgICAgIH0pO1xuICAgICAgICB2YXIgYXR0cktleXMgPSBPYmplY3Qua2V5cyhhdHRyaWJ1dGVzKTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhdHRyS2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIGtleSA9IGF0dHJLZXlzW2ldO1xuICAgICAgICAgICAgdmFyIHZhbHVlID0gYXR0cmlidXRlc1trZXldO1xuICAgICAgICAgICAgaWYgKGtleSA9PT0gXCJ0aXRsZVwiKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICBzdmcuc2V0QXR0cmlidXRlKGtleSwgdmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChhdHRyaWJ1dGVzLnRpdGxlKSB7XG4gICAgICAgICAgICB2YXIgdGl0bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidGl0bGVcIik7XG4gICAgICAgICAgICB0aXRsZS50ZXh0Q29udGVudCA9IGF0dHJpYnV0ZXMudGl0bGU7XG4gICAgICAgICAgICBXYXJuaW5nQWx0SW52ZXJ0ZWRGaWxsZWREaXJlY3RpdmVfMS50aXRsZUlkQ291bnRlcisrO1xuICAgICAgICAgICAgdGl0bGUuc2V0QXR0cmlidXRlKFwiaWRcIiwgXCJ3YXJuaW5nLWFsdC1pbnZlcnRlZC1maWxsZWQtXCIgKyBXYXJuaW5nQWx0SW52ZXJ0ZWRGaWxsZWREaXJlY3RpdmVfMS50aXRsZUlkQ291bnRlcik7XG4gICAgICAgICAgICBzdmcuYXBwZW5kQ2hpbGQodGl0bGUpO1xuICAgICAgICAgICAgc3ZnLnNldEF0dHJpYnV0ZShcImFyaWEtbGFiZWxsZWRieVwiLCBcIndhcm5pbmctYWx0LWludmVydGVkLWZpbGxlZC1cIiArIFdhcm5pbmdBbHRJbnZlcnRlZEZpbGxlZERpcmVjdGl2ZV8xLnRpdGxlSWRDb3VudGVyKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgdmFyIFdhcm5pbmdBbHRJbnZlcnRlZEZpbGxlZERpcmVjdGl2ZV8xO1xuICAgIFdhcm5pbmdBbHRJbnZlcnRlZEZpbGxlZERpcmVjdGl2ZS50aXRsZUlkQ291bnRlciA9IDA7XG4gICAgV2FybmluZ0FsdEludmVydGVkRmlsbGVkRGlyZWN0aXZlLmN0b3JQYXJhbWV0ZXJzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gW1xuICAgICAgICB7IHR5cGU6IEVsZW1lbnRSZWYgfVxuICAgIF07IH07XG4gICAgX19kZWNvcmF0ZShbXG4gICAgICAgIElucHV0KCksXG4gICAgICAgIF9fbWV0YWRhdGEoXCJkZXNpZ246dHlwZVwiLCBTdHJpbmcpXG4gICAgXSwgV2FybmluZ0FsdEludmVydGVkRmlsbGVkRGlyZWN0aXZlLnByb3RvdHlwZSwgXCJhcmlhTGFiZWxcIiwgdm9pZCAwKTtcbiAgICBfX2RlY29yYXRlKFtcbiAgICAgICAgSW5wdXQoKSxcbiAgICAgICAgX19tZXRhZGF0YShcImRlc2lnbjp0eXBlXCIsIFN0cmluZylcbiAgICBdLCBXYXJuaW5nQWx0SW52ZXJ0ZWRGaWxsZWREaXJlY3RpdmUucHJvdG90eXBlLCBcImFyaWFMYWJlbGxlZGJ5XCIsIHZvaWQgMCk7XG4gICAgX19kZWNvcmF0ZShbXG4gICAgICAgIElucHV0KCksXG4gICAgICAgIF9fbWV0YWRhdGEoXCJkZXNpZ246dHlwZVwiLCBCb29sZWFuKVxuICAgIF0sIFdhcm5pbmdBbHRJbnZlcnRlZEZpbGxlZERpcmVjdGl2ZS5wcm90b3R5cGUsIFwiYXJpYUhpZGRlblwiLCB2b2lkIDApO1xuICAgIF9fZGVjb3JhdGUoW1xuICAgICAgICBJbnB1dCgpLFxuICAgICAgICBfX21ldGFkYXRhKFwiZGVzaWduOnR5cGVcIiwgU3RyaW5nKVxuICAgIF0sIFdhcm5pbmdBbHRJbnZlcnRlZEZpbGxlZERpcmVjdGl2ZS5wcm90b3R5cGUsIFwidGl0bGVcIiwgdm9pZCAwKTtcbiAgICBfX2RlY29yYXRlKFtcbiAgICAgICAgSW5wdXQoKSxcbiAgICAgICAgX19tZXRhZGF0YShcImRlc2lnbjp0eXBlXCIsIEJvb2xlYW4pXG4gICAgXSwgV2FybmluZ0FsdEludmVydGVkRmlsbGVkRGlyZWN0aXZlLnByb3RvdHlwZSwgXCJpc0ZvY3VzYWJsZVwiLCB2b2lkIDApO1xuICAgIF9fZGVjb3JhdGUoW1xuICAgICAgICBJbnB1dCgpLFxuICAgICAgICBfX21ldGFkYXRhKFwiZGVzaWduOnR5cGVcIiwgU3RyaW5nKVxuICAgIF0sIFdhcm5pbmdBbHRJbnZlcnRlZEZpbGxlZERpcmVjdGl2ZS5wcm90b3R5cGUsIFwic2l6ZVwiLCB2b2lkIDApO1xuICAgIFdhcm5pbmdBbHRJbnZlcnRlZEZpbGxlZERpcmVjdGl2ZSA9IFdhcm5pbmdBbHRJbnZlcnRlZEZpbGxlZERpcmVjdGl2ZV8xID0gX19kZWNvcmF0ZShbXG4gICAgICAgIERpcmVjdGl2ZSh7XG4gICAgICAgICAgICBzZWxlY3RvcjogXCJbaWJtSWNvbldhcm5pbmdBbHRJbnZlcnRlZEZpbGxlZF1cIlxuICAgICAgICB9KSxcbiAgICAgICAgX19tZXRhZGF0YShcImRlc2lnbjpwYXJhbXR5cGVzXCIsIFtFbGVtZW50UmVmXSlcbiAgICBdLCBXYXJuaW5nQWx0SW52ZXJ0ZWRGaWxsZWREaXJlY3RpdmUpO1xuICAgIHJldHVybiBXYXJuaW5nQWx0SW52ZXJ0ZWRGaWxsZWREaXJlY3RpdmU7XG59KCkpO1xudmFyIFdhcm5pbmdBbHRJbnZlcnRlZEZpbGxlZE1vZHVsZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBXYXJuaW5nQWx0SW52ZXJ0ZWRGaWxsZWRNb2R1bGUoKSB7XG4gICAgfVxuICAgIFdhcm5pbmdBbHRJbnZlcnRlZEZpbGxlZE1vZHVsZSA9IF9fZGVjb3JhdGUoW1xuICAgICAgICBOZ01vZHVsZSh7XG4gICAgICAgICAgICBkZWNsYXJhdGlvbnM6IFtcbiAgICAgICAgICAgICAgICBXYXJuaW5nQWx0SW52ZXJ0ZWRGaWxsZWRDb21wb25lbnQsXG4gICAgICAgICAgICAgICAgV2FybmluZ0FsdEludmVydGVkRmlsbGVkRGlyZWN0aXZlLFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIGV4cG9ydHM6IFtcbiAgICAgICAgICAgICAgICBXYXJuaW5nQWx0SW52ZXJ0ZWRGaWxsZWRDb21wb25lbnQsXG4gICAgICAgICAgICAgICAgV2FybmluZ0FsdEludmVydGVkRmlsbGVkRGlyZWN0aXZlLFxuICAgICAgICAgICAgXVxuICAgICAgICB9KVxuICAgIF0sIFdhcm5pbmdBbHRJbnZlcnRlZEZpbGxlZE1vZHVsZSk7XG4gICAgcmV0dXJuIFdhcm5pbmdBbHRJbnZlcnRlZEZpbGxlZE1vZHVsZTtcbn0oKSk7XG5cbmV4cG9ydCB7IFdhcm5pbmdBbHRJbnZlcnRlZEZpbGxlZENvbXBvbmVudCwgV2FybmluZ0FsdEludmVydGVkRmlsbGVkRGlyZWN0aXZlLCBXYXJuaW5nQWx0SW52ZXJ0ZWRGaWxsZWRNb2R1bGUgfTtcbiJdfQ==