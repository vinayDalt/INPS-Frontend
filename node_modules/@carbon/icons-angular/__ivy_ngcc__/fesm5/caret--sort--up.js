import { __decorate, __metadata } from 'tslib';
import { Input, Component, ElementRef, Directive, NgModule } from '@angular/core';
import { getAttributes } from '@carbon/icon-helpers';

import * as ɵngcc0 from '@angular/core';
var CaretSortUpComponent = /** @class */ (function () {
    function CaretSortUpComponent() {
        this.focusable = false;
    }
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], CaretSortUpComponent.prototype, "ariaLabel", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], CaretSortUpComponent.prototype, "ariaLabelledby", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], CaretSortUpComponent.prototype, "ariaHidden", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], CaretSortUpComponent.prototype, "title", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], CaretSortUpComponent.prototype, "focusable", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], CaretSortUpComponent.prototype, "innerClass", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], CaretSortUpComponent.prototype, "size", void 0);
CaretSortUpComponent.ɵfac = function CaretSortUpComponent_Factory(t) { return new (t || CaretSortUpComponent)(); };
CaretSortUpComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: CaretSortUpComponent, selectors: [["ibm-icon-caret-sort-up"]], inputs: { focusable: "focusable", ariaLabel: "ariaLabel", ariaLabelledby: "ariaLabelledby", ariaHidden: "ariaHidden", title: "title", innerClass: "innerClass", size: "size" }, decls: 1, vars: 7, consts: [["ibmIconCaretSortUp", "", 3, "size", "ariaLabel", "ariaLabelledby", "ariaHidden", "title", "isFocusable"]], template: function CaretSortUpComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵnamespaceSVG();
        ɵngcc0.ɵɵelement(0, "svg", 0);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("size", ctx.size)("ariaLabel", ctx.ariaLabel)("ariaLabelledby", ctx.ariaLabelledby)("ariaHidden", ctx.ariaHidden)("title", ctx.title)("isFocusable", ctx.focusable);
        ɵngcc0.ɵɵattribute("class", ctx.innerClass);
    } }, directives: function () { return [CaretSortUpDirective]; }, encapsulation: 2 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CaretSortUpComponent, [{
        type: Component,
        args: [{
                selector: "ibm-icon-caret-sort-up",
                template: "\n    <svg\n      ibmIconCaretSortUp\n      [size]=\"size\"\n      [ariaLabel]=\"ariaLabel\"\n      [ariaLabelledby]=\"ariaLabelledby\"\n      [ariaHidden]=\"ariaHidden\"\n      [title]=\"title\"\n      [isFocusable]=\"focusable\"\n      [attr.class]=\"innerClass\">\n    </svg>\n  "
            }]
    }], function () { return []; }, { focusable: [{
            type: Input
        }], ariaLabel: [{
            type: Input
        }], ariaLabelledby: [{
            type: Input
        }], ariaHidden: [{
            type: Input
        }], title: [{
            type: Input
        }], innerClass: [{
            type: Input
        }], size: [{
            type: Input
        }] }); })();
    return CaretSortUpComponent;
}());
var CaretSortUpDirective = /** @class */ (function () {
    function CaretSortUpDirective(elementRef) {
        this.elementRef = elementRef;
        this.isFocusable = false;
        this.icons = {
            "32": {
                metadata: { "moduleName": "CaretSortUp32", "filepath": "caret--sort--up/32.js", "descriptor": { "elem": "svg", "attrs": { "xmlns": "http://www.w3.org/2000/svg", "viewBox": "0 0 32 32", "fill": "currentColor", "width": 32, "height": 32 }, "content": [{ "elem": "path", "attrs": { "d": "M8 8L16 0 24 8z" } }], "name": "caret--sort--up", "size": 32 }, "size": 32 },
                svg: "<svg focusable=\"false\" preserveAspectRatio=\"xMidYMid meet\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"currentColor\" width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" aria-hidden=\"true\"><path d=\"M8 8L16 0 24 8z\"></path></svg>"
            },
            "24": {
                metadata: { "moduleName": "CaretSortUp24", "filepath": "caret--sort--up/24.js", "descriptor": { "elem": "svg", "attrs": { "xmlns": "http://www.w3.org/2000/svg", "viewBox": "0 0 32 32", "fill": "currentColor", "width": 24, "height": 24 }, "content": [{ "elem": "path", "attrs": { "d": "M8 8L16 0 24 8z" } }], "name": "caret--sort--up", "size": 24 }, "size": 24 },
                svg: "<svg focusable=\"false\" preserveAspectRatio=\"xMidYMid meet\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"currentColor\" width=\"24\" height=\"24\" viewBox=\"0 0 32 32\" aria-hidden=\"true\"><path d=\"M8 8L16 0 24 8z\"></path></svg>"
            },
            "20": {
                metadata: { "moduleName": "CaretSortUp20", "filepath": "caret--sort--up/20.js", "descriptor": { "elem": "svg", "attrs": { "xmlns": "http://www.w3.org/2000/svg", "viewBox": "0 0 32 32", "fill": "currentColor", "width": 20, "height": 20 }, "content": [{ "elem": "path", "attrs": { "d": "M8 8L16 0 24 8z" } }], "name": "caret--sort--up", "size": 20 }, "size": 20 },
                svg: "<svg focusable=\"false\" preserveAspectRatio=\"xMidYMid meet\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"currentColor\" width=\"20\" height=\"20\" viewBox=\"0 0 32 32\" aria-hidden=\"true\"><path d=\"M8 8L16 0 24 8z\"></path></svg>"
            },
            "16": {
                metadata: { "moduleName": "CaretSortUp16", "filepath": "caret--sort--up/16.js", "descriptor": { "elem": "svg", "attrs": { "xmlns": "http://www.w3.org/2000/svg", "viewBox": "0 0 32 32", "fill": "currentColor", "width": 16, "height": 16 }, "content": [{ "elem": "path", "attrs": { "d": "M8 8L16 0 24 8z" } }], "name": "caret--sort--up", "size": 16 }, "size": 16 },
                svg: "<svg focusable=\"false\" preserveAspectRatio=\"xMidYMid meet\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"currentColor\" width=\"16\" height=\"16\" viewBox=\"0 0 32 32\" aria-hidden=\"true\"><path d=\"M8 8L16 0 24 8z\"></path></svg>"
            },
        };
    }
    CaretSortUpDirective_1 = CaretSortUpDirective;
    CaretSortUpDirective.prototype.ngAfterViewInit = function () {
        var svg = this.elementRef.nativeElement;
        svg.setAttribute("xmlns", "http://www.w3.org/2000/svg");
        var icon = this.icons[this.size];
        var domParser = new DOMParser();
        var rawSVG = icon.svg;
        var svgElement = domParser.parseFromString(rawSVG, "image/svg+xml").documentElement;
        var node = svgElement.firstChild;
        while (node) {
            // importNode makes a clone of the node
            // this ensures we keep looping over the nodes in the parsed document
            svg.appendChild(svg.ownerDocument.importNode(node, true));
            node = node.nextSibling;
        }
        var attributes = getAttributes({
            width: icon.metadata.descriptor.attrs.height,
            height: icon.metadata.descriptor.attrs.height,
            viewBox: icon.metadata.descriptor.attrs.viewBox,
            title: this.title,
            "aria-label": this.ariaLabel,
            "aria-labelledby": this.ariaLabelledby,
            "aria-hidden": this.ariaHidden,
            focusable: this.isFocusable.toString()
        });
        var attrKeys = Object.keys(attributes);
        for (var i = 0; i < attrKeys.length; i++) {
            var key = attrKeys[i];
            var value = attributes[key];
            if (key === "title") {
                continue;
            }
            if (value) {
                svg.setAttribute(key, value);
            }
        }
        if (attributes.title) {
            var title = document.createElement("title");
            title.textContent = attributes.title;
            CaretSortUpDirective_1.titleIdCounter++;
            title.setAttribute("id", "caret-sort-up-" + CaretSortUpDirective_1.titleIdCounter);
            svg.appendChild(title);
            svg.setAttribute("aria-labelledby", "caret-sort-up-" + CaretSortUpDirective_1.titleIdCounter);
        }
    };
    var CaretSortUpDirective_1;
    CaretSortUpDirective.titleIdCounter = 0;
    CaretSortUpDirective.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], CaretSortUpDirective.prototype, "ariaLabel", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], CaretSortUpDirective.prototype, "ariaLabelledby", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], CaretSortUpDirective.prototype, "ariaHidden", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], CaretSortUpDirective.prototype, "title", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], CaretSortUpDirective.prototype, "isFocusable", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], CaretSortUpDirective.prototype, "size", void 0);
    CaretSortUpDirective = CaretSortUpDirective_1 = __decorate([ __metadata("design:paramtypes", [ElementRef])
    ], CaretSortUpDirective);
CaretSortUpDirective.ɵfac = function CaretSortUpDirective_Factory(t) { return new (t || CaretSortUpDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
CaretSortUpDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CaretSortUpDirective, selectors: [["", "ibmIconCaretSortUp", ""]], inputs: { isFocusable: "isFocusable", ariaLabel: "ariaLabel", ariaLabelledby: "ariaLabelledby", ariaHidden: "ariaHidden", title: "title", size: "size" } });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CaretSortUpDirective, [{
        type: Directive,
        args: [{
                selector: "[ibmIconCaretSortUp]"
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, { isFocusable: [{
            type: Input
        }], ariaLabel: [{
            type: Input
        }], ariaLabelledby: [{
            type: Input
        }], ariaHidden: [{
            type: Input
        }], title: [{
            type: Input
        }], size: [{
            type: Input
        }] }); })();
    return CaretSortUpDirective;
}());
var CaretSortUpModule = /** @class */ (function () {
    function CaretSortUpModule() {
    }
CaretSortUpModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: CaretSortUpModule });
CaretSortUpModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function CaretSortUpModule_Factory(t) { return new (t || CaretSortUpModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(CaretSortUpModule, { declarations: [CaretSortUpComponent, CaretSortUpDirective], exports: [CaretSortUpComponent, CaretSortUpDirective] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CaretSortUpModule, [{
        type: NgModule,
        args: [{
                declarations: [
                    CaretSortUpComponent,
                    CaretSortUpDirective,
                ],
                exports: [
                    CaretSortUpComponent,
                    CaretSortUpDirective,
                ]
            }]
    }], function () { return []; }, null); })();
    return CaretSortUpModule;
}());

export { CaretSortUpComponent, CaretSortUpDirective, CaretSortUpModule };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,