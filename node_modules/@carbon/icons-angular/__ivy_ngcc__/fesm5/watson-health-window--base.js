import { __decorate, __metadata } from 'tslib';
import { Input, Component, ElementRef, Directive, NgModule } from '@angular/core';
import { getAttributes } from '@carbon/icon-helpers';

import * as ɵngcc0 from '@angular/core';
var WatsonHealthWindowBaseComponent = /** @class */ (function () {
    function WatsonHealthWindowBaseComponent() {
        this.focusable = false;
    }
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], WatsonHealthWindowBaseComponent.prototype, "ariaLabel", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], WatsonHealthWindowBaseComponent.prototype, "ariaLabelledby", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], WatsonHealthWindowBaseComponent.prototype, "ariaHidden", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], WatsonHealthWindowBaseComponent.prototype, "title", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], WatsonHealthWindowBaseComponent.prototype, "focusable", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], WatsonHealthWindowBaseComponent.prototype, "innerClass", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], WatsonHealthWindowBaseComponent.prototype, "size", void 0);
WatsonHealthWindowBaseComponent.ɵfac = function WatsonHealthWindowBaseComponent_Factory(t) { return new (t || WatsonHealthWindowBaseComponent)(); };
WatsonHealthWindowBaseComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: WatsonHealthWindowBaseComponent, selectors: [["ibm-icon-watson-health-window-base"]], inputs: { focusable: "focusable", ariaLabel: "ariaLabel", ariaLabelledby: "ariaLabelledby", ariaHidden: "ariaHidden", title: "title", innerClass: "innerClass", size: "size" }, decls: 1, vars: 7, consts: [["ibmIconWatsonHealthWindowBase", "", 3, "size", "ariaLabel", "ariaLabelledby", "ariaHidden", "title", "isFocusable"]], template: function WatsonHealthWindowBaseComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵnamespaceSVG();
        ɵngcc0.ɵɵelement(0, "svg", 0);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("size", ctx.size)("ariaLabel", ctx.ariaLabel)("ariaLabelledby", ctx.ariaLabelledby)("ariaHidden", ctx.ariaHidden)("title", ctx.title)("isFocusable", ctx.focusable);
        ɵngcc0.ɵɵattribute("class", ctx.innerClass);
    } }, directives: function () { return [WatsonHealthWindowBaseDirective]; }, encapsulation: 2 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(WatsonHealthWindowBaseComponent, [{
        type: Component,
        args: [{
                selector: "ibm-icon-watson-health-window-base",
                template: "\n    <svg\n      ibmIconWatsonHealthWindowBase\n      [size]=\"size\"\n      [ariaLabel]=\"ariaLabel\"\n      [ariaLabelledby]=\"ariaLabelledby\"\n      [ariaHidden]=\"ariaHidden\"\n      [title]=\"title\"\n      [isFocusable]=\"focusable\"\n      [attr.class]=\"innerClass\">\n    </svg>\n  "
            }]
    }], function () { return []; }, { focusable: [{
            type: Input
        }], ariaLabel: [{
            type: Input
        }], ariaLabelledby: [{
            type: Input
        }], ariaHidden: [{
            type: Input
        }], title: [{
            type: Input
        }], innerClass: [{
            type: Input
        }], size: [{
            type: Input
        }] }); })();
    return WatsonHealthWindowBaseComponent;
}());
var WatsonHealthWindowBaseDirective = /** @class */ (function () {
    function WatsonHealthWindowBaseDirective(elementRef) {
        this.elementRef = elementRef;
        this.isFocusable = false;
        this.icons = {
            "32": {
                metadata: { "moduleName": "WatsonHealthWindowBase32", "filepath": "watson-health/window--base/32.js", "descriptor": { "elem": "svg", "attrs": { "xmlns": "http://www.w3.org/2000/svg", "viewBox": "0 0 32 32", "fill": "currentColor", "width": 32, "height": 32 }, "content": [{ "elem": "path", "attrs": { "d": "M15 2H17V5H15zM25 13H28V15H25zM15 23H17V26H15zM4 13H7V15H4z" } }, { "elem": "path", "attrs": { "d": "M7.55 5.03H9.55V8.030000000000001H7.55z", "transform": "rotate(-45 8.56 6.544)" } }, { "elem": "path", "attrs": { "d": "M21.96 5.54H24.96V7.54H21.96z", "transform": "rotate(-45 23.469 6.539)" } }, { "elem": "path", "attrs": { "d": "M22.46 19.94H24.46V22.94H22.46z", "transform": "rotate(-45 23.462 21.442)" } }, { "elem": "path", "attrs": { "d": "M7.04 20.45H10.04V22.45H7.04z", "transform": "rotate(-45 8.554 21.447)" } }, { "elem": "path", "attrs": { "d": "M4 28H28V30H4zM16 20a6 6 0 10-6-6A6 6 0 0016 20zm0-10v8a4 4 0 010-8z" } }], "name": "window--base", "size": 32 }, "size": 32 },
                svg: "<svg focusable=\"false\" preserveAspectRatio=\"xMidYMid meet\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"currentColor\" width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" aria-hidden=\"true\"><path d=\"M15 2H17V5H15zM25 13H28V15H25zM15 23H17V26H15zM4 13H7V15H4z\"></path><path d=\"M7.55 5.03H9.55V8.030000000000001H7.55z\" transform=\"rotate(-45 8.56 6.544)\"></path><path d=\"M21.96 5.54H24.96V7.54H21.96z\" transform=\"rotate(-45 23.469 6.539)\"></path><path d=\"M22.46 19.94H24.46V22.94H22.46z\" transform=\"rotate(-45 23.462 21.442)\"></path><path d=\"M7.04 20.45H10.04V22.45H7.04z\" transform=\"rotate(-45 8.554 21.447)\"></path><path d=\"M4 28H28V30H4zM16 20a6 6 0 10-6-6A6 6 0 0016 20zm0-10v8a4 4 0 010-8z\"></path></svg>"
            },
            "24": {
                metadata: { "moduleName": "WatsonHealthWindowBase24", "filepath": "watson-health/window--base/24.js", "descriptor": { "elem": "svg", "attrs": { "xmlns": "http://www.w3.org/2000/svg", "viewBox": "0 0 32 32", "fill": "currentColor", "width": 24, "height": 24 }, "content": [{ "elem": "path", "attrs": { "d": "M15 2H17V5H15zM25 13H28V15H25zM15 23H17V26H15zM4 13H7V15H4z" } }, { "elem": "path", "attrs": { "d": "M7.55 5.03H9.55V8.030000000000001H7.55z", "transform": "rotate(-45 8.56 6.544)" } }, { "elem": "path", "attrs": { "d": "M21.96 5.54H24.96V7.54H21.96z", "transform": "rotate(-45 23.469 6.539)" } }, { "elem": "path", "attrs": { "d": "M22.46 19.94H24.46V22.94H22.46z", "transform": "rotate(-45 23.462 21.442)" } }, { "elem": "path", "attrs": { "d": "M7.04 20.45H10.04V22.45H7.04z", "transform": "rotate(-45 8.554 21.447)" } }, { "elem": "path", "attrs": { "d": "M4 28H28V30H4zM16 20a6 6 0 10-6-6A6 6 0 0016 20zm0-10v8a4 4 0 010-8z" } }], "name": "window--base", "size": 24 }, "size": 24 },
                svg: "<svg focusable=\"false\" preserveAspectRatio=\"xMidYMid meet\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"currentColor\" width=\"24\" height=\"24\" viewBox=\"0 0 32 32\" aria-hidden=\"true\"><path d=\"M15 2H17V5H15zM25 13H28V15H25zM15 23H17V26H15zM4 13H7V15H4z\"></path><path d=\"M7.55 5.03H9.55V8.030000000000001H7.55z\" transform=\"rotate(-45 8.56 6.544)\"></path><path d=\"M21.96 5.54H24.96V7.54H21.96z\" transform=\"rotate(-45 23.469 6.539)\"></path><path d=\"M22.46 19.94H24.46V22.94H22.46z\" transform=\"rotate(-45 23.462 21.442)\"></path><path d=\"M7.04 20.45H10.04V22.45H7.04z\" transform=\"rotate(-45 8.554 21.447)\"></path><path d=\"M4 28H28V30H4zM16 20a6 6 0 10-6-6A6 6 0 0016 20zm0-10v8a4 4 0 010-8z\"></path></svg>"
            },
            "20": {
                metadata: { "moduleName": "WatsonHealthWindowBase20", "filepath": "watson-health/window--base/20.js", "descriptor": { "elem": "svg", "attrs": { "xmlns": "http://www.w3.org/2000/svg", "viewBox": "0 0 32 32", "fill": "currentColor", "width": 20, "height": 20 }, "content": [{ "elem": "path", "attrs": { "d": "M15 2H17V5H15zM25 13H28V15H25zM15 23H17V26H15zM4 13H7V15H4z" } }, { "elem": "path", "attrs": { "d": "M7.55 5.03H9.55V8.030000000000001H7.55z", "transform": "rotate(-45 8.56 6.544)" } }, { "elem": "path", "attrs": { "d": "M21.96 5.54H24.96V7.54H21.96z", "transform": "rotate(-45 23.469 6.539)" } }, { "elem": "path", "attrs": { "d": "M22.46 19.94H24.46V22.94H22.46z", "transform": "rotate(-45 23.462 21.442)" } }, { "elem": "path", "attrs": { "d": "M7.04 20.45H10.04V22.45H7.04z", "transform": "rotate(-45 8.554 21.447)" } }, { "elem": "path", "attrs": { "d": "M4 28H28V30H4zM16 20a6 6 0 10-6-6A6 6 0 0016 20zm0-10v8a4 4 0 010-8z" } }], "name": "window--base", "size": 20 }, "size": 20 },
                svg: "<svg focusable=\"false\" preserveAspectRatio=\"xMidYMid meet\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"currentColor\" width=\"20\" height=\"20\" viewBox=\"0 0 32 32\" aria-hidden=\"true\"><path d=\"M15 2H17V5H15zM25 13H28V15H25zM15 23H17V26H15zM4 13H7V15H4z\"></path><path d=\"M7.55 5.03H9.55V8.030000000000001H7.55z\" transform=\"rotate(-45 8.56 6.544)\"></path><path d=\"M21.96 5.54H24.96V7.54H21.96z\" transform=\"rotate(-45 23.469 6.539)\"></path><path d=\"M22.46 19.94H24.46V22.94H22.46z\" transform=\"rotate(-45 23.462 21.442)\"></path><path d=\"M7.04 20.45H10.04V22.45H7.04z\" transform=\"rotate(-45 8.554 21.447)\"></path><path d=\"M4 28H28V30H4zM16 20a6 6 0 10-6-6A6 6 0 0016 20zm0-10v8a4 4 0 010-8z\"></path></svg>"
            },
            "16": {
                metadata: { "moduleName": "WatsonHealthWindowBase16", "filepath": "watson-health/window--base/16.js", "descriptor": { "elem": "svg", "attrs": { "xmlns": "http://www.w3.org/2000/svg", "viewBox": "0 0 32 32", "fill": "currentColor", "width": 16, "height": 16 }, "content": [{ "elem": "path", "attrs": { "d": "M15 2H17V5H15zM25 13H28V15H25zM15 23H17V26H15zM4 13H7V15H4z" } }, { "elem": "path", "attrs": { "d": "M7.55 5.03H9.55V8.030000000000001H7.55z", "transform": "rotate(-45 8.56 6.544)" } }, { "elem": "path", "attrs": { "d": "M21.96 5.54H24.96V7.54H21.96z", "transform": "rotate(-45 23.469 6.539)" } }, { "elem": "path", "attrs": { "d": "M22.46 19.94H24.46V22.94H22.46z", "transform": "rotate(-45 23.462 21.442)" } }, { "elem": "path", "attrs": { "d": "M7.04 20.45H10.04V22.45H7.04z", "transform": "rotate(-45 8.554 21.447)" } }, { "elem": "path", "attrs": { "d": "M4 28H28V30H4zM16 20a6 6 0 10-6-6A6 6 0 0016 20zm0-10v8a4 4 0 010-8z" } }], "name": "window--base", "size": 16 }, "size": 16 },
                svg: "<svg focusable=\"false\" preserveAspectRatio=\"xMidYMid meet\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"currentColor\" width=\"16\" height=\"16\" viewBox=\"0 0 32 32\" aria-hidden=\"true\"><path d=\"M15 2H17V5H15zM25 13H28V15H25zM15 23H17V26H15zM4 13H7V15H4z\"></path><path d=\"M7.55 5.03H9.55V8.030000000000001H7.55z\" transform=\"rotate(-45 8.56 6.544)\"></path><path d=\"M21.96 5.54H24.96V7.54H21.96z\" transform=\"rotate(-45 23.469 6.539)\"></path><path d=\"M22.46 19.94H24.46V22.94H22.46z\" transform=\"rotate(-45 23.462 21.442)\"></path><path d=\"M7.04 20.45H10.04V22.45H7.04z\" transform=\"rotate(-45 8.554 21.447)\"></path><path d=\"M4 28H28V30H4zM16 20a6 6 0 10-6-6A6 6 0 0016 20zm0-10v8a4 4 0 010-8z\"></path></svg>"
            },
        };
    }
    WatsonHealthWindowBaseDirective_1 = WatsonHealthWindowBaseDirective;
    WatsonHealthWindowBaseDirective.prototype.ngAfterViewInit = function () {
        var svg = this.elementRef.nativeElement;
        svg.setAttribute("xmlns", "http://www.w3.org/2000/svg");
        var icon = this.icons[this.size];
        var domParser = new DOMParser();
        var rawSVG = icon.svg;
        var svgElement = domParser.parseFromString(rawSVG, "image/svg+xml").documentElement;
        var node = svgElement.firstChild;
        while (node) {
            // importNode makes a clone of the node
            // this ensures we keep looping over the nodes in the parsed document
            svg.appendChild(svg.ownerDocument.importNode(node, true));
            node = node.nextSibling;
        }
        var attributes = getAttributes({
            width: icon.metadata.descriptor.attrs.height,
            height: icon.metadata.descriptor.attrs.height,
            viewBox: icon.metadata.descriptor.attrs.viewBox,
            title: this.title,
            "aria-label": this.ariaLabel,
            "aria-labelledby": this.ariaLabelledby,
            "aria-hidden": this.ariaHidden,
            focusable: this.isFocusable.toString()
        });
        var attrKeys = Object.keys(attributes);
        for (var i = 0; i < attrKeys.length; i++) {
            var key = attrKeys[i];
            var value = attributes[key];
            if (key === "title") {
                continue;
            }
            if (value) {
                svg.setAttribute(key, value);
            }
        }
        if (attributes.title) {
            var title = document.createElement("title");
            title.textContent = attributes.title;
            WatsonHealthWindowBaseDirective_1.titleIdCounter++;
            title.setAttribute("id", "watson-health-window-base-" + WatsonHealthWindowBaseDirective_1.titleIdCounter);
            svg.appendChild(title);
            svg.setAttribute("aria-labelledby", "watson-health-window-base-" + WatsonHealthWindowBaseDirective_1.titleIdCounter);
        }
    };
    var WatsonHealthWindowBaseDirective_1;
    WatsonHealthWindowBaseDirective.titleIdCounter = 0;
    WatsonHealthWindowBaseDirective.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], WatsonHealthWindowBaseDirective.prototype, "ariaLabel", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], WatsonHealthWindowBaseDirective.prototype, "ariaLabelledby", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], WatsonHealthWindowBaseDirective.prototype, "ariaHidden", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], WatsonHealthWindowBaseDirective.prototype, "title", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], WatsonHealthWindowBaseDirective.prototype, "isFocusable", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], WatsonHealthWindowBaseDirective.prototype, "size", void 0);
    WatsonHealthWindowBaseDirective = WatsonHealthWindowBaseDirective_1 = __decorate([ __metadata("design:paramtypes", [ElementRef])
    ], WatsonHealthWindowBaseDirective);
WatsonHealthWindowBaseDirective.ɵfac = function WatsonHealthWindowBaseDirective_Factory(t) { return new (t || WatsonHealthWindowBaseDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
WatsonHealthWindowBaseDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: WatsonHealthWindowBaseDirective, selectors: [["", "ibmIconWatsonHealthWindowBase", ""]], inputs: { isFocusable: "isFocusable", ariaLabel: "ariaLabel", ariaLabelledby: "ariaLabelledby", ariaHidden: "ariaHidden", title: "title", size: "size" } });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(WatsonHealthWindowBaseDirective, [{
        type: Directive,
        args: [{
                selector: "[ibmIconWatsonHealthWindowBase]"
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, { isFocusable: [{
            type: Input
        }], ariaLabel: [{
            type: Input
        }], ariaLabelledby: [{
            type: Input
        }], ariaHidden: [{
            type: Input
        }], title: [{
            type: Input
        }], size: [{
            type: Input
        }] }); })();
    return WatsonHealthWindowBaseDirective;
}());
var WatsonHealthWindowBaseModule = /** @class */ (function () {
    function WatsonHealthWindowBaseModule() {
    }
WatsonHealthWindowBaseModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: WatsonHealthWindowBaseModule });
WatsonHealthWindowBaseModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function WatsonHealthWindowBaseModule_Factory(t) { return new (t || WatsonHealthWindowBaseModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(WatsonHealthWindowBaseModule, { declarations: [WatsonHealthWindowBaseComponent, WatsonHealthWindowBaseDirective], exports: [WatsonHealthWindowBaseComponent, WatsonHealthWindowBaseDirective] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(WatsonHealthWindowBaseModule, [{
        type: NgModule,
        args: [{
                declarations: [
                    WatsonHealthWindowBaseComponent,
                    WatsonHealthWindowBaseDirective,
                ],
                exports: [
                    WatsonHealthWindowBaseComponent,
                    WatsonHealthWindowBaseDirective,
                ]
            }]
    }], function () { return []; }, null); })();
    return WatsonHealthWindowBaseModule;
}());

export { WatsonHealthWindowBaseComponent, WatsonHealthWindowBaseDirective, WatsonHealthWindowBaseModule };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2F0c29uLWhlYWx0aC13aW5kb3ctLWJhc2UuanMiLCJzb3VyY2VzIjpbIndhdHNvbi1oZWFsdGgtd2luZG93LS1iYXNlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O29CQU13QztBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzRkFJTztBQUNQOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztvQkFBd0M7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7Ozs7OztnREFZcUM7QUFDckM7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBfX2RlY29yYXRlLCBfX21ldGFkYXRhIH0gZnJvbSAndHNsaWInO1xuaW1wb3J0IHsgSW5wdXQsIENvbXBvbmVudCwgRWxlbWVudFJlZiwgRGlyZWN0aXZlLCBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgZ2V0QXR0cmlidXRlcyB9IGZyb20gJ0BjYXJib24vaWNvbi1oZWxwZXJzJztcblxudmFyIFdhdHNvbkhlYWx0aFdpbmRvd0Jhc2VDb21wb25lbnQgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gV2F0c29uSGVhbHRoV2luZG93QmFzZUNvbXBvbmVudCgpIHtcbiAgICAgICAgdGhpcy5mb2N1c2FibGUgPSBmYWxzZTtcbiAgICB9XG4gICAgX19kZWNvcmF0ZShbXG4gICAgICAgIElucHV0KCksXG4gICAgICAgIF9fbWV0YWRhdGEoXCJkZXNpZ246dHlwZVwiLCBTdHJpbmcpXG4gICAgXSwgV2F0c29uSGVhbHRoV2luZG93QmFzZUNvbXBvbmVudC5wcm90b3R5cGUsIFwiYXJpYUxhYmVsXCIsIHZvaWQgMCk7XG4gICAgX19kZWNvcmF0ZShbXG4gICAgICAgIElucHV0KCksXG4gICAgICAgIF9fbWV0YWRhdGEoXCJkZXNpZ246dHlwZVwiLCBTdHJpbmcpXG4gICAgXSwgV2F0c29uSGVhbHRoV2luZG93QmFzZUNvbXBvbmVudC5wcm90b3R5cGUsIFwiYXJpYUxhYmVsbGVkYnlcIiwgdm9pZCAwKTtcbiAgICBfX2RlY29yYXRlKFtcbiAgICAgICAgSW5wdXQoKSxcbiAgICAgICAgX19tZXRhZGF0YShcImRlc2lnbjp0eXBlXCIsIEJvb2xlYW4pXG4gICAgXSwgV2F0c29uSGVhbHRoV2luZG93QmFzZUNvbXBvbmVudC5wcm90b3R5cGUsIFwiYXJpYUhpZGRlblwiLCB2b2lkIDApO1xuICAgIF9fZGVjb3JhdGUoW1xuICAgICAgICBJbnB1dCgpLFxuICAgICAgICBfX21ldGFkYXRhKFwiZGVzaWduOnR5cGVcIiwgU3RyaW5nKVxuICAgIF0sIFdhdHNvbkhlYWx0aFdpbmRvd0Jhc2VDb21wb25lbnQucHJvdG90eXBlLCBcInRpdGxlXCIsIHZvaWQgMCk7XG4gICAgX19kZWNvcmF0ZShbXG4gICAgICAgIElucHV0KCksXG4gICAgICAgIF9fbWV0YWRhdGEoXCJkZXNpZ246dHlwZVwiLCBCb29sZWFuKVxuICAgIF0sIFdhdHNvbkhlYWx0aFdpbmRvd0Jhc2VDb21wb25lbnQucHJvdG90eXBlLCBcImZvY3VzYWJsZVwiLCB2b2lkIDApO1xuICAgIF9fZGVjb3JhdGUoW1xuICAgICAgICBJbnB1dCgpLFxuICAgICAgICBfX21ldGFkYXRhKFwiZGVzaWduOnR5cGVcIiwgU3RyaW5nKVxuICAgIF0sIFdhdHNvbkhlYWx0aFdpbmRvd0Jhc2VDb21wb25lbnQucHJvdG90eXBlLCBcImlubmVyQ2xhc3NcIiwgdm9pZCAwKTtcbiAgICBfX2RlY29yYXRlKFtcbiAgICAgICAgSW5wdXQoKSxcbiAgICAgICAgX19tZXRhZGF0YShcImRlc2lnbjp0eXBlXCIsIFN0cmluZylcbiAgICBdLCBXYXRzb25IZWFsdGhXaW5kb3dCYXNlQ29tcG9uZW50LnByb3RvdHlwZSwgXCJzaXplXCIsIHZvaWQgMCk7XG4gICAgV2F0c29uSGVhbHRoV2luZG93QmFzZUNvbXBvbmVudCA9IF9fZGVjb3JhdGUoW1xuICAgICAgICBDb21wb25lbnQoe1xuICAgICAgICAgICAgc2VsZWN0b3I6IFwiaWJtLWljb24td2F0c29uLWhlYWx0aC13aW5kb3ctYmFzZVwiLFxuICAgICAgICAgICAgdGVtcGxhdGU6IFwiXFxuICAgIDxzdmdcXG4gICAgICBpYm1JY29uV2F0c29uSGVhbHRoV2luZG93QmFzZVxcbiAgICAgIFtzaXplXT1cXFwic2l6ZVxcXCJcXG4gICAgICBbYXJpYUxhYmVsXT1cXFwiYXJpYUxhYmVsXFxcIlxcbiAgICAgIFthcmlhTGFiZWxsZWRieV09XFxcImFyaWFMYWJlbGxlZGJ5XFxcIlxcbiAgICAgIFthcmlhSGlkZGVuXT1cXFwiYXJpYUhpZGRlblxcXCJcXG4gICAgICBbdGl0bGVdPVxcXCJ0aXRsZVxcXCJcXG4gICAgICBbaXNGb2N1c2FibGVdPVxcXCJmb2N1c2FibGVcXFwiXFxuICAgICAgW2F0dHIuY2xhc3NdPVxcXCJpbm5lckNsYXNzXFxcIj5cXG4gICAgPC9zdmc+XFxuICBcIlxuICAgICAgICB9KVxuICAgIF0sIFdhdHNvbkhlYWx0aFdpbmRvd0Jhc2VDb21wb25lbnQpO1xuICAgIHJldHVybiBXYXRzb25IZWFsdGhXaW5kb3dCYXNlQ29tcG9uZW50O1xufSgpKTtcbnZhciBXYXRzb25IZWFsdGhXaW5kb3dCYXNlRGlyZWN0aXZlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFdhdHNvbkhlYWx0aFdpbmRvd0Jhc2VEaXJlY3RpdmUoZWxlbWVudFJlZikge1xuICAgICAgICB0aGlzLmVsZW1lbnRSZWYgPSBlbGVtZW50UmVmO1xuICAgICAgICB0aGlzLmlzRm9jdXNhYmxlID0gZmFsc2U7XG4gICAgICAgIHRoaXMuaWNvbnMgPSB7XG4gICAgICAgICAgICBcIjMyXCI6IHtcbiAgICAgICAgICAgICAgICBtZXRhZGF0YTogeyBcIm1vZHVsZU5hbWVcIjogXCJXYXRzb25IZWFsdGhXaW5kb3dCYXNlMzJcIiwgXCJmaWxlcGF0aFwiOiBcIndhdHNvbi1oZWFsdGgvd2luZG93LS1iYXNlLzMyLmpzXCIsIFwiZGVzY3JpcHRvclwiOiB7IFwiZWxlbVwiOiBcInN2Z1wiLCBcImF0dHJzXCI6IHsgXCJ4bWxuc1wiOiBcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIsIFwidmlld0JveFwiOiBcIjAgMCAzMiAzMlwiLCBcImZpbGxcIjogXCJjdXJyZW50Q29sb3JcIiwgXCJ3aWR0aFwiOiAzMiwgXCJoZWlnaHRcIjogMzIgfSwgXCJjb250ZW50XCI6IFt7IFwiZWxlbVwiOiBcInBhdGhcIiwgXCJhdHRyc1wiOiB7IFwiZFwiOiBcIk0xNSAySDE3VjVIMTV6TTI1IDEzSDI4VjE1SDI1ek0xNSAyM0gxN1YyNkgxNXpNNCAxM0g3VjE1SDR6XCIgfSB9LCB7IFwiZWxlbVwiOiBcInBhdGhcIiwgXCJhdHRyc1wiOiB7IFwiZFwiOiBcIk03LjU1IDUuMDNIOS41NVY4LjAzMDAwMDAwMDAwMDAwMUg3LjU1elwiLCBcInRyYW5zZm9ybVwiOiBcInJvdGF0ZSgtNDUgOC41NiA2LjU0NClcIiB9IH0sIHsgXCJlbGVtXCI6IFwicGF0aFwiLCBcImF0dHJzXCI6IHsgXCJkXCI6IFwiTTIxLjk2IDUuNTRIMjQuOTZWNy41NEgyMS45NnpcIiwgXCJ0cmFuc2Zvcm1cIjogXCJyb3RhdGUoLTQ1IDIzLjQ2OSA2LjUzOSlcIiB9IH0sIHsgXCJlbGVtXCI6IFwicGF0aFwiLCBcImF0dHJzXCI6IHsgXCJkXCI6IFwiTTIyLjQ2IDE5Ljk0SDI0LjQ2VjIyLjk0SDIyLjQ2elwiLCBcInRyYW5zZm9ybVwiOiBcInJvdGF0ZSgtNDUgMjMuNDYyIDIxLjQ0MilcIiB9IH0sIHsgXCJlbGVtXCI6IFwicGF0aFwiLCBcImF0dHJzXCI6IHsgXCJkXCI6IFwiTTcuMDQgMjAuNDVIMTAuMDRWMjIuNDVINy4wNHpcIiwgXCJ0cmFuc2Zvcm1cIjogXCJyb3RhdGUoLTQ1IDguNTU0IDIxLjQ0NylcIiB9IH0sIHsgXCJlbGVtXCI6IFwicGF0aFwiLCBcImF0dHJzXCI6IHsgXCJkXCI6IFwiTTQgMjhIMjhWMzBINHpNMTYgMjBhNiA2IDAgMTAtNi02QTYgNiAwIDAwMTYgMjB6bTAtMTB2OGE0IDQgMCAwMTAtOHpcIiB9IH1dLCBcIm5hbWVcIjogXCJ3aW5kb3ctLWJhc2VcIiwgXCJzaXplXCI6IDMyIH0sIFwic2l6ZVwiOiAzMiB9LFxuICAgICAgICAgICAgICAgIHN2ZzogXCI8c3ZnIGZvY3VzYWJsZT1cXFwiZmFsc2VcXFwiIHByZXNlcnZlQXNwZWN0UmF0aW89XFxcInhNaWRZTWlkIG1lZXRcXFwiIHhtbG5zPVxcXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1xcXCIgZmlsbD1cXFwiY3VycmVudENvbG9yXFxcIiB3aWR0aD1cXFwiMzJcXFwiIGhlaWdodD1cXFwiMzJcXFwiIHZpZXdCb3g9XFxcIjAgMCAzMiAzMlxcXCIgYXJpYS1oaWRkZW49XFxcInRydWVcXFwiPjxwYXRoIGQ9XFxcIk0xNSAySDE3VjVIMTV6TTI1IDEzSDI4VjE1SDI1ek0xNSAyM0gxN1YyNkgxNXpNNCAxM0g3VjE1SDR6XFxcIj48L3BhdGg+PHBhdGggZD1cXFwiTTcuNTUgNS4wM0g5LjU1VjguMDMwMDAwMDAwMDAwMDAxSDcuNTV6XFxcIiB0cmFuc2Zvcm09XFxcInJvdGF0ZSgtNDUgOC41NiA2LjU0NClcXFwiPjwvcGF0aD48cGF0aCBkPVxcXCJNMjEuOTYgNS41NEgyNC45NlY3LjU0SDIxLjk2elxcXCIgdHJhbnNmb3JtPVxcXCJyb3RhdGUoLTQ1IDIzLjQ2OSA2LjUzOSlcXFwiPjwvcGF0aD48cGF0aCBkPVxcXCJNMjIuNDYgMTkuOTRIMjQuNDZWMjIuOTRIMjIuNDZ6XFxcIiB0cmFuc2Zvcm09XFxcInJvdGF0ZSgtNDUgMjMuNDYyIDIxLjQ0MilcXFwiPjwvcGF0aD48cGF0aCBkPVxcXCJNNy4wNCAyMC40NUgxMC4wNFYyMi40NUg3LjA0elxcXCIgdHJhbnNmb3JtPVxcXCJyb3RhdGUoLTQ1IDguNTU0IDIxLjQ0NylcXFwiPjwvcGF0aD48cGF0aCBkPVxcXCJNNCAyOEgyOFYzMEg0ek0xNiAyMGE2IDYgMCAxMC02LTZBNiA2IDAgMDAxNiAyMHptMC0xMHY4YTQgNCAwIDAxMC04elxcXCI+PC9wYXRoPjwvc3ZnPlwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCIyNFwiOiB7XG4gICAgICAgICAgICAgICAgbWV0YWRhdGE6IHsgXCJtb2R1bGVOYW1lXCI6IFwiV2F0c29uSGVhbHRoV2luZG93QmFzZTI0XCIsIFwiZmlsZXBhdGhcIjogXCJ3YXRzb24taGVhbHRoL3dpbmRvdy0tYmFzZS8yNC5qc1wiLCBcImRlc2NyaXB0b3JcIjogeyBcImVsZW1cIjogXCJzdmdcIiwgXCJhdHRyc1wiOiB7IFwieG1sbnNcIjogXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiLCBcInZpZXdCb3hcIjogXCIwIDAgMzIgMzJcIiwgXCJmaWxsXCI6IFwiY3VycmVudENvbG9yXCIsIFwid2lkdGhcIjogMjQsIFwiaGVpZ2h0XCI6IDI0IH0sIFwiY29udGVudFwiOiBbeyBcImVsZW1cIjogXCJwYXRoXCIsIFwiYXR0cnNcIjogeyBcImRcIjogXCJNMTUgMkgxN1Y1SDE1ek0yNSAxM0gyOFYxNUgyNXpNMTUgMjNIMTdWMjZIMTV6TTQgMTNIN1YxNUg0elwiIH0gfSwgeyBcImVsZW1cIjogXCJwYXRoXCIsIFwiYXR0cnNcIjogeyBcImRcIjogXCJNNy41NSA1LjAzSDkuNTVWOC4wMzAwMDAwMDAwMDAwMDFINy41NXpcIiwgXCJ0cmFuc2Zvcm1cIjogXCJyb3RhdGUoLTQ1IDguNTYgNi41NDQpXCIgfSB9LCB7IFwiZWxlbVwiOiBcInBhdGhcIiwgXCJhdHRyc1wiOiB7IFwiZFwiOiBcIk0yMS45NiA1LjU0SDI0Ljk2VjcuNTRIMjEuOTZ6XCIsIFwidHJhbnNmb3JtXCI6IFwicm90YXRlKC00NSAyMy40NjkgNi41MzkpXCIgfSB9LCB7IFwiZWxlbVwiOiBcInBhdGhcIiwgXCJhdHRyc1wiOiB7IFwiZFwiOiBcIk0yMi40NiAxOS45NEgyNC40NlYyMi45NEgyMi40NnpcIiwgXCJ0cmFuc2Zvcm1cIjogXCJyb3RhdGUoLTQ1IDIzLjQ2MiAyMS40NDIpXCIgfSB9LCB7IFwiZWxlbVwiOiBcInBhdGhcIiwgXCJhdHRyc1wiOiB7IFwiZFwiOiBcIk03LjA0IDIwLjQ1SDEwLjA0VjIyLjQ1SDcuMDR6XCIsIFwidHJhbnNmb3JtXCI6IFwicm90YXRlKC00NSA4LjU1NCAyMS40NDcpXCIgfSB9LCB7IFwiZWxlbVwiOiBcInBhdGhcIiwgXCJhdHRyc1wiOiB7IFwiZFwiOiBcIk00IDI4SDI4VjMwSDR6TTE2IDIwYTYgNiAwIDEwLTYtNkE2IDYgMCAwMDE2IDIwem0wLTEwdjhhNCA0IDAgMDEwLTh6XCIgfSB9XSwgXCJuYW1lXCI6IFwid2luZG93LS1iYXNlXCIsIFwic2l6ZVwiOiAyNCB9LCBcInNpemVcIjogMjQgfSxcbiAgICAgICAgICAgICAgICBzdmc6IFwiPHN2ZyBmb2N1c2FibGU9XFxcImZhbHNlXFxcIiBwcmVzZXJ2ZUFzcGVjdFJhdGlvPVxcXCJ4TWlkWU1pZCBtZWV0XFxcIiB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiIGZpbGw9XFxcImN1cnJlbnRDb2xvclxcXCIgd2lkdGg9XFxcIjI0XFxcIiBoZWlnaHQ9XFxcIjI0XFxcIiB2aWV3Qm94PVxcXCIwIDAgMzIgMzJcXFwiIGFyaWEtaGlkZGVuPVxcXCJ0cnVlXFxcIj48cGF0aCBkPVxcXCJNMTUgMkgxN1Y1SDE1ek0yNSAxM0gyOFYxNUgyNXpNMTUgMjNIMTdWMjZIMTV6TTQgMTNIN1YxNUg0elxcXCI+PC9wYXRoPjxwYXRoIGQ9XFxcIk03LjU1IDUuMDNIOS41NVY4LjAzMDAwMDAwMDAwMDAwMUg3LjU1elxcXCIgdHJhbnNmb3JtPVxcXCJyb3RhdGUoLTQ1IDguNTYgNi41NDQpXFxcIj48L3BhdGg+PHBhdGggZD1cXFwiTTIxLjk2IDUuNTRIMjQuOTZWNy41NEgyMS45NnpcXFwiIHRyYW5zZm9ybT1cXFwicm90YXRlKC00NSAyMy40NjkgNi41MzkpXFxcIj48L3BhdGg+PHBhdGggZD1cXFwiTTIyLjQ2IDE5Ljk0SDI0LjQ2VjIyLjk0SDIyLjQ2elxcXCIgdHJhbnNmb3JtPVxcXCJyb3RhdGUoLTQ1IDIzLjQ2MiAyMS40NDIpXFxcIj48L3BhdGg+PHBhdGggZD1cXFwiTTcuMDQgMjAuNDVIMTAuMDRWMjIuNDVINy4wNHpcXFwiIHRyYW5zZm9ybT1cXFwicm90YXRlKC00NSA4LjU1NCAyMS40NDcpXFxcIj48L3BhdGg+PHBhdGggZD1cXFwiTTQgMjhIMjhWMzBINHpNMTYgMjBhNiA2IDAgMTAtNi02QTYgNiAwIDAwMTYgMjB6bTAtMTB2OGE0IDQgMCAwMTAtOHpcXFwiPjwvcGF0aD48L3N2Zz5cIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFwiMjBcIjoge1xuICAgICAgICAgICAgICAgIG1ldGFkYXRhOiB7IFwibW9kdWxlTmFtZVwiOiBcIldhdHNvbkhlYWx0aFdpbmRvd0Jhc2UyMFwiLCBcImZpbGVwYXRoXCI6IFwid2F0c29uLWhlYWx0aC93aW5kb3ctLWJhc2UvMjAuanNcIiwgXCJkZXNjcmlwdG9yXCI6IHsgXCJlbGVtXCI6IFwic3ZnXCIsIFwiYXR0cnNcIjogeyBcInhtbG5zXCI6IFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiwgXCJ2aWV3Qm94XCI6IFwiMCAwIDMyIDMyXCIsIFwiZmlsbFwiOiBcImN1cnJlbnRDb2xvclwiLCBcIndpZHRoXCI6IDIwLCBcImhlaWdodFwiOiAyMCB9LCBcImNvbnRlbnRcIjogW3sgXCJlbGVtXCI6IFwicGF0aFwiLCBcImF0dHJzXCI6IHsgXCJkXCI6IFwiTTE1IDJIMTdWNUgxNXpNMjUgMTNIMjhWMTVIMjV6TTE1IDIzSDE3VjI2SDE1ek00IDEzSDdWMTVINHpcIiB9IH0sIHsgXCJlbGVtXCI6IFwicGF0aFwiLCBcImF0dHJzXCI6IHsgXCJkXCI6IFwiTTcuNTUgNS4wM0g5LjU1VjguMDMwMDAwMDAwMDAwMDAxSDcuNTV6XCIsIFwidHJhbnNmb3JtXCI6IFwicm90YXRlKC00NSA4LjU2IDYuNTQ0KVwiIH0gfSwgeyBcImVsZW1cIjogXCJwYXRoXCIsIFwiYXR0cnNcIjogeyBcImRcIjogXCJNMjEuOTYgNS41NEgyNC45NlY3LjU0SDIxLjk2elwiLCBcInRyYW5zZm9ybVwiOiBcInJvdGF0ZSgtNDUgMjMuNDY5IDYuNTM5KVwiIH0gfSwgeyBcImVsZW1cIjogXCJwYXRoXCIsIFwiYXR0cnNcIjogeyBcImRcIjogXCJNMjIuNDYgMTkuOTRIMjQuNDZWMjIuOTRIMjIuNDZ6XCIsIFwidHJhbnNmb3JtXCI6IFwicm90YXRlKC00NSAyMy40NjIgMjEuNDQyKVwiIH0gfSwgeyBcImVsZW1cIjogXCJwYXRoXCIsIFwiYXR0cnNcIjogeyBcImRcIjogXCJNNy4wNCAyMC40NUgxMC4wNFYyMi40NUg3LjA0elwiLCBcInRyYW5zZm9ybVwiOiBcInJvdGF0ZSgtNDUgOC41NTQgMjEuNDQ3KVwiIH0gfSwgeyBcImVsZW1cIjogXCJwYXRoXCIsIFwiYXR0cnNcIjogeyBcImRcIjogXCJNNCAyOEgyOFYzMEg0ek0xNiAyMGE2IDYgMCAxMC02LTZBNiA2IDAgMDAxNiAyMHptMC0xMHY4YTQgNCAwIDAxMC04elwiIH0gfV0sIFwibmFtZVwiOiBcIndpbmRvdy0tYmFzZVwiLCBcInNpemVcIjogMjAgfSwgXCJzaXplXCI6IDIwIH0sXG4gICAgICAgICAgICAgICAgc3ZnOiBcIjxzdmcgZm9jdXNhYmxlPVxcXCJmYWxzZVxcXCIgcHJlc2VydmVBc3BlY3RSYXRpbz1cXFwieE1pZFlNaWQgbWVldFxcXCIgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIiBmaWxsPVxcXCJjdXJyZW50Q29sb3JcXFwiIHdpZHRoPVxcXCIyMFxcXCIgaGVpZ2h0PVxcXCIyMFxcXCIgdmlld0JveD1cXFwiMCAwIDMyIDMyXFxcIiBhcmlhLWhpZGRlbj1cXFwidHJ1ZVxcXCI+PHBhdGggZD1cXFwiTTE1IDJIMTdWNUgxNXpNMjUgMTNIMjhWMTVIMjV6TTE1IDIzSDE3VjI2SDE1ek00IDEzSDdWMTVINHpcXFwiPjwvcGF0aD48cGF0aCBkPVxcXCJNNy41NSA1LjAzSDkuNTVWOC4wMzAwMDAwMDAwMDAwMDFINy41NXpcXFwiIHRyYW5zZm9ybT1cXFwicm90YXRlKC00NSA4LjU2IDYuNTQ0KVxcXCI+PC9wYXRoPjxwYXRoIGQ9XFxcIk0yMS45NiA1LjU0SDI0Ljk2VjcuNTRIMjEuOTZ6XFxcIiB0cmFuc2Zvcm09XFxcInJvdGF0ZSgtNDUgMjMuNDY5IDYuNTM5KVxcXCI+PC9wYXRoPjxwYXRoIGQ9XFxcIk0yMi40NiAxOS45NEgyNC40NlYyMi45NEgyMi40NnpcXFwiIHRyYW5zZm9ybT1cXFwicm90YXRlKC00NSAyMy40NjIgMjEuNDQyKVxcXCI+PC9wYXRoPjxwYXRoIGQ9XFxcIk03LjA0IDIwLjQ1SDEwLjA0VjIyLjQ1SDcuMDR6XFxcIiB0cmFuc2Zvcm09XFxcInJvdGF0ZSgtNDUgOC41NTQgMjEuNDQ3KVxcXCI+PC9wYXRoPjxwYXRoIGQ9XFxcIk00IDI4SDI4VjMwSDR6TTE2IDIwYTYgNiAwIDEwLTYtNkE2IDYgMCAwMDE2IDIwem0wLTEwdjhhNCA0IDAgMDEwLTh6XFxcIj48L3BhdGg+PC9zdmc+XCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcIjE2XCI6IHtcbiAgICAgICAgICAgICAgICBtZXRhZGF0YTogeyBcIm1vZHVsZU5hbWVcIjogXCJXYXRzb25IZWFsdGhXaW5kb3dCYXNlMTZcIiwgXCJmaWxlcGF0aFwiOiBcIndhdHNvbi1oZWFsdGgvd2luZG93LS1iYXNlLzE2LmpzXCIsIFwiZGVzY3JpcHRvclwiOiB7IFwiZWxlbVwiOiBcInN2Z1wiLCBcImF0dHJzXCI6IHsgXCJ4bWxuc1wiOiBcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIsIFwidmlld0JveFwiOiBcIjAgMCAzMiAzMlwiLCBcImZpbGxcIjogXCJjdXJyZW50Q29sb3JcIiwgXCJ3aWR0aFwiOiAxNiwgXCJoZWlnaHRcIjogMTYgfSwgXCJjb250ZW50XCI6IFt7IFwiZWxlbVwiOiBcInBhdGhcIiwgXCJhdHRyc1wiOiB7IFwiZFwiOiBcIk0xNSAySDE3VjVIMTV6TTI1IDEzSDI4VjE1SDI1ek0xNSAyM0gxN1YyNkgxNXpNNCAxM0g3VjE1SDR6XCIgfSB9LCB7IFwiZWxlbVwiOiBcInBhdGhcIiwgXCJhdHRyc1wiOiB7IFwiZFwiOiBcIk03LjU1IDUuMDNIOS41NVY4LjAzMDAwMDAwMDAwMDAwMUg3LjU1elwiLCBcInRyYW5zZm9ybVwiOiBcInJvdGF0ZSgtNDUgOC41NiA2LjU0NClcIiB9IH0sIHsgXCJlbGVtXCI6IFwicGF0aFwiLCBcImF0dHJzXCI6IHsgXCJkXCI6IFwiTTIxLjk2IDUuNTRIMjQuOTZWNy41NEgyMS45NnpcIiwgXCJ0cmFuc2Zvcm1cIjogXCJyb3RhdGUoLTQ1IDIzLjQ2OSA2LjUzOSlcIiB9IH0sIHsgXCJlbGVtXCI6IFwicGF0aFwiLCBcImF0dHJzXCI6IHsgXCJkXCI6IFwiTTIyLjQ2IDE5Ljk0SDI0LjQ2VjIyLjk0SDIyLjQ2elwiLCBcInRyYW5zZm9ybVwiOiBcInJvdGF0ZSgtNDUgMjMuNDYyIDIxLjQ0MilcIiB9IH0sIHsgXCJlbGVtXCI6IFwicGF0aFwiLCBcImF0dHJzXCI6IHsgXCJkXCI6IFwiTTcuMDQgMjAuNDVIMTAuMDRWMjIuNDVINy4wNHpcIiwgXCJ0cmFuc2Zvcm1cIjogXCJyb3RhdGUoLTQ1IDguNTU0IDIxLjQ0NylcIiB9IH0sIHsgXCJlbGVtXCI6IFwicGF0aFwiLCBcImF0dHJzXCI6IHsgXCJkXCI6IFwiTTQgMjhIMjhWMzBINHpNMTYgMjBhNiA2IDAgMTAtNi02QTYgNiAwIDAwMTYgMjB6bTAtMTB2OGE0IDQgMCAwMTAtOHpcIiB9IH1dLCBcIm5hbWVcIjogXCJ3aW5kb3ctLWJhc2VcIiwgXCJzaXplXCI6IDE2IH0sIFwic2l6ZVwiOiAxNiB9LFxuICAgICAgICAgICAgICAgIHN2ZzogXCI8c3ZnIGZvY3VzYWJsZT1cXFwiZmFsc2VcXFwiIHByZXNlcnZlQXNwZWN0UmF0aW89XFxcInhNaWRZTWlkIG1lZXRcXFwiIHhtbG5zPVxcXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1xcXCIgZmlsbD1cXFwiY3VycmVudENvbG9yXFxcIiB3aWR0aD1cXFwiMTZcXFwiIGhlaWdodD1cXFwiMTZcXFwiIHZpZXdCb3g9XFxcIjAgMCAzMiAzMlxcXCIgYXJpYS1oaWRkZW49XFxcInRydWVcXFwiPjxwYXRoIGQ9XFxcIk0xNSAySDE3VjVIMTV6TTI1IDEzSDI4VjE1SDI1ek0xNSAyM0gxN1YyNkgxNXpNNCAxM0g3VjE1SDR6XFxcIj48L3BhdGg+PHBhdGggZD1cXFwiTTcuNTUgNS4wM0g5LjU1VjguMDMwMDAwMDAwMDAwMDAxSDcuNTV6XFxcIiB0cmFuc2Zvcm09XFxcInJvdGF0ZSgtNDUgOC41NiA2LjU0NClcXFwiPjwvcGF0aD48cGF0aCBkPVxcXCJNMjEuOTYgNS41NEgyNC45NlY3LjU0SDIxLjk2elxcXCIgdHJhbnNmb3JtPVxcXCJyb3RhdGUoLTQ1IDIzLjQ2OSA2LjUzOSlcXFwiPjwvcGF0aD48cGF0aCBkPVxcXCJNMjIuNDYgMTkuOTRIMjQuNDZWMjIuOTRIMjIuNDZ6XFxcIiB0cmFuc2Zvcm09XFxcInJvdGF0ZSgtNDUgMjMuNDYyIDIxLjQ0MilcXFwiPjwvcGF0aD48cGF0aCBkPVxcXCJNNy4wNCAyMC40NUgxMC4wNFYyMi40NUg3LjA0elxcXCIgdHJhbnNmb3JtPVxcXCJyb3RhdGUoLTQ1IDguNTU0IDIxLjQ0NylcXFwiPjwvcGF0aD48cGF0aCBkPVxcXCJNNCAyOEgyOFYzMEg0ek0xNiAyMGE2IDYgMCAxMC02LTZBNiA2IDAgMDAxNiAyMHptMC0xMHY4YTQgNCAwIDAxMC04elxcXCI+PC9wYXRoPjwvc3ZnPlwiXG4gICAgICAgICAgICB9LFxuICAgICAgICB9O1xuICAgIH1cbiAgICBXYXRzb25IZWFsdGhXaW5kb3dCYXNlRGlyZWN0aXZlXzEgPSBXYXRzb25IZWFsdGhXaW5kb3dCYXNlRGlyZWN0aXZlO1xuICAgIFdhdHNvbkhlYWx0aFdpbmRvd0Jhc2VEaXJlY3RpdmUucHJvdG90eXBlLm5nQWZ0ZXJWaWV3SW5pdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHN2ZyA9IHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50O1xuICAgICAgICBzdmcuc2V0QXR0cmlidXRlKFwieG1sbnNcIiwgXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiKTtcbiAgICAgICAgdmFyIGljb24gPSB0aGlzLmljb25zW3RoaXMuc2l6ZV07XG4gICAgICAgIHZhciBkb21QYXJzZXIgPSBuZXcgRE9NUGFyc2VyKCk7XG4gICAgICAgIHZhciByYXdTVkcgPSBpY29uLnN2ZztcbiAgICAgICAgdmFyIHN2Z0VsZW1lbnQgPSBkb21QYXJzZXIucGFyc2VGcm9tU3RyaW5nKHJhd1NWRywgXCJpbWFnZS9zdmcreG1sXCIpLmRvY3VtZW50RWxlbWVudDtcbiAgICAgICAgdmFyIG5vZGUgPSBzdmdFbGVtZW50LmZpcnN0Q2hpbGQ7XG4gICAgICAgIHdoaWxlIChub2RlKSB7XG4gICAgICAgICAgICAvLyBpbXBvcnROb2RlIG1ha2VzIGEgY2xvbmUgb2YgdGhlIG5vZGVcbiAgICAgICAgICAgIC8vIHRoaXMgZW5zdXJlcyB3ZSBrZWVwIGxvb3Bpbmcgb3ZlciB0aGUgbm9kZXMgaW4gdGhlIHBhcnNlZCBkb2N1bWVudFxuICAgICAgICAgICAgc3ZnLmFwcGVuZENoaWxkKHN2Zy5vd25lckRvY3VtZW50LmltcG9ydE5vZGUobm9kZSwgdHJ1ZSkpO1xuICAgICAgICAgICAgbm9kZSA9IG5vZGUubmV4dFNpYmxpbmc7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGF0dHJpYnV0ZXMgPSBnZXRBdHRyaWJ1dGVzKHtcbiAgICAgICAgICAgIHdpZHRoOiBpY29uLm1ldGFkYXRhLmRlc2NyaXB0b3IuYXR0cnMuaGVpZ2h0LFxuICAgICAgICAgICAgaGVpZ2h0OiBpY29uLm1ldGFkYXRhLmRlc2NyaXB0b3IuYXR0cnMuaGVpZ2h0LFxuICAgICAgICAgICAgdmlld0JveDogaWNvbi5tZXRhZGF0YS5kZXNjcmlwdG9yLmF0dHJzLnZpZXdCb3gsXG4gICAgICAgICAgICB0aXRsZTogdGhpcy50aXRsZSxcbiAgICAgICAgICAgIFwiYXJpYS1sYWJlbFwiOiB0aGlzLmFyaWFMYWJlbCxcbiAgICAgICAgICAgIFwiYXJpYS1sYWJlbGxlZGJ5XCI6IHRoaXMuYXJpYUxhYmVsbGVkYnksXG4gICAgICAgICAgICBcImFyaWEtaGlkZGVuXCI6IHRoaXMuYXJpYUhpZGRlbixcbiAgICAgICAgICAgIGZvY3VzYWJsZTogdGhpcy5pc0ZvY3VzYWJsZS50b1N0cmluZygpXG4gICAgICAgIH0pO1xuICAgICAgICB2YXIgYXR0cktleXMgPSBPYmplY3Qua2V5cyhhdHRyaWJ1dGVzKTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhdHRyS2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIGtleSA9IGF0dHJLZXlzW2ldO1xuICAgICAgICAgICAgdmFyIHZhbHVlID0gYXR0cmlidXRlc1trZXldO1xuICAgICAgICAgICAgaWYgKGtleSA9PT0gXCJ0aXRsZVwiKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICBzdmcuc2V0QXR0cmlidXRlKGtleSwgdmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChhdHRyaWJ1dGVzLnRpdGxlKSB7XG4gICAgICAgICAgICB2YXIgdGl0bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidGl0bGVcIik7XG4gICAgICAgICAgICB0aXRsZS50ZXh0Q29udGVudCA9IGF0dHJpYnV0ZXMudGl0bGU7XG4gICAgICAgICAgICBXYXRzb25IZWFsdGhXaW5kb3dCYXNlRGlyZWN0aXZlXzEudGl0bGVJZENvdW50ZXIrKztcbiAgICAgICAgICAgIHRpdGxlLnNldEF0dHJpYnV0ZShcImlkXCIsIFwid2F0c29uLWhlYWx0aC13aW5kb3ctYmFzZS1cIiArIFdhdHNvbkhlYWx0aFdpbmRvd0Jhc2VEaXJlY3RpdmVfMS50aXRsZUlkQ291bnRlcik7XG4gICAgICAgICAgICBzdmcuYXBwZW5kQ2hpbGQodGl0bGUpO1xuICAgICAgICAgICAgc3ZnLnNldEF0dHJpYnV0ZShcImFyaWEtbGFiZWxsZWRieVwiLCBcIndhdHNvbi1oZWFsdGgtd2luZG93LWJhc2UtXCIgKyBXYXRzb25IZWFsdGhXaW5kb3dCYXNlRGlyZWN0aXZlXzEudGl0bGVJZENvdW50ZXIpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICB2YXIgV2F0c29uSGVhbHRoV2luZG93QmFzZURpcmVjdGl2ZV8xO1xuICAgIFdhdHNvbkhlYWx0aFdpbmRvd0Jhc2VEaXJlY3RpdmUudGl0bGVJZENvdW50ZXIgPSAwO1xuICAgIFdhdHNvbkhlYWx0aFdpbmRvd0Jhc2VEaXJlY3RpdmUuY3RvclBhcmFtZXRlcnMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBbXG4gICAgICAgIHsgdHlwZTogRWxlbWVudFJlZiB9XG4gICAgXTsgfTtcbiAgICBfX2RlY29yYXRlKFtcbiAgICAgICAgSW5wdXQoKSxcbiAgICAgICAgX19tZXRhZGF0YShcImRlc2lnbjp0eXBlXCIsIFN0cmluZylcbiAgICBdLCBXYXRzb25IZWFsdGhXaW5kb3dCYXNlRGlyZWN0aXZlLnByb3RvdHlwZSwgXCJhcmlhTGFiZWxcIiwgdm9pZCAwKTtcbiAgICBfX2RlY29yYXRlKFtcbiAgICAgICAgSW5wdXQoKSxcbiAgICAgICAgX19tZXRhZGF0YShcImRlc2lnbjp0eXBlXCIsIFN0cmluZylcbiAgICBdLCBXYXRzb25IZWFsdGhXaW5kb3dCYXNlRGlyZWN0aXZlLnByb3RvdHlwZSwgXCJhcmlhTGFiZWxsZWRieVwiLCB2b2lkIDApO1xuICAgIF9fZGVjb3JhdGUoW1xuICAgICAgICBJbnB1dCgpLFxuICAgICAgICBfX21ldGFkYXRhKFwiZGVzaWduOnR5cGVcIiwgQm9vbGVhbilcbiAgICBdLCBXYXRzb25IZWFsdGhXaW5kb3dCYXNlRGlyZWN0aXZlLnByb3RvdHlwZSwgXCJhcmlhSGlkZGVuXCIsIHZvaWQgMCk7XG4gICAgX19kZWNvcmF0ZShbXG4gICAgICAgIElucHV0KCksXG4gICAgICAgIF9fbWV0YWRhdGEoXCJkZXNpZ246dHlwZVwiLCBTdHJpbmcpXG4gICAgXSwgV2F0c29uSGVhbHRoV2luZG93QmFzZURpcmVjdGl2ZS5wcm90b3R5cGUsIFwidGl0bGVcIiwgdm9pZCAwKTtcbiAgICBfX2RlY29yYXRlKFtcbiAgICAgICAgSW5wdXQoKSxcbiAgICAgICAgX19tZXRhZGF0YShcImRlc2lnbjp0eXBlXCIsIEJvb2xlYW4pXG4gICAgXSwgV2F0c29uSGVhbHRoV2luZG93QmFzZURpcmVjdGl2ZS5wcm90b3R5cGUsIFwiaXNGb2N1c2FibGVcIiwgdm9pZCAwKTtcbiAgICBfX2RlY29yYXRlKFtcbiAgICAgICAgSW5wdXQoKSxcbiAgICAgICAgX19tZXRhZGF0YShcImRlc2lnbjp0eXBlXCIsIFN0cmluZylcbiAgICBdLCBXYXRzb25IZWFsdGhXaW5kb3dCYXNlRGlyZWN0aXZlLnByb3RvdHlwZSwgXCJzaXplXCIsIHZvaWQgMCk7XG4gICAgV2F0c29uSGVhbHRoV2luZG93QmFzZURpcmVjdGl2ZSA9IFdhdHNvbkhlYWx0aFdpbmRvd0Jhc2VEaXJlY3RpdmVfMSA9IF9fZGVjb3JhdGUoW1xuICAgICAgICBEaXJlY3RpdmUoe1xuICAgICAgICAgICAgc2VsZWN0b3I6IFwiW2libUljb25XYXRzb25IZWFsdGhXaW5kb3dCYXNlXVwiXG4gICAgICAgIH0pLFxuICAgICAgICBfX21ldGFkYXRhKFwiZGVzaWduOnBhcmFtdHlwZXNcIiwgW0VsZW1lbnRSZWZdKVxuICAgIF0sIFdhdHNvbkhlYWx0aFdpbmRvd0Jhc2VEaXJlY3RpdmUpO1xuICAgIHJldHVybiBXYXRzb25IZWFsdGhXaW5kb3dCYXNlRGlyZWN0aXZlO1xufSgpKTtcbnZhciBXYXRzb25IZWFsdGhXaW5kb3dCYXNlTW9kdWxlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFdhdHNvbkhlYWx0aFdpbmRvd0Jhc2VNb2R1bGUoKSB7XG4gICAgfVxuICAgIFdhdHNvbkhlYWx0aFdpbmRvd0Jhc2VNb2R1bGUgPSBfX2RlY29yYXRlKFtcbiAgICAgICAgTmdNb2R1bGUoe1xuICAgICAgICAgICAgZGVjbGFyYXRpb25zOiBbXG4gICAgICAgICAgICAgICAgV2F0c29uSGVhbHRoV2luZG93QmFzZUNvbXBvbmVudCxcbiAgICAgICAgICAgICAgICBXYXRzb25IZWFsdGhXaW5kb3dCYXNlRGlyZWN0aXZlLFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIGV4cG9ydHM6IFtcbiAgICAgICAgICAgICAgICBXYXRzb25IZWFsdGhXaW5kb3dCYXNlQ29tcG9uZW50LFxuICAgICAgICAgICAgICAgIFdhdHNvbkhlYWx0aFdpbmRvd0Jhc2VEaXJlY3RpdmUsXG4gICAgICAgICAgICBdXG4gICAgICAgIH0pXG4gICAgXSwgV2F0c29uSGVhbHRoV2luZG93QmFzZU1vZHVsZSk7XG4gICAgcmV0dXJuIFdhdHNvbkhlYWx0aFdpbmRvd0Jhc2VNb2R1bGU7XG59KCkpO1xuXG5leHBvcnQgeyBXYXRzb25IZWFsdGhXaW5kb3dCYXNlQ29tcG9uZW50LCBXYXRzb25IZWFsdGhXaW5kb3dCYXNlRGlyZWN0aXZlLCBXYXRzb25IZWFsdGhXaW5kb3dCYXNlTW9kdWxlIH07XG4iXX0=