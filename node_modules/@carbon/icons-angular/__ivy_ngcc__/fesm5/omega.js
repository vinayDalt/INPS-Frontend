import { __decorate, __metadata } from 'tslib';
import { Input, Component, ElementRef, Directive, NgModule } from '@angular/core';
import { getAttributes } from '@carbon/icon-helpers';

import * as ɵngcc0 from '@angular/core';
var OmegaComponent = /** @class */ (function () {
    function OmegaComponent() {
        this.focusable = false;
    }
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], OmegaComponent.prototype, "ariaLabel", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], OmegaComponent.prototype, "ariaLabelledby", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], OmegaComponent.prototype, "ariaHidden", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], OmegaComponent.prototype, "title", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], OmegaComponent.prototype, "focusable", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], OmegaComponent.prototype, "innerClass", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], OmegaComponent.prototype, "size", void 0);
OmegaComponent.ɵfac = function OmegaComponent_Factory(t) { return new (t || OmegaComponent)(); };
OmegaComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: OmegaComponent, selectors: [["ibm-icon-omega"]], inputs: { focusable: "focusable", ariaLabel: "ariaLabel", ariaLabelledby: "ariaLabelledby", ariaHidden: "ariaHidden", title: "title", innerClass: "innerClass", size: "size" }, decls: 1, vars: 7, consts: [["ibmIconOmega", "", 3, "size", "ariaLabel", "ariaLabelledby", "ariaHidden", "title", "isFocusable"]], template: function OmegaComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵnamespaceSVG();
        ɵngcc0.ɵɵelement(0, "svg", 0);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("size", ctx.size)("ariaLabel", ctx.ariaLabel)("ariaLabelledby", ctx.ariaLabelledby)("ariaHidden", ctx.ariaHidden)("title", ctx.title)("isFocusable", ctx.focusable);
        ɵngcc0.ɵɵattribute("class", ctx.innerClass);
    } }, directives: function () { return [OmegaDirective]; }, encapsulation: 2 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(OmegaComponent, [{
        type: Component,
        args: [{
                selector: "ibm-icon-omega",
                template: "\n    <svg\n      ibmIconOmega\n      [size]=\"size\"\n      [ariaLabel]=\"ariaLabel\"\n      [ariaLabelledby]=\"ariaLabelledby\"\n      [ariaHidden]=\"ariaHidden\"\n      [title]=\"title\"\n      [isFocusable]=\"focusable\"\n      [attr.class]=\"innerClass\">\n    </svg>\n  "
            }]
    }], function () { return []; }, { focusable: [{
            type: Input
        }], ariaLabel: [{
            type: Input
        }], ariaLabelledby: [{
            type: Input
        }], ariaHidden: [{
            type: Input
        }], title: [{
            type: Input
        }], innerClass: [{
            type: Input
        }], size: [{
            type: Input
        }] }); })();
    return OmegaComponent;
}());
var OmegaDirective = /** @class */ (function () {
    function OmegaDirective(elementRef) {
        this.elementRef = elementRef;
        this.isFocusable = false;
        this.icons = {
            "32": {
                metadata: { "moduleName": "Omega32", "filepath": "omega/32.js", "descriptor": { "elem": "svg", "attrs": { "xmlns": "http://www.w3.org/2000/svg", "viewBox": "0 0 32 32", "fill": "currentColor", "width": 32, "height": 32 }, "content": [{ "elem": "path", "attrs": { "d": "M22.7373,25A14.3093,14.3093,0,0,0,27,15C27,8.42,22.58,4,16,4S5,8.42,5,15A14.3093,14.3093,0,0,0,9.2627,25H4v2h9V25.4722l-.4355-.2979A12.646,12.646,0,0,1,7,15c0-5.4673,3.5327-9,9-9s9,3.5327,9,9a12.5671,12.5671,0,0,1-5,9.7615V27h8V25Z" } }], "name": "omega", "size": 32 }, "size": 32 },
                svg: "<svg focusable=\"false\" preserveAspectRatio=\"xMidYMid meet\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"currentColor\" width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" aria-hidden=\"true\"><path d=\"M22.7373,25A14.3093,14.3093,0,0,0,27,15C27,8.42,22.58,4,16,4S5,8.42,5,15A14.3093,14.3093,0,0,0,9.2627,25H4v2h9V25.4722l-.4355-.2979A12.646,12.646,0,0,1,7,15c0-5.4673,3.5327-9,9-9s9,3.5327,9,9a12.5671,12.5671,0,0,1-5,9.7615V27h8V25Z\"></path></svg>"
            },
            "24": {
                metadata: { "moduleName": "Omega24", "filepath": "omega/24.js", "descriptor": { "elem": "svg", "attrs": { "xmlns": "http://www.w3.org/2000/svg", "viewBox": "0 0 32 32", "fill": "currentColor", "width": 24, "height": 24 }, "content": [{ "elem": "path", "attrs": { "d": "M22.7373,25A14.3093,14.3093,0,0,0,27,15C27,8.42,22.58,4,16,4S5,8.42,5,15A14.3093,14.3093,0,0,0,9.2627,25H4v2h9V25.4722l-.4355-.2979A12.646,12.646,0,0,1,7,15c0-5.4673,3.5327-9,9-9s9,3.5327,9,9a12.5671,12.5671,0,0,1-5,9.7615V27h8V25Z" } }], "name": "omega", "size": 24 }, "size": 24 },
                svg: "<svg focusable=\"false\" preserveAspectRatio=\"xMidYMid meet\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"currentColor\" width=\"24\" height=\"24\" viewBox=\"0 0 32 32\" aria-hidden=\"true\"><path d=\"M22.7373,25A14.3093,14.3093,0,0,0,27,15C27,8.42,22.58,4,16,4S5,8.42,5,15A14.3093,14.3093,0,0,0,9.2627,25H4v2h9V25.4722l-.4355-.2979A12.646,12.646,0,0,1,7,15c0-5.4673,3.5327-9,9-9s9,3.5327,9,9a12.5671,12.5671,0,0,1-5,9.7615V27h8V25Z\"></path></svg>"
            },
            "20": {
                metadata: { "moduleName": "Omega20", "filepath": "omega/20.js", "descriptor": { "elem": "svg", "attrs": { "xmlns": "http://www.w3.org/2000/svg", "viewBox": "0 0 32 32", "fill": "currentColor", "width": 20, "height": 20 }, "content": [{ "elem": "path", "attrs": { "d": "M22.7373,25A14.3093,14.3093,0,0,0,27,15C27,8.42,22.58,4,16,4S5,8.42,5,15A14.3093,14.3093,0,0,0,9.2627,25H4v2h9V25.4722l-.4355-.2979A12.646,12.646,0,0,1,7,15c0-5.4673,3.5327-9,9-9s9,3.5327,9,9a12.5671,12.5671,0,0,1-5,9.7615V27h8V25Z" } }], "name": "omega", "size": 20 }, "size": 20 },
                svg: "<svg focusable=\"false\" preserveAspectRatio=\"xMidYMid meet\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"currentColor\" width=\"20\" height=\"20\" viewBox=\"0 0 32 32\" aria-hidden=\"true\"><path d=\"M22.7373,25A14.3093,14.3093,0,0,0,27,15C27,8.42,22.58,4,16,4S5,8.42,5,15A14.3093,14.3093,0,0,0,9.2627,25H4v2h9V25.4722l-.4355-.2979A12.646,12.646,0,0,1,7,15c0-5.4673,3.5327-9,9-9s9,3.5327,9,9a12.5671,12.5671,0,0,1-5,9.7615V27h8V25Z\"></path></svg>"
            },
            "16": {
                metadata: { "moduleName": "Omega16", "filepath": "omega/16.js", "descriptor": { "elem": "svg", "attrs": { "xmlns": "http://www.w3.org/2000/svg", "viewBox": "0 0 32 32", "fill": "currentColor", "width": 16, "height": 16 }, "content": [{ "elem": "path", "attrs": { "d": "M22.7373,25A14.3093,14.3093,0,0,0,27,15C27,8.42,22.58,4,16,4S5,8.42,5,15A14.3093,14.3093,0,0,0,9.2627,25H4v2h9V25.4722l-.4355-.2979A12.646,12.646,0,0,1,7,15c0-5.4673,3.5327-9,9-9s9,3.5327,9,9a12.5671,12.5671,0,0,1-5,9.7615V27h8V25Z" } }], "name": "omega", "size": 16 }, "size": 16 },
                svg: "<svg focusable=\"false\" preserveAspectRatio=\"xMidYMid meet\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"currentColor\" width=\"16\" height=\"16\" viewBox=\"0 0 32 32\" aria-hidden=\"true\"><path d=\"M22.7373,25A14.3093,14.3093,0,0,0,27,15C27,8.42,22.58,4,16,4S5,8.42,5,15A14.3093,14.3093,0,0,0,9.2627,25H4v2h9V25.4722l-.4355-.2979A12.646,12.646,0,0,1,7,15c0-5.4673,3.5327-9,9-9s9,3.5327,9,9a12.5671,12.5671,0,0,1-5,9.7615V27h8V25Z\"></path></svg>"
            },
        };
    }
    OmegaDirective_1 = OmegaDirective;
    OmegaDirective.prototype.ngAfterViewInit = function () {
        var svg = this.elementRef.nativeElement;
        svg.setAttribute("xmlns", "http://www.w3.org/2000/svg");
        var icon = this.icons[this.size];
        var domParser = new DOMParser();
        var rawSVG = icon.svg;
        var svgElement = domParser.parseFromString(rawSVG, "image/svg+xml").documentElement;
        var node = svgElement.firstChild;
        while (node) {
            // importNode makes a clone of the node
            // this ensures we keep looping over the nodes in the parsed document
            svg.appendChild(svg.ownerDocument.importNode(node, true));
            node = node.nextSibling;
        }
        var attributes = getAttributes({
            width: icon.metadata.descriptor.attrs.height,
            height: icon.metadata.descriptor.attrs.height,
            viewBox: icon.metadata.descriptor.attrs.viewBox,
            title: this.title,
            "aria-label": this.ariaLabel,
            "aria-labelledby": this.ariaLabelledby,
            "aria-hidden": this.ariaHidden,
            focusable: this.isFocusable.toString()
        });
        var attrKeys = Object.keys(attributes);
        for (var i = 0; i < attrKeys.length; i++) {
            var key = attrKeys[i];
            var value = attributes[key];
            if (key === "title") {
                continue;
            }
            if (value) {
                svg.setAttribute(key, value);
            }
        }
        if (attributes.title) {
            var title = document.createElement("title");
            title.textContent = attributes.title;
            OmegaDirective_1.titleIdCounter++;
            title.setAttribute("id", "omega-" + OmegaDirective_1.titleIdCounter);
            svg.appendChild(title);
            svg.setAttribute("aria-labelledby", "omega-" + OmegaDirective_1.titleIdCounter);
        }
    };
    var OmegaDirective_1;
    OmegaDirective.titleIdCounter = 0;
    OmegaDirective.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], OmegaDirective.prototype, "ariaLabel", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], OmegaDirective.prototype, "ariaLabelledby", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], OmegaDirective.prototype, "ariaHidden", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], OmegaDirective.prototype, "title", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], OmegaDirective.prototype, "isFocusable", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], OmegaDirective.prototype, "size", void 0);
    OmegaDirective = OmegaDirective_1 = __decorate([ __metadata("design:paramtypes", [ElementRef])
    ], OmegaDirective);
OmegaDirective.ɵfac = function OmegaDirective_Factory(t) { return new (t || OmegaDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
OmegaDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: OmegaDirective, selectors: [["", "ibmIconOmega", ""]], inputs: { isFocusable: "isFocusable", ariaLabel: "ariaLabel", ariaLabelledby: "ariaLabelledby", ariaHidden: "ariaHidden", title: "title", size: "size" } });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(OmegaDirective, [{
        type: Directive,
        args: [{
                selector: "[ibmIconOmega]"
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, { isFocusable: [{
            type: Input
        }], ariaLabel: [{
            type: Input
        }], ariaLabelledby: [{
            type: Input
        }], ariaHidden: [{
            type: Input
        }], title: [{
            type: Input
        }], size: [{
            type: Input
        }] }); })();
    return OmegaDirective;
}());
var OmegaModule = /** @class */ (function () {
    function OmegaModule() {
    }
OmegaModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: OmegaModule });
OmegaModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function OmegaModule_Factory(t) { return new (t || OmegaModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(OmegaModule, { declarations: [OmegaComponent, OmegaDirective], exports: [OmegaComponent, OmegaDirective] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(OmegaModule, [{
        type: NgModule,
        args: [{
                declarations: [
                    OmegaComponent,
                    OmegaDirective,
                ],
                exports: [
                    OmegaComponent,
                    OmegaDirective,
                ]
            }]
    }], function () { return []; }, null); })();
    return OmegaModule;
}());

export { OmegaComponent, OmegaDirective, OmegaModule };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,