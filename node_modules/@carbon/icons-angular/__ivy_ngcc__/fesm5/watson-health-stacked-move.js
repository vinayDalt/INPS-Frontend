import { __decorate, __metadata } from 'tslib';
import { Input, Component, ElementRef, Directive, NgModule } from '@angular/core';
import { getAttributes } from '@carbon/icon-helpers';

import * as ɵngcc0 from '@angular/core';
var WatsonHealthStackedMoveComponent = /** @class */ (function () {
    function WatsonHealthStackedMoveComponent() {
        this.focusable = false;
    }
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], WatsonHealthStackedMoveComponent.prototype, "ariaLabel", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], WatsonHealthStackedMoveComponent.prototype, "ariaLabelledby", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], WatsonHealthStackedMoveComponent.prototype, "ariaHidden", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], WatsonHealthStackedMoveComponent.prototype, "title", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], WatsonHealthStackedMoveComponent.prototype, "focusable", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], WatsonHealthStackedMoveComponent.prototype, "innerClass", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], WatsonHealthStackedMoveComponent.prototype, "size", void 0);
WatsonHealthStackedMoveComponent.ɵfac = function WatsonHealthStackedMoveComponent_Factory(t) { return new (t || WatsonHealthStackedMoveComponent)(); };
WatsonHealthStackedMoveComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: WatsonHealthStackedMoveComponent, selectors: [["ibm-icon-watson-health-stacked-move"]], inputs: { focusable: "focusable", ariaLabel: "ariaLabel", ariaLabelledby: "ariaLabelledby", ariaHidden: "ariaHidden", title: "title", innerClass: "innerClass", size: "size" }, decls: 1, vars: 7, consts: [["ibmIconWatsonHealthStackedMove", "", 3, "size", "ariaLabel", "ariaLabelledby", "ariaHidden", "title", "isFocusable"]], template: function WatsonHealthStackedMoveComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵnamespaceSVG();
        ɵngcc0.ɵɵelement(0, "svg", 0);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("size", ctx.size)("ariaLabel", ctx.ariaLabel)("ariaLabelledby", ctx.ariaLabelledby)("ariaHidden", ctx.ariaHidden)("title", ctx.title)("isFocusable", ctx.focusable);
        ɵngcc0.ɵɵattribute("class", ctx.innerClass);
    } }, directives: function () { return [WatsonHealthStackedMoveDirective]; }, encapsulation: 2 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(WatsonHealthStackedMoveComponent, [{
        type: Component,
        args: [{
                selector: "ibm-icon-watson-health-stacked-move",
                template: "\n    <svg\n      ibmIconWatsonHealthStackedMove\n      [size]=\"size\"\n      [ariaLabel]=\"ariaLabel\"\n      [ariaLabelledby]=\"ariaLabelledby\"\n      [ariaHidden]=\"ariaHidden\"\n      [title]=\"title\"\n      [isFocusable]=\"focusable\"\n      [attr.class]=\"innerClass\">\n    </svg>\n  "
            }]
    }], function () { return []; }, { focusable: [{
            type: Input
        }], ariaLabel: [{
            type: Input
        }], ariaLabelledby: [{
            type: Input
        }], ariaHidden: [{
            type: Input
        }], title: [{
            type: Input
        }], innerClass: [{
            type: Input
        }], size: [{
            type: Input
        }] }); })();
    return WatsonHealthStackedMoveComponent;
}());
var WatsonHealthStackedMoveDirective = /** @class */ (function () {
    function WatsonHealthStackedMoveDirective(elementRef) {
        this.elementRef = elementRef;
        this.isFocusable = false;
        this.icons = {
            "32": {
                metadata: { "moduleName": "WatsonHealthStackedMove32", "filepath": "watson-health/stacked-move/32.js", "descriptor": { "elem": "svg", "attrs": { "xmlns": "http://www.w3.org/2000/svg", "viewBox": "0 0 32 32", "fill": "currentColor", "width": 32, "height": 32 }, "content": [{ "elem": "path", "attrs": { "d": "M15,28H4a2,2,0,0,1-2-2V11A2,2,0,0,1,4,9H15a2,2,0,0,1,2,2V26A2,2,0,0,1,15,28ZM4,11V26H15V11Z" } }, { "elem": "path", "attrs": { "d": "M26,6,24.59,7.41,27,10H22V6a2,2,0,0,0-2-2H10V6H20V20h2V12h5l-2.41,2.59L26,16l5-5Z" } }], "name": "stacked-move", "size": 32 }, "size": 32 },
                svg: "<svg focusable=\"false\" preserveAspectRatio=\"xMidYMid meet\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"currentColor\" width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" aria-hidden=\"true\"><path d=\"M15,28H4a2,2,0,0,1-2-2V11A2,2,0,0,1,4,9H15a2,2,0,0,1,2,2V26A2,2,0,0,1,15,28ZM4,11V26H15V11Z\"></path><path d=\"M26,6,24.59,7.41,27,10H22V6a2,2,0,0,0-2-2H10V6H20V20h2V12h5l-2.41,2.59L26,16l5-5Z\"></path></svg>"
            },
            "24": {
                metadata: { "moduleName": "WatsonHealthStackedMove24", "filepath": "watson-health/stacked-move/24.js", "descriptor": { "elem": "svg", "attrs": { "xmlns": "http://www.w3.org/2000/svg", "viewBox": "0 0 32 32", "fill": "currentColor", "width": 24, "height": 24 }, "content": [{ "elem": "path", "attrs": { "d": "M15,28H4a2,2,0,0,1-2-2V11A2,2,0,0,1,4,9H15a2,2,0,0,1,2,2V26A2,2,0,0,1,15,28ZM4,11V26H15V11Z" } }, { "elem": "path", "attrs": { "d": "M26,6,24.59,7.41,27,10H22V6a2,2,0,0,0-2-2H10V6H20V20h2V12h5l-2.41,2.59L26,16l5-5Z" } }], "name": "stacked-move", "size": 24 }, "size": 24 },
                svg: "<svg focusable=\"false\" preserveAspectRatio=\"xMidYMid meet\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"currentColor\" width=\"24\" height=\"24\" viewBox=\"0 0 32 32\" aria-hidden=\"true\"><path d=\"M15,28H4a2,2,0,0,1-2-2V11A2,2,0,0,1,4,9H15a2,2,0,0,1,2,2V26A2,2,0,0,1,15,28ZM4,11V26H15V11Z\"></path><path d=\"M26,6,24.59,7.41,27,10H22V6a2,2,0,0,0-2-2H10V6H20V20h2V12h5l-2.41,2.59L26,16l5-5Z\"></path></svg>"
            },
            "20": {
                metadata: { "moduleName": "WatsonHealthStackedMove20", "filepath": "watson-health/stacked-move/20.js", "descriptor": { "elem": "svg", "attrs": { "xmlns": "http://www.w3.org/2000/svg", "viewBox": "0 0 32 32", "fill": "currentColor", "width": 20, "height": 20 }, "content": [{ "elem": "path", "attrs": { "d": "M15,28H4a2,2,0,0,1-2-2V11A2,2,0,0,1,4,9H15a2,2,0,0,1,2,2V26A2,2,0,0,1,15,28ZM4,11V26H15V11Z" } }, { "elem": "path", "attrs": { "d": "M26,6,24.59,7.41,27,10H22V6a2,2,0,0,0-2-2H10V6H20V20h2V12h5l-2.41,2.59L26,16l5-5Z" } }], "name": "stacked-move", "size": 20 }, "size": 20 },
                svg: "<svg focusable=\"false\" preserveAspectRatio=\"xMidYMid meet\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"currentColor\" width=\"20\" height=\"20\" viewBox=\"0 0 32 32\" aria-hidden=\"true\"><path d=\"M15,28H4a2,2,0,0,1-2-2V11A2,2,0,0,1,4,9H15a2,2,0,0,1,2,2V26A2,2,0,0,1,15,28ZM4,11V26H15V11Z\"></path><path d=\"M26,6,24.59,7.41,27,10H22V6a2,2,0,0,0-2-2H10V6H20V20h2V12h5l-2.41,2.59L26,16l5-5Z\"></path></svg>"
            },
            "16": {
                metadata: { "moduleName": "WatsonHealthStackedMove16", "filepath": "watson-health/stacked-move/16.js", "descriptor": { "elem": "svg", "attrs": { "xmlns": "http://www.w3.org/2000/svg", "viewBox": "0 0 32 32", "fill": "currentColor", "width": 16, "height": 16 }, "content": [{ "elem": "path", "attrs": { "d": "M15,28H4a2,2,0,0,1-2-2V11A2,2,0,0,1,4,9H15a2,2,0,0,1,2,2V26A2,2,0,0,1,15,28ZM4,11V26H15V11Z" } }, { "elem": "path", "attrs": { "d": "M26,6,24.59,7.41,27,10H22V6a2,2,0,0,0-2-2H10V6H20V20h2V12h5l-2.41,2.59L26,16l5-5Z" } }], "name": "stacked-move", "size": 16 }, "size": 16 },
                svg: "<svg focusable=\"false\" preserveAspectRatio=\"xMidYMid meet\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"currentColor\" width=\"16\" height=\"16\" viewBox=\"0 0 32 32\" aria-hidden=\"true\"><path d=\"M15,28H4a2,2,0,0,1-2-2V11A2,2,0,0,1,4,9H15a2,2,0,0,1,2,2V26A2,2,0,0,1,15,28ZM4,11V26H15V11Z\"></path><path d=\"M26,6,24.59,7.41,27,10H22V6a2,2,0,0,0-2-2H10V6H20V20h2V12h5l-2.41,2.59L26,16l5-5Z\"></path></svg>"
            },
        };
    }
    WatsonHealthStackedMoveDirective_1 = WatsonHealthStackedMoveDirective;
    WatsonHealthStackedMoveDirective.prototype.ngAfterViewInit = function () {
        var svg = this.elementRef.nativeElement;
        svg.setAttribute("xmlns", "http://www.w3.org/2000/svg");
        var icon = this.icons[this.size];
        var domParser = new DOMParser();
        var rawSVG = icon.svg;
        var svgElement = domParser.parseFromString(rawSVG, "image/svg+xml").documentElement;
        var node = svgElement.firstChild;
        while (node) {
            // importNode makes a clone of the node
            // this ensures we keep looping over the nodes in the parsed document
            svg.appendChild(svg.ownerDocument.importNode(node, true));
            node = node.nextSibling;
        }
        var attributes = getAttributes({
            width: icon.metadata.descriptor.attrs.height,
            height: icon.metadata.descriptor.attrs.height,
            viewBox: icon.metadata.descriptor.attrs.viewBox,
            title: this.title,
            "aria-label": this.ariaLabel,
            "aria-labelledby": this.ariaLabelledby,
            "aria-hidden": this.ariaHidden,
            focusable: this.isFocusable.toString()
        });
        var attrKeys = Object.keys(attributes);
        for (var i = 0; i < attrKeys.length; i++) {
            var key = attrKeys[i];
            var value = attributes[key];
            if (key === "title") {
                continue;
            }
            if (value) {
                svg.setAttribute(key, value);
            }
        }
        if (attributes.title) {
            var title = document.createElement("title");
            title.textContent = attributes.title;
            WatsonHealthStackedMoveDirective_1.titleIdCounter++;
            title.setAttribute("id", "watson-health-stacked-move-" + WatsonHealthStackedMoveDirective_1.titleIdCounter);
            svg.appendChild(title);
            svg.setAttribute("aria-labelledby", "watson-health-stacked-move-" + WatsonHealthStackedMoveDirective_1.titleIdCounter);
        }
    };
    var WatsonHealthStackedMoveDirective_1;
    WatsonHealthStackedMoveDirective.titleIdCounter = 0;
    WatsonHealthStackedMoveDirective.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], WatsonHealthStackedMoveDirective.prototype, "ariaLabel", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], WatsonHealthStackedMoveDirective.prototype, "ariaLabelledby", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], WatsonHealthStackedMoveDirective.prototype, "ariaHidden", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], WatsonHealthStackedMoveDirective.prototype, "title", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], WatsonHealthStackedMoveDirective.prototype, "isFocusable", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], WatsonHealthStackedMoveDirective.prototype, "size", void 0);
    WatsonHealthStackedMoveDirective = WatsonHealthStackedMoveDirective_1 = __decorate([ __metadata("design:paramtypes", [ElementRef])
    ], WatsonHealthStackedMoveDirective);
WatsonHealthStackedMoveDirective.ɵfac = function WatsonHealthStackedMoveDirective_Factory(t) { return new (t || WatsonHealthStackedMoveDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
WatsonHealthStackedMoveDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: WatsonHealthStackedMoveDirective, selectors: [["", "ibmIconWatsonHealthStackedMove", ""]], inputs: { isFocusable: "isFocusable", ariaLabel: "ariaLabel", ariaLabelledby: "ariaLabelledby", ariaHidden: "ariaHidden", title: "title", size: "size" } });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(WatsonHealthStackedMoveDirective, [{
        type: Directive,
        args: [{
                selector: "[ibmIconWatsonHealthStackedMove]"
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, { isFocusable: [{
            type: Input
        }], ariaLabel: [{
            type: Input
        }], ariaLabelledby: [{
            type: Input
        }], ariaHidden: [{
            type: Input
        }], title: [{
            type: Input
        }], size: [{
            type: Input
        }] }); })();
    return WatsonHealthStackedMoveDirective;
}());
var WatsonHealthStackedMoveModule = /** @class */ (function () {
    function WatsonHealthStackedMoveModule() {
    }
WatsonHealthStackedMoveModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: WatsonHealthStackedMoveModule });
WatsonHealthStackedMoveModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function WatsonHealthStackedMoveModule_Factory(t) { return new (t || WatsonHealthStackedMoveModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(WatsonHealthStackedMoveModule, { declarations: [WatsonHealthStackedMoveComponent, WatsonHealthStackedMoveDirective], exports: [WatsonHealthStackedMoveComponent, WatsonHealthStackedMoveDirective] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(WatsonHealthStackedMoveModule, [{
        type: NgModule,
        args: [{
                declarations: [
                    WatsonHealthStackedMoveComponent,
                    WatsonHealthStackedMoveDirective,
                ],
                exports: [
                    WatsonHealthStackedMoveComponent,
                    WatsonHealthStackedMoveDirective,
                ]
            }]
    }], function () { return []; }, null); })();
    return WatsonHealthStackedMoveModule;
}());

export { WatsonHealthStackedMoveComponent, WatsonHealthStackedMoveDirective, WatsonHealthStackedMoveModule };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,