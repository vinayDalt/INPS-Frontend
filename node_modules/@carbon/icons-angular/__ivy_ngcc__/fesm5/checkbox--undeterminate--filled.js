import { __decorate, __metadata } from 'tslib';
import { Input, Component, ElementRef, Directive, NgModule } from '@angular/core';
import { getAttributes } from '@carbon/icon-helpers';

import * as ɵngcc0 from '@angular/core';
var CheckboxUndeterminateFilledComponent = /** @class */ (function () {
    function CheckboxUndeterminateFilledComponent() {
        this.focusable = false;
    }
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], CheckboxUndeterminateFilledComponent.prototype, "ariaLabel", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], CheckboxUndeterminateFilledComponent.prototype, "ariaLabelledby", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], CheckboxUndeterminateFilledComponent.prototype, "ariaHidden", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], CheckboxUndeterminateFilledComponent.prototype, "title", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], CheckboxUndeterminateFilledComponent.prototype, "focusable", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], CheckboxUndeterminateFilledComponent.prototype, "innerClass", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], CheckboxUndeterminateFilledComponent.prototype, "size", void 0);
CheckboxUndeterminateFilledComponent.ɵfac = function CheckboxUndeterminateFilledComponent_Factory(t) { return new (t || CheckboxUndeterminateFilledComponent)(); };
CheckboxUndeterminateFilledComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: CheckboxUndeterminateFilledComponent, selectors: [["ibm-icon-checkbox-undeterminate-filled"]], inputs: { focusable: "focusable", ariaLabel: "ariaLabel", ariaLabelledby: "ariaLabelledby", ariaHidden: "ariaHidden", title: "title", innerClass: "innerClass", size: "size" }, decls: 1, vars: 7, consts: [["ibmIconCheckboxUndeterminateFilled", "", 3, "size", "ariaLabel", "ariaLabelledby", "ariaHidden", "title", "isFocusable"]], template: function CheckboxUndeterminateFilledComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵnamespaceSVG();
        ɵngcc0.ɵɵelement(0, "svg", 0);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("size", ctx.size)("ariaLabel", ctx.ariaLabel)("ariaLabelledby", ctx.ariaLabelledby)("ariaHidden", ctx.ariaHidden)("title", ctx.title)("isFocusable", ctx.focusable);
        ɵngcc0.ɵɵattribute("class", ctx.innerClass);
    } }, directives: function () { return [CheckboxUndeterminateFilledDirective]; }, encapsulation: 2 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CheckboxUndeterminateFilledComponent, [{
        type: Component,
        args: [{
                selector: "ibm-icon-checkbox-undeterminate-filled",
                template: "\n    <svg\n      ibmIconCheckboxUndeterminateFilled\n      [size]=\"size\"\n      [ariaLabel]=\"ariaLabel\"\n      [ariaLabelledby]=\"ariaLabelledby\"\n      [ariaHidden]=\"ariaHidden\"\n      [title]=\"title\"\n      [isFocusable]=\"focusable\"\n      [attr.class]=\"innerClass\">\n    </svg>\n  "
            }]
    }], function () { return []; }, { focusable: [{
            type: Input
        }], ariaLabel: [{
            type: Input
        }], ariaLabelledby: [{
            type: Input
        }], ariaHidden: [{
            type: Input
        }], title: [{
            type: Input
        }], innerClass: [{
            type: Input
        }], size: [{
            type: Input
        }] }); })();
    return CheckboxUndeterminateFilledComponent;
}());
var CheckboxUndeterminateFilledDirective = /** @class */ (function () {
    function CheckboxUndeterminateFilledDirective(elementRef) {
        this.elementRef = elementRef;
        this.isFocusable = false;
        this.icons = {
            "32": {
                metadata: { "moduleName": "CheckboxUndeterminateFilled32", "filepath": "checkbox--undeterminate--filled/32.js", "descriptor": { "elem": "svg", "attrs": { "xmlns": "http://www.w3.org/2000/svg", "viewBox": "0 0 32 32", "fill": "currentColor", "width": 32, "height": 32 }, "content": [{ "elem": "path", "attrs": { "d": "M26,4H6A2,2,0,0,0,4,6V26a2,2,0,0,0,2,2H26a2,2,0,0,0,2-2V6A2,2,0,0,0,26,4ZM22,18H10V14H22Z" } }], "name": "checkbox--undeterminate--filled", "size": 32 }, "size": 32 },
                svg: "<svg focusable=\"false\" preserveAspectRatio=\"xMidYMid meet\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"currentColor\" width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" aria-hidden=\"true\"><path d=\"M26,4H6A2,2,0,0,0,4,6V26a2,2,0,0,0,2,2H26a2,2,0,0,0,2-2V6A2,2,0,0,0,26,4ZM22,18H10V14H22Z\"></path></svg>"
            },
            "24": {
                metadata: { "moduleName": "CheckboxUndeterminateFilled24", "filepath": "checkbox--undeterminate--filled/24.js", "descriptor": { "elem": "svg", "attrs": { "xmlns": "http://www.w3.org/2000/svg", "viewBox": "0 0 32 32", "fill": "currentColor", "width": 24, "height": 24 }, "content": [{ "elem": "path", "attrs": { "d": "M26,4H6A2,2,0,0,0,4,6V26a2,2,0,0,0,2,2H26a2,2,0,0,0,2-2V6A2,2,0,0,0,26,4ZM22,18H10V14H22Z" } }], "name": "checkbox--undeterminate--filled", "size": 24 }, "size": 24 },
                svg: "<svg focusable=\"false\" preserveAspectRatio=\"xMidYMid meet\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"currentColor\" width=\"24\" height=\"24\" viewBox=\"0 0 32 32\" aria-hidden=\"true\"><path d=\"M26,4H6A2,2,0,0,0,4,6V26a2,2,0,0,0,2,2H26a2,2,0,0,0,2-2V6A2,2,0,0,0,26,4ZM22,18H10V14H22Z\"></path></svg>"
            },
            "20": {
                metadata: { "moduleName": "CheckboxUndeterminateFilled20", "filepath": "checkbox--undeterminate--filled/20.js", "descriptor": { "elem": "svg", "attrs": { "xmlns": "http://www.w3.org/2000/svg", "viewBox": "0 0 32 32", "fill": "currentColor", "width": 20, "height": 20 }, "content": [{ "elem": "path", "attrs": { "d": "M26,4H6A2,2,0,0,0,4,6V26a2,2,0,0,0,2,2H26a2,2,0,0,0,2-2V6A2,2,0,0,0,26,4ZM22,18H10V14H22Z" } }], "name": "checkbox--undeterminate--filled", "size": 20 }, "size": 20 },
                svg: "<svg focusable=\"false\" preserveAspectRatio=\"xMidYMid meet\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"currentColor\" width=\"20\" height=\"20\" viewBox=\"0 0 32 32\" aria-hidden=\"true\"><path d=\"M26,4H6A2,2,0,0,0,4,6V26a2,2,0,0,0,2,2H26a2,2,0,0,0,2-2V6A2,2,0,0,0,26,4ZM22,18H10V14H22Z\"></path></svg>"
            },
            "16": {
                metadata: { "moduleName": "CheckboxUndeterminateFilled16", "filepath": "checkbox--undeterminate--filled/16.js", "descriptor": { "elem": "svg", "attrs": { "xmlns": "http://www.w3.org/2000/svg", "viewBox": "0 0 32 32", "fill": "currentColor", "width": 16, "height": 16 }, "content": [{ "elem": "path", "attrs": { "d": "M26,4H6A2,2,0,0,0,4,6V26a2,2,0,0,0,2,2H26a2,2,0,0,0,2-2V6A2,2,0,0,0,26,4ZM22,18H10V14H22Z" } }], "name": "checkbox--undeterminate--filled", "size": 16 }, "size": 16 },
                svg: "<svg focusable=\"false\" preserveAspectRatio=\"xMidYMid meet\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"currentColor\" width=\"16\" height=\"16\" viewBox=\"0 0 32 32\" aria-hidden=\"true\"><path d=\"M26,4H6A2,2,0,0,0,4,6V26a2,2,0,0,0,2,2H26a2,2,0,0,0,2-2V6A2,2,0,0,0,26,4ZM22,18H10V14H22Z\"></path></svg>"
            },
        };
    }
    CheckboxUndeterminateFilledDirective_1 = CheckboxUndeterminateFilledDirective;
    CheckboxUndeterminateFilledDirective.prototype.ngAfterViewInit = function () {
        var svg = this.elementRef.nativeElement;
        svg.setAttribute("xmlns", "http://www.w3.org/2000/svg");
        var icon = this.icons[this.size];
        var domParser = new DOMParser();
        var rawSVG = icon.svg;
        var svgElement = domParser.parseFromString(rawSVG, "image/svg+xml").documentElement;
        var node = svgElement.firstChild;
        while (node) {
            // importNode makes a clone of the node
            // this ensures we keep looping over the nodes in the parsed document
            svg.appendChild(svg.ownerDocument.importNode(node, true));
            node = node.nextSibling;
        }
        var attributes = getAttributes({
            width: icon.metadata.descriptor.attrs.height,
            height: icon.metadata.descriptor.attrs.height,
            viewBox: icon.metadata.descriptor.attrs.viewBox,
            title: this.title,
            "aria-label": this.ariaLabel,
            "aria-labelledby": this.ariaLabelledby,
            "aria-hidden": this.ariaHidden,
            focusable: this.isFocusable.toString()
        });
        var attrKeys = Object.keys(attributes);
        for (var i = 0; i < attrKeys.length; i++) {
            var key = attrKeys[i];
            var value = attributes[key];
            if (key === "title") {
                continue;
            }
            if (value) {
                svg.setAttribute(key, value);
            }
        }
        if (attributes.title) {
            var title = document.createElement("title");
            title.textContent = attributes.title;
            CheckboxUndeterminateFilledDirective_1.titleIdCounter++;
            title.setAttribute("id", "checkbox-undeterminate-filled-" + CheckboxUndeterminateFilledDirective_1.titleIdCounter);
            svg.appendChild(title);
            svg.setAttribute("aria-labelledby", "checkbox-undeterminate-filled-" + CheckboxUndeterminateFilledDirective_1.titleIdCounter);
        }
    };
    var CheckboxUndeterminateFilledDirective_1;
    CheckboxUndeterminateFilledDirective.titleIdCounter = 0;
    CheckboxUndeterminateFilledDirective.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], CheckboxUndeterminateFilledDirective.prototype, "ariaLabel", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], CheckboxUndeterminateFilledDirective.prototype, "ariaLabelledby", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], CheckboxUndeterminateFilledDirective.prototype, "ariaHidden", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], CheckboxUndeterminateFilledDirective.prototype, "title", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], CheckboxUndeterminateFilledDirective.prototype, "isFocusable", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], CheckboxUndeterminateFilledDirective.prototype, "size", void 0);
    CheckboxUndeterminateFilledDirective = CheckboxUndeterminateFilledDirective_1 = __decorate([ __metadata("design:paramtypes", [ElementRef])
    ], CheckboxUndeterminateFilledDirective);
CheckboxUndeterminateFilledDirective.ɵfac = function CheckboxUndeterminateFilledDirective_Factory(t) { return new (t || CheckboxUndeterminateFilledDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
CheckboxUndeterminateFilledDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CheckboxUndeterminateFilledDirective, selectors: [["", "ibmIconCheckboxUndeterminateFilled", ""]], inputs: { isFocusable: "isFocusable", ariaLabel: "ariaLabel", ariaLabelledby: "ariaLabelledby", ariaHidden: "ariaHidden", title: "title", size: "size" } });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CheckboxUndeterminateFilledDirective, [{
        type: Directive,
        args: [{
                selector: "[ibmIconCheckboxUndeterminateFilled]"
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, { isFocusable: [{
            type: Input
        }], ariaLabel: [{
            type: Input
        }], ariaLabelledby: [{
            type: Input
        }], ariaHidden: [{
            type: Input
        }], title: [{
            type: Input
        }], size: [{
            type: Input
        }] }); })();
    return CheckboxUndeterminateFilledDirective;
}());
var CheckboxUndeterminateFilledModule = /** @class */ (function () {
    function CheckboxUndeterminateFilledModule() {
    }
CheckboxUndeterminateFilledModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: CheckboxUndeterminateFilledModule });
CheckboxUndeterminateFilledModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function CheckboxUndeterminateFilledModule_Factory(t) { return new (t || CheckboxUndeterminateFilledModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(CheckboxUndeterminateFilledModule, { declarations: [CheckboxUndeterminateFilledComponent, CheckboxUndeterminateFilledDirective], exports: [CheckboxUndeterminateFilledComponent, CheckboxUndeterminateFilledDirective] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CheckboxUndeterminateFilledModule, [{
        type: NgModule,
        args: [{
                declarations: [
                    CheckboxUndeterminateFilledComponent,
                    CheckboxUndeterminateFilledDirective,
                ],
                exports: [
                    CheckboxUndeterminateFilledComponent,
                    CheckboxUndeterminateFilledDirective,
                ]
            }]
    }], function () { return []; }, null); })();
    return CheckboxUndeterminateFilledModule;
}());

export { CheckboxUndeterminateFilledComponent, CheckboxUndeterminateFilledDirective, CheckboxUndeterminateFilledModule };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,