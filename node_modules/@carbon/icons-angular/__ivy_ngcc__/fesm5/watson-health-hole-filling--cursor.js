import { __decorate, __metadata } from 'tslib';
import { Input, Component, ElementRef, Directive, NgModule } from '@angular/core';
import { getAttributes } from '@carbon/icon-helpers';

import * as ɵngcc0 from '@angular/core';
var WatsonHealthHoleFillingCursorComponent = /** @class */ (function () {
    function WatsonHealthHoleFillingCursorComponent() {
        this.focusable = false;
    }
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], WatsonHealthHoleFillingCursorComponent.prototype, "ariaLabel", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], WatsonHealthHoleFillingCursorComponent.prototype, "ariaLabelledby", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], WatsonHealthHoleFillingCursorComponent.prototype, "ariaHidden", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], WatsonHealthHoleFillingCursorComponent.prototype, "title", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], WatsonHealthHoleFillingCursorComponent.prototype, "focusable", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], WatsonHealthHoleFillingCursorComponent.prototype, "innerClass", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], WatsonHealthHoleFillingCursorComponent.prototype, "size", void 0);
WatsonHealthHoleFillingCursorComponent.ɵfac = function WatsonHealthHoleFillingCursorComponent_Factory(t) { return new (t || WatsonHealthHoleFillingCursorComponent)(); };
WatsonHealthHoleFillingCursorComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: WatsonHealthHoleFillingCursorComponent, selectors: [["ibm-icon-watson-health-hole-filling-cursor"]], inputs: { focusable: "focusable", ariaLabel: "ariaLabel", ariaLabelledby: "ariaLabelledby", ariaHidden: "ariaHidden", title: "title", innerClass: "innerClass", size: "size" }, decls: 1, vars: 7, consts: [["ibmIconWatsonHealthHoleFillingCursor", "", 3, "size", "ariaLabel", "ariaLabelledby", "ariaHidden", "title", "isFocusable"]], template: function WatsonHealthHoleFillingCursorComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵnamespaceSVG();
        ɵngcc0.ɵɵelement(0, "svg", 0);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("size", ctx.size)("ariaLabel", ctx.ariaLabel)("ariaLabelledby", ctx.ariaLabelledby)("ariaHidden", ctx.ariaHidden)("title", ctx.title)("isFocusable", ctx.focusable);
        ɵngcc0.ɵɵattribute("class", ctx.innerClass);
    } }, directives: function () { return [WatsonHealthHoleFillingCursorDirective]; }, encapsulation: 2 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(WatsonHealthHoleFillingCursorComponent, [{
        type: Component,
        args: [{
                selector: "ibm-icon-watson-health-hole-filling-cursor",
                template: "\n    <svg\n      ibmIconWatsonHealthHoleFillingCursor\n      [size]=\"size\"\n      [ariaLabel]=\"ariaLabel\"\n      [ariaLabelledby]=\"ariaLabelledby\"\n      [ariaHidden]=\"ariaHidden\"\n      [title]=\"title\"\n      [isFocusable]=\"focusable\"\n      [attr.class]=\"innerClass\">\n    </svg>\n  "
            }]
    }], function () { return []; }, { focusable: [{
            type: Input
        }], ariaLabel: [{
            type: Input
        }], ariaLabelledby: [{
            type: Input
        }], ariaHidden: [{
            type: Input
        }], title: [{
            type: Input
        }], innerClass: [{
            type: Input
        }], size: [{
            type: Input
        }] }); })();
    return WatsonHealthHoleFillingCursorComponent;
}());
var WatsonHealthHoleFillingCursorDirective = /** @class */ (function () {
    function WatsonHealthHoleFillingCursorDirective(elementRef) {
        this.elementRef = elementRef;
        this.isFocusable = false;
        this.icons = {
            "32": {
                metadata: { "moduleName": "WatsonHealthHoleFillingCursor32", "filepath": "watson-health/hole-filling--cursor/32.js", "descriptor": { "elem": "svg", "attrs": { "xmlns": "http://www.w3.org/2000/svg", "viewBox": "0 0 32 32", "fill": "currentColor", "width": 32, "height": 32 }, "content": [{ "elem": "circle", "attrs": { "cx": "19", "cy": "19", "r": "4" } }, { "elem": "path", "attrs": { "d": "M28 30H10a2.0023 2.0023 0 01-2-2V10a2.0023 2.0023 0 012-2H28a2.0023 2.0023 0 012 2V28A2.0023 2.0023 0 0128 30zM10 10V28H28V10zM11 2L2 2 2 11 4 11 4 4 11 4 11 2z" } }], "name": "hole-filling--cursor", "size": 32 }, "size": 32 },
                svg: "<svg focusable=\"false\" preserveAspectRatio=\"xMidYMid meet\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"currentColor\" width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" aria-hidden=\"true\"><circle cx=\"19\" cy=\"19\" r=\"4\"></circle><path d=\"M28 30H10a2.0023 2.0023 0 01-2-2V10a2.0023 2.0023 0 012-2H28a2.0023 2.0023 0 012 2V28A2.0023 2.0023 0 0128 30zM10 10V28H28V10zM11 2L2 2 2 11 4 11 4 4 11 4 11 2z\"></path></svg>"
            },
            "24": {
                metadata: { "moduleName": "WatsonHealthHoleFillingCursor24", "filepath": "watson-health/hole-filling--cursor/24.js", "descriptor": { "elem": "svg", "attrs": { "xmlns": "http://www.w3.org/2000/svg", "viewBox": "0 0 32 32", "fill": "currentColor", "width": 24, "height": 24 }, "content": [{ "elem": "circle", "attrs": { "cx": "19", "cy": "19", "r": "4" } }, { "elem": "path", "attrs": { "d": "M28 30H10a2.0023 2.0023 0 01-2-2V10a2.0023 2.0023 0 012-2H28a2.0023 2.0023 0 012 2V28A2.0023 2.0023 0 0128 30zM10 10V28H28V10zM11 2L2 2 2 11 4 11 4 4 11 4 11 2z" } }], "name": "hole-filling--cursor", "size": 24 }, "size": 24 },
                svg: "<svg focusable=\"false\" preserveAspectRatio=\"xMidYMid meet\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"currentColor\" width=\"24\" height=\"24\" viewBox=\"0 0 32 32\" aria-hidden=\"true\"><circle cx=\"19\" cy=\"19\" r=\"4\"></circle><path d=\"M28 30H10a2.0023 2.0023 0 01-2-2V10a2.0023 2.0023 0 012-2H28a2.0023 2.0023 0 012 2V28A2.0023 2.0023 0 0128 30zM10 10V28H28V10zM11 2L2 2 2 11 4 11 4 4 11 4 11 2z\"></path></svg>"
            },
            "20": {
                metadata: { "moduleName": "WatsonHealthHoleFillingCursor20", "filepath": "watson-health/hole-filling--cursor/20.js", "descriptor": { "elem": "svg", "attrs": { "xmlns": "http://www.w3.org/2000/svg", "viewBox": "0 0 32 32", "fill": "currentColor", "width": 20, "height": 20 }, "content": [{ "elem": "circle", "attrs": { "cx": "19", "cy": "19", "r": "4" } }, { "elem": "path", "attrs": { "d": "M28 30H10a2.0023 2.0023 0 01-2-2V10a2.0023 2.0023 0 012-2H28a2.0023 2.0023 0 012 2V28A2.0023 2.0023 0 0128 30zM10 10V28H28V10zM11 2L2 2 2 11 4 11 4 4 11 4 11 2z" } }], "name": "hole-filling--cursor", "size": 20 }, "size": 20 },
                svg: "<svg focusable=\"false\" preserveAspectRatio=\"xMidYMid meet\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"currentColor\" width=\"20\" height=\"20\" viewBox=\"0 0 32 32\" aria-hidden=\"true\"><circle cx=\"19\" cy=\"19\" r=\"4\"></circle><path d=\"M28 30H10a2.0023 2.0023 0 01-2-2V10a2.0023 2.0023 0 012-2H28a2.0023 2.0023 0 012 2V28A2.0023 2.0023 0 0128 30zM10 10V28H28V10zM11 2L2 2 2 11 4 11 4 4 11 4 11 2z\"></path></svg>"
            },
            "16": {
                metadata: { "moduleName": "WatsonHealthHoleFillingCursor16", "filepath": "watson-health/hole-filling--cursor/16.js", "descriptor": { "elem": "svg", "attrs": { "xmlns": "http://www.w3.org/2000/svg", "viewBox": "0 0 32 32", "fill": "currentColor", "width": 16, "height": 16 }, "content": [{ "elem": "circle", "attrs": { "cx": "19", "cy": "19", "r": "4" } }, { "elem": "path", "attrs": { "d": "M28 30H10a2.0023 2.0023 0 01-2-2V10a2.0023 2.0023 0 012-2H28a2.0023 2.0023 0 012 2V28A2.0023 2.0023 0 0128 30zM10 10V28H28V10zM11 2L2 2 2 11 4 11 4 4 11 4 11 2z" } }], "name": "hole-filling--cursor", "size": 16 }, "size": 16 },
                svg: "<svg focusable=\"false\" preserveAspectRatio=\"xMidYMid meet\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"currentColor\" width=\"16\" height=\"16\" viewBox=\"0 0 32 32\" aria-hidden=\"true\"><circle cx=\"19\" cy=\"19\" r=\"4\"></circle><path d=\"M28 30H10a2.0023 2.0023 0 01-2-2V10a2.0023 2.0023 0 012-2H28a2.0023 2.0023 0 012 2V28A2.0023 2.0023 0 0128 30zM10 10V28H28V10zM11 2L2 2 2 11 4 11 4 4 11 4 11 2z\"></path></svg>"
            },
        };
    }
    WatsonHealthHoleFillingCursorDirective_1 = WatsonHealthHoleFillingCursorDirective;
    WatsonHealthHoleFillingCursorDirective.prototype.ngAfterViewInit = function () {
        var svg = this.elementRef.nativeElement;
        svg.setAttribute("xmlns", "http://www.w3.org/2000/svg");
        var icon = this.icons[this.size];
        var domParser = new DOMParser();
        var rawSVG = icon.svg;
        var svgElement = domParser.parseFromString(rawSVG, "image/svg+xml").documentElement;
        var node = svgElement.firstChild;
        while (node) {
            // importNode makes a clone of the node
            // this ensures we keep looping over the nodes in the parsed document
            svg.appendChild(svg.ownerDocument.importNode(node, true));
            node = node.nextSibling;
        }
        var attributes = getAttributes({
            width: icon.metadata.descriptor.attrs.height,
            height: icon.metadata.descriptor.attrs.height,
            viewBox: icon.metadata.descriptor.attrs.viewBox,
            title: this.title,
            "aria-label": this.ariaLabel,
            "aria-labelledby": this.ariaLabelledby,
            "aria-hidden": this.ariaHidden,
            focusable: this.isFocusable.toString()
        });
        var attrKeys = Object.keys(attributes);
        for (var i = 0; i < attrKeys.length; i++) {
            var key = attrKeys[i];
            var value = attributes[key];
            if (key === "title") {
                continue;
            }
            if (value) {
                svg.setAttribute(key, value);
            }
        }
        if (attributes.title) {
            var title = document.createElement("title");
            title.textContent = attributes.title;
            WatsonHealthHoleFillingCursorDirective_1.titleIdCounter++;
            title.setAttribute("id", "watson-health-hole-filling-cursor-" + WatsonHealthHoleFillingCursorDirective_1.titleIdCounter);
            svg.appendChild(title);
            svg.setAttribute("aria-labelledby", "watson-health-hole-filling-cursor-" + WatsonHealthHoleFillingCursorDirective_1.titleIdCounter);
        }
    };
    var WatsonHealthHoleFillingCursorDirective_1;
    WatsonHealthHoleFillingCursorDirective.titleIdCounter = 0;
    WatsonHealthHoleFillingCursorDirective.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], WatsonHealthHoleFillingCursorDirective.prototype, "ariaLabel", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], WatsonHealthHoleFillingCursorDirective.prototype, "ariaLabelledby", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], WatsonHealthHoleFillingCursorDirective.prototype, "ariaHidden", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], WatsonHealthHoleFillingCursorDirective.prototype, "title", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], WatsonHealthHoleFillingCursorDirective.prototype, "isFocusable", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], WatsonHealthHoleFillingCursorDirective.prototype, "size", void 0);
    WatsonHealthHoleFillingCursorDirective = WatsonHealthHoleFillingCursorDirective_1 = __decorate([ __metadata("design:paramtypes", [ElementRef])
    ], WatsonHealthHoleFillingCursorDirective);
WatsonHealthHoleFillingCursorDirective.ɵfac = function WatsonHealthHoleFillingCursorDirective_Factory(t) { return new (t || WatsonHealthHoleFillingCursorDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
WatsonHealthHoleFillingCursorDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: WatsonHealthHoleFillingCursorDirective, selectors: [["", "ibmIconWatsonHealthHoleFillingCursor", ""]], inputs: { isFocusable: "isFocusable", ariaLabel: "ariaLabel", ariaLabelledby: "ariaLabelledby", ariaHidden: "ariaHidden", title: "title", size: "size" } });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(WatsonHealthHoleFillingCursorDirective, [{
        type: Directive,
        args: [{
                selector: "[ibmIconWatsonHealthHoleFillingCursor]"
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, { isFocusable: [{
            type: Input
        }], ariaLabel: [{
            type: Input
        }], ariaLabelledby: [{
            type: Input
        }], ariaHidden: [{
            type: Input
        }], title: [{
            type: Input
        }], size: [{
            type: Input
        }] }); })();
    return WatsonHealthHoleFillingCursorDirective;
}());
var WatsonHealthHoleFillingCursorModule = /** @class */ (function () {
    function WatsonHealthHoleFillingCursorModule() {
    }
WatsonHealthHoleFillingCursorModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: WatsonHealthHoleFillingCursorModule });
WatsonHealthHoleFillingCursorModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function WatsonHealthHoleFillingCursorModule_Factory(t) { return new (t || WatsonHealthHoleFillingCursorModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(WatsonHealthHoleFillingCursorModule, { declarations: [WatsonHealthHoleFillingCursorComponent, WatsonHealthHoleFillingCursorDirective], exports: [WatsonHealthHoleFillingCursorComponent, WatsonHealthHoleFillingCursorDirective] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(WatsonHealthHoleFillingCursorModule, [{
        type: NgModule,
        args: [{
                declarations: [
                    WatsonHealthHoleFillingCursorComponent,
                    WatsonHealthHoleFillingCursorDirective,
                ],
                exports: [
                    WatsonHealthHoleFillingCursorComponent,
                    WatsonHealthHoleFillingCursorDirective,
                ]
            }]
    }], function () { return []; }, null); })();
    return WatsonHealthHoleFillingCursorModule;
}());

export { WatsonHealthHoleFillingCursorComponent, WatsonHealthHoleFillingCursorDirective, WatsonHealthHoleFillingCursorModule };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,